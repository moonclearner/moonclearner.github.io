<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>moonclearner page</title>
  
  <subtitle>moonclearner blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://moonclearner.cn/"/>
  <updated>2020-08-10T12:24:13.771Z</updated>
  <id>https://moonclearner.cn/</id>
  
  <author>
    <name>moonclearner</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>postgresql Learning Note</title>
    <link href="https://moonclearner.cn/databases/postgresql/postgresqlLearningNote.html"/>
    <id>https://moonclearner.cn/databases/postgresql/postgresqlLearningNote.html</id>
    <published>2020-08-10T12:24:13.771Z</published>
    <updated>2020-08-10T12:24:13.771Z</updated>
    
    <content type="html"><![CDATA[<h1 id="postgresql-LearningNote"><a href="#postgresql-LearningNote" class="headerlink" title="postgresql LearningNote"></a>postgresql LearningNote</h1><h2 id="时间相关"><a href="#时间相关" class="headerlink" title="时间相关"></a>时间相关</h2><h3 id="查询昨天的数据"><a href="#查询昨天的数据" class="headerlink" title="查询昨天的数据"></a>查询昨天的数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">audit</span> <span class="keyword">where</span> <span class="keyword">current_date</span>- <span class="built_in">DATE</span>(to_char(to_timestamp(<span class="built_in">time</span>), <span class="string">'YYYY-MM-DD 00:00:00'</span>))=<span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="查询当天的数据"><a href="#查询当天的数据" class="headerlink" title="查询当天的数据"></a>查询当天的数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">audit</span> <span class="keyword">where</span> age(<span class="keyword">current_date</span>, <span class="built_in">DATE</span>(to_char(to_timestamp(<span class="built_in">time</span>), <span class="string">'YYYY-MM-DD 00:00:00'</span>)))=<span class="string">'00:00:00'</span>;</span><br></pre></td></tr></table></figure><h3 id="查询当月的数据"><a href="#查询当月的数据" class="headerlink" title="查询当月的数据"></a>查询当月的数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">audit</span> <span class="keyword">where</span> age(<span class="keyword">current_date</span>, <span class="built_in">DATE</span>(to_char(to_timestamp(<span class="built_in">time</span>), <span class="string">'YYYY-MM-DD 00:00:00'</span>)))=<span class="string">'1 mons'</span>;</span><br></pre></td></tr></table></figure><h3 id="查询当年的数据"><a href="#查询当年的数据" class="headerlink" title="查询当年的数据"></a>查询当年的数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">audit</span> <span class="keyword">where</span> age(<span class="keyword">current_date</span>, <span class="built_in">DATE</span>(to_char(to_timestamp(<span class="built_in">time</span>), <span class="string">'YYYY-MM-DD 00:00:00'</span>)))=<span class="string">'1 years'</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;postgresql-LearningNote&quot;&gt;&lt;a href=&quot;#postgresql-LearningNote&quot; class=&quot;headerlink&quot; title=&quot;postgresql LearningNote&quot;&gt;&lt;/a&gt;postgresql Learni
      
    
    </summary>
    
      <category term="postgresql" scheme="https://moonclearner.cn/categories/postgresql/"/>
    
    
      <category term="postgresql" scheme="https://moonclearner.cn/tags/postgresql/"/>
    
  </entry>
  
  <entry>
    <title>PHP View File</title>
    <link href="https://moonclearner.cn/php/php_view_file.html"/>
    <id>https://moonclearner.cn/php/php_view_file.html</id>
    <published>2020-07-23T03:09:08.823Z</published>
    <updated>2020-07-23T03:09:08.823Z</updated>
    
    <content type="html"><![CDATA[<h1 id="php-读取文件返回给浏览器直接预览而不是下载"><a href="#php-读取文件返回给浏览器直接预览而不是下载" class="headerlink" title="php 读取文件返回给浏览器直接预览而不是下载"></a>php 读取文件返回给浏览器直接预览而不是下载</h1><h2 id="预览PDF"><a href="#预览PDF" class="headerlink" title="预览PDF"></a>预览PDF</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">header(&quot;Content-Type: application/pdf&quot;);</span><br><span class="line">header(&apos;Content-Disposition: inline; filename=&quot;test.pdf&quot;&apos;);</span><br><span class="line">header(&apos;Content-Transfer-Encoding: binary&apos;);</span><br><span class="line">header(&apos;Accept-Ranges: bytes&apos;);</span><br><span class="line">@readfile($filePath);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;php-读取文件返回给浏览器直接预览而不是下载&quot;&gt;&lt;a href=&quot;#php-读取文件返回给浏览器直接预览而不是下载&quot; class=&quot;headerlink&quot; title=&quot;php 读取文件返回给浏览器直接预览而不是下载&quot;&gt;&lt;/a&gt;php 读取文件返回给浏览器直接预
      
    
    </summary>
    
      <category term="php" scheme="https://moonclearner.cn/categories/php/"/>
    
    
      <category term="php" scheme="https://moonclearner.cn/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>common cmd</title>
    <link href="https://moonclearner.cn/shell/common_cmd.html"/>
    <id>https://moonclearner.cn/shell/common_cmd.html</id>
    <published>2020-05-25T06:16:36.896Z</published>
    <updated>2020-05-25T06:16:36.864Z</updated>
    
    <content type="html"><![CDATA[<h1 id="common-cmd"><a href="#common-cmd" class="headerlink" title="common cmd"></a>common cmd</h1><h2 id="delete-all-files-in-the-current-path-except-file-A"><a href="#delete-all-files-in-the-current-path-except-file-A" class="headerlink" title="delete all files in the current path except file A"></a>delete all files in the current path except file A</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">find ./* |grep -v A |xargs rm -r</span><br><span class="line"></span><br><span class="line"># second method</span><br><span class="line">rm -rf !(keep1 | keep2)</span><br></pre></td></tr></table></figure><h2 id="delete-all-file-except-py-file"><a href="#delete-all-file-except-py-file" class="headerlink" title="delete all file except py file"></a>delete all file except py file</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -name &quot;*&quot; -type f |grep -v &quot;.py&quot; |grep  &quot;\.&quot; |xargs rm -rf</span><br></pre></td></tr></table></figure><h2 id="kill-all-python-process"><a href="#kill-all-python-process" class="headerlink" title="kill all python process"></a>kill all python process</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef|grep python |grep -v grep|awk  &apos;&#123;print $2&#125;&apos;|xargs kill -9</span><br></pre></td></tr></table></figure><h2 id="bash-shortkey"><a href="#bash-shortkey" class="headerlink" title="bash shortkey"></a>bash shortkey</h2><ul><li><p>history 显示命令历史列表</p></li><li><p>↑(Ctrl+p) 显示上一条命令</p></li><li><p>↓(Ctrl+n) 显示下一条命令</p></li><li><p>!num 执行命令历史列表的第num条命令</p></li><li><p>!! 执行上一条命令</p></li><li><p>!?string? 执行含有string字符串的最新命令</p></li><li><p>Ctrl+r 然后输入若干字符，开始向上搜索包含该字符的命令，继续按Ctrl+r，搜索上一条匹配的命令</p></li><li><p>Ctrl+s 与Ctrl+r类似,只是正向检索</p></li><li><p>Alt+&lt; 历史列表第一项</p></li><li><p>Alt+&gt; 历史列表最后一项</p></li><li><p>Ctrl+f 光标向前移动一个字符,相当与-&gt;</p></li><li><p>Ctrl+b 光标向后移动一个字符,相当与&lt;-</p></li><li><p>Alt+f 光标向前移动一个单词</p></li><li><p>Alt+b 光标向后移动一个单词</p></li><li><p>ls !$ 执行命令ls，并以上一条命令的参数为其参数</p></li><li><p>Ctrl+a 移动到当前行的开头</p></li><li><p>Ctrl+e 移动到当前行的结尾</p></li><li><p>Esc+b 移动到当前单词的开头</p></li><li><p>Esc+f 移动到当前单词的结尾</p></li><li><p>Ctrl+l 清屏</p></li><li><p>Ctrl+u 剪切命令行中光标所在处之前的所有字符（不包括自身）</p></li><li><p>Ctrl+k 剪切命令行中光标所在处之后的所有字符（包括自身）</p></li><li><p>Ctrl+d 删除光标所在处字符</p></li><li><p>Ctrl+h 删除光标所在处前一个字符</p></li><li><p>Ctrl+y 粘贴刚才所删除的字符</p></li><li><p>Ctrl+w 剪切光标所在处之前的一个词（以空格、标点等为分隔符）</p></li><li><p>Alt+d 剪切光标之后的词</p></li><li><p>Esc+w 删除光标所在处之前的字符至其单词尾（以空格、标点等为分隔符）</p></li><li><p>Ctrl+t 颠倒光标所在处及其之前的字符位置，并将光标移动到下一个字符</p></li><li><p>Alt+t 交换当前与以前单词的位置</p></li><li><p>Alt+u 把当前词转化为大写</p></li><li><p>Alt+l 把当前词转化为小写</p></li><li><p>Alt+c 把当前词汇变成首字符大写</p></li><li><p>Ctrl+v 插入特殊字符,如Ctrl+v+Tab加入Tab字符键</p></li><li><p>Esc+t 颠倒光标所在处及其相邻单词的位置</p></li><li><p>Ctrl+c 删除整行</p></li><li><p>Ctrl+(x u) 按住Ctrl的同时再先后按x和u，撤销刚才的操作</p></li><li><p>Ctrl+s 挂起当前shell</p></li><li><p>Ctrl+q 重新启用挂起的shell</p></li><li><p>[Ctrl] + [Alt] + [Backspace] = 杀死你当前的 X 会话。杀死图形化桌面会话，把你返回到登录屏幕。如果正常退出步骤不起作用，你可以使用这种方法。</p></li><li><p>[Ctrl] + [Alt] + [Delete] = 关机和重新引导 Red Hat Linux。关闭你当前的会话然后重新引导 OS。只有在正常关机步骤不起作用时才使用这种方法。</p></li><li><p>[Ctrl] + [Alt] + [Fn] = 切换屏幕。 [Ctrl] + [Alt] + 功能键之一会显示一个新屏幕。根据默认设置，从 [F1] 到 [F6] 是 shell 提示屏幕， [F7] 是图形化屏幕。</p></li><li><p>[Alt] + [Tab] = 在图形化桌面环境中切换任务。如果你同时打开了不止一个应用程序，你可以使用 [Alt] + [Tab] 来在打开的任务和应用程序间切换。</p></li><li><p>[Ctrl] + [a] = 把光标移到行首。它在多数文本编辑器和 Mozilla 的 URL 字段内可以使用。</p></li><li><p>[Ctrl] + [d] = 从 shell 提示中注销（并关闭）。使用该快捷键，你就不必键入 exit 或 logout 。</p></li><li><p>[Ctrl] + [e] = 把光标移到行尾。它在多数文本编辑器和 Mozilla 的 URL 字段内都可使用。</p></li><li><p>[Ctrl] + [l] = 清除终端。该快捷操作与在命令行键入 clear 作用相同。</p></li><li><p>[Ctrl] + = 清除当前行。如果你在终端下工作，使用这一快捷操作可以清除从光标处到行首的字符。</p></li><li><p>[鼠标中间键] = 粘贴突出显示的文本。使用鼠标左键来突出显示文本。把光标指向你想粘贴文本的地方。点击鼠标中间键来粘贴它。在两键鼠标系统中，如果你把鼠标配置成模拟第三键，你可以同时点击鼠标的左右两键来执行粘贴。</p></li><li><p>[Tab] =命令行自动补全。使用 shell 提示时可使用这一命令。键入命令或文件名的前几个字符，然后按 [Tab] 键，它会自动补全命令或显示匹配你键入字符的所有命令。</p></li><li><p>[向上] 和 [向下] 箭头 = 显示命令历史。当你使用 shell 提示时，按 [向上] 或 [向下] 箭头来前后查看你在当前目录下键入的命令历史。当你看到你想使用的命令时，按 [Enter] 键。</p></li><li><p>clear = 清除 shell 提示屏幕。在命令行下键入它会清除所有这个 shell 提示屏幕中显示的数据。</p></li><li><p>exit = 注销。在 shell 提示中键入它会注销当前的用户或根用户帐号。</p></li><li><p>history = 显示命令历史。在 shell 提示中键入它来显示你所键入的被编号的前 1000 个命令。要显示较短的命令历史，键入 history f之后，空一格，在键入一个数字。例如： history 20 。</p></li><li><p>reset = 刷新 shell 提示屏幕。如果字符不清晰或乱码的话，在 shell 提示下键入这个命令会刷新屏幕。</p></li><li><h1 id="Ctrl-U-擦除一行光标前面的部分。"><a href="#Ctrl-U-擦除一行光标前面的部分。" class="headerlink" title="Ctrl-U: 擦除一行光标前面的部分。"></a>Ctrl-U: 擦除一行光标前面的部分。</h1></li><li><h1 id="Ctrl-H-擦除光标前面的一个字符。"><a href="#Ctrl-H-擦除光标前面的一个字符。" class="headerlink" title="Ctrl-H: 擦除光标前面的一个字符。"></a>Ctrl-H: 擦除光标前面的一个字符。</h1></li><li><h1 id="Ctrl-D-终止输入。-退出-shell，如果您正在使用-shell-的话-。"><a href="#Ctrl-D-终止输入。-退出-shell，如果您正在使用-shell-的话-。" class="headerlink" title="Ctrl-D: 终止输入。(退出 shell，如果您正在使用 shell 的话)。"></a>Ctrl-D: 终止输入。(退出 shell，如果您正在使用 shell 的话)。</h1></li><li><h1 id="Ctrl-C-终止当前正在运行的程序。"><a href="#Ctrl-C-终止当前正在运行的程序。" class="headerlink" title="Ctrl-C: 终止当前正在运行的程序。"></a>Ctrl-C: 终止当前正在运行的程序。</h1></li><li><h1 id="Ctrl-Z-暂停程序。"><a href="#Ctrl-Z-暂停程序。" class="headerlink" title="Ctrl-Z: 暂停程序。"></a>Ctrl-Z: 暂停程序。</h1></li><li><h1 id="Ctrl-S-停止向屏幕输出。"><a href="#Ctrl-S-停止向屏幕输出。" class="headerlink" title="Ctrl-S: 停止向屏幕输出。"></a>Ctrl-S: 停止向屏幕输出。</h1></li><li><h1 id="Ctrl-Q-重新激活向屏幕输出。"><a href="#Ctrl-Q-重新激活向屏幕输出。" class="headerlink" title="Ctrl-Q: 重新激活向屏幕输出。"></a>Ctrl-Q: 重新激活向屏幕输出。</h1></li><li><h1 id="up-arrow-开始历史命令搜索。"><a href="#up-arrow-开始历史命令搜索。" class="headerlink" title="up-arrow: 开始历史命令搜索。"></a>up-arrow: 开始历史命令搜索。</h1></li><li><h1 id="Ctrl-R-开始增量历史命令搜索，可以按照关键字查查自己用过哪些命令。"><a href="#Ctrl-R-开始增量历史命令搜索，可以按照关键字查查自己用过哪些命令。" class="headerlink" title="Ctrl-R: 开始增量历史命令搜索，可以按照关键字查查自己用过哪些命令。"></a>Ctrl-R: 开始增量历史命令搜索，可以按照关键字查查自己用过哪些命令。</h1></li><li><h1 id="TAB-完整的把文件名输入到命令行。"><a href="#TAB-完整的把文件名输入到命令行。" class="headerlink" title="TAB: 完整的把文件名输入到命令行。"></a>TAB: 完整的把文件名输入到命令行。</h1></li><li><h1 id="Ctrl-V-TAB-输入-TAB-而不是扩展命令行。"><a href="#Ctrl-V-TAB-输入-TAB-而不是扩展命令行。" class="headerlink" title="Ctrl-V TAB: 输入 TAB 而不是扩展命令行。"></a>Ctrl-V TAB: 输入 TAB 而不是扩展命令行。</h1></li><li><h1 id="Ctrl-P-上一条命令"><a href="#Ctrl-P-上一条命令" class="headerlink" title="Ctrl + P - 上一条命令"></a>Ctrl + P - 上一条命令</h1></li><li><h1 id="Ctrl-N-下一条命令"><a href="#Ctrl-N-下一条命令" class="headerlink" title="Ctrl + N - 下一条命令"></a>Ctrl + N - 下一条命令</h1></li><li><h1 id="Ctrl-U-擦除一行光标前面的部分。-1"><a href="#Ctrl-U-擦除一行光标前面的部分。-1" class="headerlink" title="Ctrl-U: 擦除一行光标前面的部分。"></a>Ctrl-U: 擦除一行光标前面的部分。</h1></li><li><h1 id="Ctrl-Y-粘贴前一Ctrl-U类命令删除的字符-，是粘贴不是撤销啊！"><a href="#Ctrl-Y-粘贴前一Ctrl-U类命令删除的字符-，是粘贴不是撤销啊！" class="headerlink" title="Ctrl + Y - 粘贴前一Ctrl+U类命令删除的字符 ，是粘贴不是撤销啊！"></a>Ctrl + Y - 粘贴前一Ctrl+U类命令删除的字符 ，是粘贴不是撤销啊！</h1></li><li><h1 id="上一条命令"><a href="#上一条命令" class="headerlink" title="!! - 上一条命令"></a>!! - 上一条命令</h1></li><li><h1 id="n-倒数第N条历史命令"><a href="#n-倒数第N条历史命令" class="headerlink" title="!-n - 倒数第N条历史命令"></a>!-n - 倒数第N条历史命令</h1></li><li><h1 id="n-p-打印上一条命令（不执行）"><a href="#n-p-打印上一条命令（不执行）" class="headerlink" title="!-n:p - 打印上一条命令（不执行）"></a>!-n:p - 打印上一条命令（不执行）</h1></li><li><h1 id="string？-最新一条含有“string”的命令"><a href="#string？-最新一条含有“string”的命令" class="headerlink" title="!?string？- 最新一条含有“string”的命令"></a>!?string？- 最新一条含有“string”的命令</h1></li><li><h1 id="n-gs-str1-str2-将倒数第N条命令的str1替换为str2，并执行（若不加g-则仅替换第一个）"><a href="#n-gs-str1-str2-将倒数第N条命令的str1替换为str2，并执行（若不加g-则仅替换第一个）" class="headerlink" title="!-n:gs/str1/str2/ - 将倒数第N条命令的str1替换为str2，并执行（若不加g,则仅替换第一个）"></a>!-n:gs/str1/str2/ - 将倒数第N条命令的str1替换为str2，并执行（若不加g,则仅替换第一个）</h1></li><li><h1 id="Ctrl-l-清屏"><a href="#Ctrl-l-清屏" class="headerlink" title="Ctrl + l - 清屏"></a>Ctrl + l - 清屏</h1></li><li><h1 id="Ctrl-A-光标移到行首"><a href="#Ctrl-A-光标移到行首" class="headerlink" title="Ctrl + A - 光标移到行首"></a>Ctrl + A - 光标移到行首</h1></li><li><h1 id="Ctrl-E-光标移到行尾"><a href="#Ctrl-E-光标移到行尾" class="headerlink" title="Ctrl + E - 光标移到行尾"></a>Ctrl + E - 光标移到行尾</h1></li><li><h1 id="Ctrl-W-清除光标之前一个单词"><a href="#Ctrl-W-清除光标之前一个单词" class="headerlink" title="Ctrl + W - 清除光标之前一个单词"></a>Ctrl + W - 清除光标之前一个单词</h1></li><li><h1 id="Ctrl-K-清除光标到行尾的字符"><a href="#Ctrl-K-清除光标到行尾的字符" class="headerlink" title="Ctrl + K - 清除光标到行尾的字符"></a>Ctrl + K - 清除光标到行尾的字符</h1></li><li><h1 id="Ctrl-T-交换光标前两个字符"><a href="#Ctrl-T-交换光标前两个字符" class="headerlink" title="Ctrl + T - 交换光标前两个字符"></a>Ctrl + T - 交换光标前两个字符</h1></li><li><h1 id="Ctrl-V-输入控制字符-如Ctrl-v-会输入-M"><a href="#Ctrl-V-输入控制字符-如Ctrl-v-会输入-M" class="headerlink" title="Ctrl + V - 输入控制字符 如Ctrl+v ,会输入^M"></a>Ctrl + V - 输入控制字符 如Ctrl+v ,会输入^M</h1></li><li><h1 id="Ctrl-F-光标后移一个字符"><a href="#Ctrl-F-光标后移一个字符" class="headerlink" title="Ctrl + F - 光标后移一个字符"></a>Ctrl + F - 光标后移一个字符</h1></li><li><h1 id="Ctrl-B-光标前移一个字符"><a href="#Ctrl-B-光标前移一个字符" class="headerlink" title="Ctrl + B - 光标前移一个字符"></a>Ctrl + B - 光标前移一个字符</h1></li><li><h1 id="Ctrl-H-删除光标前一个字符"><a href="#Ctrl-H-删除光标前一个字符" class="headerlink" title="Ctrl + H - 删除光标前一个字符"></a>Ctrl + H - 删除光标前一个字符</h1></li><li><h1 id="N-F-光标后移N个单词，N为1时可省略"><a href="#N-F-光标后移N个单词，N为1时可省略" class="headerlink" title="N++F - 光标后移N个单词，N为1时可省略"></a>N++F - 光标后移N个单词，N为1时可省略</h1></li><li><h1 id="N-B-光标前移N个单词，N为1时可省略"><a href="#N-B-光标前移N个单词，N为1时可省略" class="headerlink" title="N++B - 光标前移N个单词，N为1时可省略"></a>N++B - 光标前移N个单词，N为1时可省略</h1></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;common-cmd&quot;&gt;&lt;a href=&quot;#common-cmd&quot; class=&quot;headerlink&quot; title=&quot;common cmd&quot;&gt;&lt;/a&gt;common cmd&lt;/h1&gt;&lt;h2 id=&quot;delete-all-files-in-the-current-p
      
    
    </summary>
    
      <category term="shell" scheme="https://moonclearner.cn/categories/shell/"/>
    
    
      <category term="linux" scheme="https://moonclearner.cn/tags/linux/"/>
    
      <category term="shell" scheme="https://moonclearner.cn/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>build php extension fail phpizse</title>
    <link href="https://moonclearner.cn/php/configure/php_extension_compile_fail.html"/>
    <id>https://moonclearner.cn/php/configure/php_extension_compile_fail.html</id>
    <published>2020-04-30T07:29:54.868Z</published>
    <updated>2020-04-30T07:29:54.868Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CDPATH-command-not-found"><a href="#CDPATH-command-not-found" class="headerlink" title="CDPATH command not found"></a>CDPATH command not found</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">$</span> make </span><br><span class="line">/home/user/libtool: line 482: CDPATH: command not found</span><br><span class="line">libtool: Version mismatch error.  This is libtool 2.4.2, but the</span><br><span class="line">libtool: definition of this LT_INIT comes from an older release.</span><br><span class="line">libtool: You should recreate aclocal.m4 with macros from libtool 2.4.2</span><br><span class="line">libtool: and run autoconf again.</span><br><span class="line">make: *** [xdebug.lo] Error 63</span><br></pre></td></tr></table></figure><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><ul><li>aclocal</li><li>libtoolize –force</li><li>autoheader</li><li>autoconf</li></ul><h2 id="solution2"><a href="#solution2" class="headerlink" title="solution2"></a>solution2</h2><ul><li>rm –rf aclocal.m4</li><li>autoreconf</li></ul><h2 id="solution3"><a href="#solution3" class="headerlink" title="solution3"></a>solution3</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">If you have error with libtool version after make - way to install:</span><br><span class="line">phpize --clean &amp;&amp; phpize</span><br><span class="line">rm aclocal.m4</span><br><span class="line">aclocal</span><br><span class="line">autoconf</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h1 id="undefined-reference-to-symbol-‘ber-strdup’"><a href="#undefined-reference-to-symbol-‘ber-strdup’" class="headerlink" title="undefined reference to symbol ‘ber_strdup’"></a>undefined reference to symbol ‘ber_strdup’</h1><p>./configure 」沒抓好一些环境变数值</p><h2 id="solution-1"><a href="#solution-1" class="headerlink" title="solution"></a>solution</h2><p>在PHP源码目录下 vi Makefile 找到 EXTRA_LIBS 行，在行末添加 ‘ -llber ‘ 保存退出再次make即可。</p>]]></content>
    
    <summary type="html">
    
      CDPATH command not found
    
    </summary>
    
      <category term="php" scheme="https://moonclearner.cn/categories/php/"/>
    
    
      <category term="php" scheme="https://moonclearner.cn/tags/php/"/>
    
      <category term="configure" scheme="https://moonclearner.cn/tags/configure/"/>
    
  </entry>
  
  <entry>
    <title>Package **** was not found in the pkg-config search path.</title>
    <link href="https://moonclearner.cn/ubuntu/pkg-config.html"/>
    <id>https://moonclearner.cn/ubuntu/pkg-config.html</id>
    <published>2020-04-13T09:19:50.357Z</published>
    <updated>2020-04-13T09:19:50.357Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Package-was-not-found-in-the-pkg-config-search-path"><a href="#Package-was-not-found-in-the-pkg-config-search-path" class="headerlink" title="Package ** was not found in the pkg-config search path."></a>Package <em>**</em> was not found in the pkg-config search path.</h1><p>configure: error: Unable to find libzmq installation</p><p><code>#pkg-config libzmq --libs</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Package libzmq was not found in the pkg-config search path.</span><br><span class="line">Perhaps you should add the directory containing `libzmq.pc&apos;</span><br><span class="line">to the PKG_CONFIG_PATH environment variable</span><br><span class="line">No package &apos;libzmq&apos; found</span><br></pre></td></tr></table></figure></p><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><ul><li><code>locate libzmq.pc</code> or <code>find / -name &quot;libzmq.pc&quot;</code><ul><li>找.pc文件路径</li></ul></li><li><code>find / -name pkgconfig</code><ul><li>找到pkgconfig的路径</li></ul></li><li><p>将libzmq.pc复制到没有这个文件的pkgconfig路径下</p></li><li><p>sudo ldconfig</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Package-was-not-found-in-the-pkg-config-search-path&quot;&gt;&lt;a href=&quot;#Package-was-not-found-in-the-pkg-config-search-path&quot; class=&quot;headerlin
      
    
    </summary>
    
      <category term="compile" scheme="https://moonclearner.cn/categories/compile/"/>
    
    
      <category term="ubuntu" scheme="https://moonclearner.cn/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>cmd return var</title>
    <link href="https://moonclearner.cn/shell/cmd_return.html"/>
    <id>https://moonclearner.cn/shell/cmd_return.html</id>
    <published>2020-03-11T06:28:03.803Z</published>
    <updated>2020-03-11T06:28:03.775Z</updated>
    
    <content type="html"><![CDATA[<h1 id="cmd-retutn-var"><a href="#cmd-retutn-var" class="headerlink" title="cmd retutn var"></a>cmd retutn var</h1><p> 如果为 0，则表示命令执行成功，其它值则表示错误，具体的错误码含义如下：<br> “OS error code   1:  Operation not permitted”<br> “OS error code   2:  No such file or directory”<br> “OS error code   3:  No such process”<br> “OS error code   4:  Interrupted system call”<br> “OS error code   5:  Input/output error”<br> “OS error code   6:  No such device or address”<br> “OS error code   7:  Argument list too long”<br> “OS error code   8:  Exec format error”<br> “OS error code   9:  Bad file descriptor”<br> “OS error code  10:  No child processes”<br> “OS error code  11:  Resource temporarily unavailable”<br> “OS error code  12:  Cannot allocate memory”<br> “OS error code  13:  Permission denied”<br> “OS error code  14:  Bad address”<br> “OS error code  15:  Block device required”<br> “OS error code  16:  Device or resource busy”<br> “OS error code  17:  File exists”<br> “OS error code  18:  Invalid cross-device link”<br> “OS error code  19:  No such device”<br> “OS error code  20:  Not a directory”<br> “OS error code  21:  Is a directory”<br> “OS error code  22:  Invalid argument”<br> “OS error code  23:  Too many open files in system”<br> “OS error code  24:  Too many open files”<br> “OS error code  25:  Inappropriate ioctl for device”<br> “OS error code  26:  Text file busy”<br> “OS error code  27:  File too large”<br> “OS error code  28:  No space left on device”<br> “OS error code  29:  Illegal seek”<br> “OS error code  30:  Read-only file system”<br> “OS error code  31:  Too many links”<br> “OS error code  32:  Broken pipe”<br> “OS error code  33:  Numerical argument out of domain”<br> “OS error code  34:  Numerical result out of range”<br> “OS error code  35:  Resource deadlock avoided”<br> “OS error code  36:  File name too long”<br> “OS error code  37:  No locks available”<br> “OS error code  38:  Function not implemented”<br> “OS error code  39:  Directory not empty”<br> “OS error code  40:  Too many levels of symbolic links”<br> “OS error code  42:  No message of desired type”<br> “OS error code  43:  Identifier removed”<br> “OS error code  44:  Channel number out of range”<br> “OS error code  45:  Level 2 not synchronized”<br> “OS error code  46:  Level 3 halted”<br> “OS error code  47:  Level 3 reset”<br> “OS error code  48:  Link number out of range”<br> “OS error code  49:  Protocol driver not attached”<br> “OS error code  50:  No CSI structure available”<br> “OS error code  51:  Level 2 halted”<br> “OS error code  52:  Invalid exchange”<br> “OS error code  53:  Invalid request descriptor”<br> “OS error code  54:  Exchange full”<br> “OS error code  55:  No anode”<br> “OS error code  56:  Invalid request code”<br> “OS error code  57:  Invalid slot”<br> “OS error code  59:  Bad font file format”<br> “OS error code  60:  Device not a stream”<br> “OS error code  61:  No data available”<br> “OS error code  62:  Timer expired”<br> “OS error code  63:  Out of streams resources”<br> “OS error code  64:  Machine is not on the network”<br> “OS error code  65:  Package not installed”<br> “OS error code  66:  Object is remote”<br> “OS error code  67:  Link has been severed”<br> “OS error code  68:  Advertise error”<br> “OS error code  69:  Srmount error”<br> “OS error code  70:  Communication error on send”<br> “OS error code  71:  Protocol error”<br> “OS error code  72:  Multihop attempted”<br> “OS error code  73:  RFS specific error”<br> “OS error code  74:  Bad message”<br> “OS error code  75:  Value too large for defined data type”<br> “OS error code  76:  Name not unique on network”<br> “OS error code  77:  File descriptor in bad state”<br> “OS error code  78:  Remote address changed”<br> “OS error code  79:  Can not access a needed shared library”<br> “OS error code  80:  Accessing a corrupted shared library”<br> “OS error code  81:  .lib section in a.out corrupted”<br> “OS error code  82:  Attempting to link in too many shared libraries”<br> “OS error code  83:  Cannot exec a shared library directly”<br> “OS error code  84:  Invalid or incomplete multibyte or wide character”<br> “OS error code  85:  Interrupted system call should be restarted”<br> “OS error code  86:  Streams pipe error”<br> “OS error code  87:  Too many users”<br> “OS error code  88:  Socket operation on non-socket”<br> “OS error code  89:  Destination address required”<br> “OS error code  90:  Message too long”<br> “OS error code  91:  Protocol wrong type for socket”<br> “OS error code  92:  Protocol not available”<br> “OS error code  93:  Protocol not supported”<br> “OS error code  94:  Socket type not supported”<br> “OS error code  95:  Operation not supported”<br> “OS error code  96:  Protocol family not supported”<br> “OS error code  97:  Address family not supported by protocol”<br> “OS error code  98:  Address already in use”<br> “OS error code  99:  Cannot assign requested address”<br> “OS error code 100:  Network is down”<br> “OS error code 101:  Network is unreachable”<br> “OS error code 102:  Network dropped connection on reset”<br> “OS error code 103:  Software caused connection abort”<br> “OS error code 104:  Connection reset by peer”<br> “OS error code 105:  No buffer space available”<br> “OS error code 106:  Transport endpoint is already connected”<br> “OS error code 107:  Transport endpoint is not connected”<br> “OS error code 108:  Cannot send after transport endpoint shutdown”<br> “OS error code 109:  Too many references: cannot splice”<br> “OS error code 110:  Connection timed out”<br> “OS error code 111:  Connection refused”<br> “OS error code 112:  Host is down”<br> “OS error code 113:  No route to host”<br> “OS error code 114:  Operation already in progress”<br> “OS error code 115:  Operation now in progress”<br> “OS error code 116:  Stale NFS file handle”<br> “OS error code 117:  Structure needs cleaning”<br> “OS error code 118:  Not a XENIX named type file”<br> “OS error code 119:  No XENIX semaphores available”<br> “OS error code 120:  Is a named type file”<br> “OS error code 121:  Remote I/O error”<br> “OS error code 122:  Disk quota exceeded”<br> “OS error code 123:  No medium found”<br> “OS error code 124:  Wrong medium type”<br> “OS error code 125:  Operation canceled”<br> “OS error code 126:  Required key not available”<br> “OS error code 127:  Key has expired”<br> “OS error code 128:  Key has been revoked”<br> “OS error code 129:  Key was rejected by service”<br> “OS error code 130:  Owner died”<br> “OS error code 131:  State not recoverable” </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;cmd-retutn-var&quot;&gt;&lt;a href=&quot;#cmd-retutn-var&quot; class=&quot;headerlink&quot; title=&quot;cmd retutn var&quot;&gt;&lt;/a&gt;cmd retutn var&lt;/h1&gt;&lt;p&gt; 如果为 0，则表示命令执行成功，其它值则表
      
    
    </summary>
    
      <category term="shell" scheme="https://moonclearner.cn/categories/shell/"/>
    
    
      <category term="linux" scheme="https://moonclearner.cn/tags/linux/"/>
    
      <category term="shell" scheme="https://moonclearner.cn/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Jq ajax</title>
    <link href="https://moonclearner.cn/js/jquery/jq_ajax.html"/>
    <id>https://moonclearner.cn/js/jquery/jq_ajax.html</id>
    <published>2020-02-14T01:29:17.803Z</published>
    <updated>2020-02-14T01:29:17.771Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jquery-Ajax"><a href="#jquery-Ajax" class="headerlink" title="jquery Ajax"></a>jquery Ajax</h1><h2 id="ajax-请求"><a href="#ajax-请求" class="headerlink" title="ajax 请求"></a>ajax 请求</h2><h3 id="question-1"><a href="#question-1" class="headerlink" title="question 1"></a>question 1</h3><p>ajax请求成功后，success返回看不到data</p><p>A：可能是因为服务器返回的数据不是json格式数据</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;jquery-Ajax&quot;&gt;&lt;a href=&quot;#jquery-Ajax&quot; class=&quot;headerlink&quot; title=&quot;jquery Ajax&quot;&gt;&lt;/a&gt;jquery Ajax&lt;/h1&gt;&lt;h2 id=&quot;ajax-请求&quot;&gt;&lt;a href=&quot;#ajax-请求&quot; c
      
    
    </summary>
    
      <category term="js" scheme="https://moonclearner.cn/categories/js/"/>
    
    
      <category term="js" scheme="https://moonclearner.cn/tags/js/"/>
    
      <category term="jquery" scheme="https://moonclearner.cn/tags/jquery/"/>
    
  </entry>
  
  <entry>
    <title>The notes of Reading Modern PHP book</title>
    <link href="https://moonclearner.cn/php/modernPHPNote.html"/>
    <id>https://moonclearner.cn/php/modernPHPNote.html</id>
    <published>2020-02-03T03:45:22.377Z</published>
    <updated>2020-02-03T03:45:22.377Z</updated>
    
    <content type="html"><![CDATA[<h1 id="The-notes-of-Reading-Modern-PHP-book"><a href="#The-notes-of-Reading-Modern-PHP-book" class="headerlink" title="The notes of Reading Modern PHP book"></a>The notes of Reading Modern PHP book</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>author’s project: <code>http://www.phptherightway.com</code>, 目的是为了让php程序员轻易找到php社区中权威成员最新编写的高质量文档</p><h3 id="目前开发流程"><a href="#目前开发流程" class="headerlink" title="目前开发流程"></a>目前开发流程</h3><ul><li>使用git来维护一个可以审查的代码历史</li><li>使用虚拟化工具varangt以及配置工具例如ansible、chef、puppet来搭建与生产服务器一样的开发环境</li><li>使用composer来管理php组件</li><li>php代码遵循PSR代码标准</li><li>phpUnit进行单元测试</li><li>php 引擎 Zend Engine (php4)</li><li>PHP引擎是解析、解释和执行php代码的程序</li><li>Hack是建立在PHP之上的变成语言，引入了静态类型、新的数据结构、额外的接口，同时向后兼容所有的动态类型php代码</li><li>hiphop virtual machine(facebook)， HHVM，是php和hack的解释器，使用即时(just in time, JIT)编译器提高应用的性能，减少内存用量</li></ul><h3 id="新的特性"><a href="#新的特性" class="headerlink" title="新的特性"></a>新的特性</h3><h4 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h4><ul><li>引入5.3</li><li>其作用是按照一种虚拟的层次结构组织php代码，避免类名以及变量冲突</li></ul><h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Documentable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getId</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StreamDocument</span> <span class="keyword">implements</span> <span class="title">Documentable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;id = $id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getId</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DocumentStore</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $data = [];</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">addDocument</span><span class="params">(Documentable $document)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $id = $document-&gt;getId();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;data[] = $id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$documentObject = <span class="keyword">new</span> DocumentStore();</span><br><span class="line">$stream = <span class="keyword">new</span> StreamDocument();</span><br><span class="line">$documentObject-&gt;addDocument($stream);</span><br></pre></td></tr></table></figure><h4 id="性状-trait"><a href="#性状-trait" class="headerlink" title="性状-trait"></a>性状-trait</h4><p>php5.4引入</p><ul><li>性状是类的部分实现（即常量、属性和方法）, 可以混入一个或者多个现有的PHP类中</li><li>作用： 表明类可以做什么（像接口）；提供模板化实现（像类）</li><li>将两个没有共同父类的类具有类似行为，比如商店和猫，在地图上应该都有地标，如果将其都继承父类地理，这样就没有继承层次结构。使用接口的话，虽然可以保留自然的继承层次结构，但是我们需要实现相同的地理代码，不符合DRY原则，即Dont Repeat yourself</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">trait</span> MyGeo&#123;</span><br><span class="line">    <span class="comment">//性状实现</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getGeo</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">MyGeo</span>;</span><br><span class="line">    <span class="comment">//类的实现</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$xiaobai = <span class="keyword">new</span> Cat();</span><br><span class="line">$xiaobai-&gt;getGeo();</span><br></pre></td></tr></table></figure><p>php解释器在编译的时候，会把性状复制粘贴到类的定义体里面，但是不会处理引入的不兼容问题，所以要确保类里面有性状使用的特定属性或者方法。</p><h4 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h4><p>php5.5</p><p>省内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function getRow($file)&#123;</span><br><span class="line">    $handle = fopen($file, &quot;rb&quot;);</span><br><span class="line">    if($handle === false)&#123;</span><br><span class="line">        throw new Exception();</span><br><span class="line">    &#125;</span><br><span class="line">    while(feof($handle) === false)&#123;</span><br><span class="line">        yield fgetcsv($handle);</span><br><span class="line">    &#125;</span><br><span class="line">    fclose($handle);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foreach(getRow(&quot;test.csv&quot;) as $row)&#123;</span><br><span class="line">    print_r($row);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="匿名函数-和-闭包"><a href="#匿名函数-和-闭包" class="headerlink" title="匿名函数 和 闭包"></a>匿名函数 和 闭包</h4><p>php5.3</p><p>php将匿名函数和闭包作为相同的概念，其实是伪装成函数的对象，都是Closure类的实例</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$closure = <span class="function"><span class="keyword">function</span><span class="params">($name)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sprintf(<span class="string">'Hello %s'</span>, $name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> $closure(<span class="string">"josh"</span>);</span><br></pre></td></tr></table></figure><p>闭包是指创建时封装周围状态的函数，即便闭包所在的环境不存在了，闭包中封装的状态依旧存在</p><p>我们之所以可以调用$closure变量，因为这个变量的值是一个闭包，而且闭包对象实现了一个<code>_invoke()</code>魔术方法，只要变量后面有()，php就会调用<code>_invoke()</code>方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array_map(function($number)&#123;return $number + 1;&#125;, [1,2,3]);</span><br></pre></td></tr></table></figure><h5 id="附加状态"><a href="#附加状态" class="headerlink" title="附加状态"></a>附加状态</h5><p>在php中需要手动调用bindTo()方法或者使用use将状态附加到php闭包中<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">enclosePerson</span><span class="params">($name)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">($doCommand)</span> <span class="title">use</span> <span class="params">($name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sprintf(<span class="string">'$s, $s'</span>, $name, $doCommand);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$clay = enclosePerson(<span class="string">'Clay'</span>);</span><br><span class="line"><span class="keyword">echo</span> $clay(<span class="string">"hello"</span>); <span class="comment">// Clay, hello</span></span><br></pre></td></tr></table></figure></p><p>enclosePerson()有个name参数，函数返回一个闭包对象，这个闭包封装了name参数，即便返回的对象跳出了enclosePerson()函数的作用域，它仍然会记住name的值，因为name仍在闭包里面。</p><p>可以用use将做个参数传入闭包里面</p><p>php闭包是对象，因此闭包实例都可以使用$this关键字来获取闭包内部的状态<br>bindTo()方法，第二个参数为绑定闭包的那个对象所属的php类，因此绑定this，可以访问绑定闭包的对象中受保护和私有成员变量</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $routes = <span class="keyword">array</span>();</span><br><span class="line">    <span class="keyword">protected</span> $responseStatus = <span class="string">'200 ok'</span>;</span><br><span class="line">    <span class="keyword">protected</span> $responseContentType = <span class="string">'text/html'</span>;</span><br><span class="line">    <span class="keyword">protected</span> $responseBody = <span class="string">'Hello word'</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">addRoute</span><span class="params">($routePath, $routeCallback)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;routes[$routePath] = $routeCallback-&gt;bindTo(<span class="keyword">$this</span>, <span class="keyword">__CLASS__</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span><span class="params">($currentPath)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;routes <span class="keyword">as</span> $routePath =&gt; $callback) &#123;</span><br><span class="line">            <span class="keyword">if</span>($routePath === $currentPath)</span><br><span class="line">            &#123;</span><br><span class="line">                $callback();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        header(<span class="string">'HTTP/1.1 '</span>.<span class="keyword">$this</span>-&gt;responseStatus);</span><br><span class="line">        header(<span class="string">'Content-type '</span>.<span class="keyword">$this</span>-&gt;responseContentType);</span><br><span class="line">        header(<span class="string">'Content-length '</span>.mb_strlen(<span class="keyword">$this</span>-&gt;responseBody));</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;responseBody;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$app = <span class="keyword">new</span> App();</span><br><span class="line">$app-&gt;addRoute(<span class="string">'/users/josh'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;responseContentType = <span class="string">'application/json;charset=utf-8'</span>;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;responseBody = <span class="string">'&#123;"name":"josh"&#125;'</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$app-&gt;dispatch(<span class="string">'/users/josh'</span>);</span><br></pre></td></tr></table></figure><h4 id="Zend-Opcache"><a href="#Zend-Opcache" class="headerlink" title="Zend Opcache"></a>Zend Opcache</h4><p>字节码缓存，php5.5</p><p>php是解释性语言，php解释器执行php脚本时，会解析php代码，将php代码编译成一系列Zend操作码，然后执行操作码。缓存预先编译好的字节码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">opcache.validate_timestamps = 1 //在生产环境中设为“0”</span><br></pre></td></tr></table></figure><h4 id="内置web服务器"><a href="#内置web服务器" class="headerlink" title="内置web服务器"></a>内置web服务器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -S 0.0.0.0:4000 -c php.ini</span><br></pre></td></tr></table></figure><h3 id="良好实践"><a href="#良好实践" class="headerlink" title="良好实践"></a>良好实践</h3><p>PHP-FIG 实现框架的互操作性，通过接口，自动加载机制和标准的风格，让框架互相合作。</p><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><p>查找组件网站<code>https://packagist.org</code></p><p>最好的组件 awesome php <code>https://github.com/ziadoz/awesome-php</code></p><h4 id="使用组件"><a href="#使用组件" class="headerlink" title="使用组件"></a>使用组件</h4><p>使用composer来管理php组件</p><p>安装：curl -sS <a href="https://getcomposer.org/installer" target="_blank" rel="noopener">https://getcomposer.org/installer</a> | php</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;The-notes-of-Reading-Modern-PHP-book&quot;&gt;&lt;a href=&quot;#The-notes-of-Reading-Modern-PHP-book&quot; class=&quot;headerlink&quot; title=&quot;The notes of Reading
      
    
    </summary>
    
      <category term="php" scheme="https://moonclearner.cn/categories/php/"/>
    
    
      <category term="php" scheme="https://moonclearner.cn/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>PHP XML</title>
    <link href="https://moonclearner.cn/php/php_xml.html"/>
    <id>https://moonclearner.cn/php/php_xml.html</id>
    <published>2020-01-10T02:33:29.131Z</published>
    <updated>2020-01-10T02:33:29.131Z</updated>
    
    <content type="html"><![CDATA[<h1 id="php-XML"><a href="#php-XML" class="headerlink" title="php XML"></a>php XML</h1><h2 id="DOMDocument"><a href="#DOMDocument" class="headerlink" title="DOMDocument"></a>DOMDocument</h2><h3 id="遍历删除节点"><a href="#遍历删除节点" class="headerlink" title="遍历删除节点"></a>遍历删除节点</h3><p>遍历删除节点的时候，会出现删除节点删除不干净，<br>当你使用foreach来遍历的时候<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">foreach($nodes as $node)&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>是因为即当删除了第2个节点之后第3个节点会变成第2个节点，遍历的下个节点变成了第4个节点，跳过了对第3个节点的检查</p><p>当你使用foreach来遍历的时候<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for($i=0; $i &lt; $nodes-&gt;length; $i++)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>是因为即当删除了第2个节点之后第3个节点会变成第2个节点，遍历的下个节点变成了第4个节点，跳过了对第3个节点的检查并且节点的nodes-&gt;length会实时变化，导致最后的几个节点检查不到</p><h4 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h4><p>方法1 额外使用一个指示器，来记录指向节点的位置，当删除节点的是指示器值不加1，这样就指向了下个节点<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$dom = <span class="keyword">new</span> DOMDocument();</span><br><span class="line">$dom-&gt;load(<span class="keyword">$this</span>-&gt;xmlfile);</span><br><span class="line">$nodes = $dom-&gt;getElementsByTagName(<span class="string">'nodes'</span>);</span><br><span class="line">$index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>($index &lt; $nodes-&gt;length) &#123;</span><br><span class="line">    <span class="keyword">if</span> (in_array($nodes-&gt;item($index)-&gt;getAttribute(<span class="string">"id"</span>), $ids)) &#123;</span><br><span class="line">        $objectNode = $nodes-&gt;item($index);</span><br><span class="line">        $objectNode-&gt;parentNode-&gt;removeChild($objectNode);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $index ++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>方法2<br>先将所有节点遍历一遍，将要删除的节点存在一个数组里面，然后统一删除<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span>($nodes <span class="keyword">as</span> $node)&#123;</span><br><span class="line">  <span class="keyword">if</span> (in_array($node-&gt;getAttribute(<span class="string">"id"</span>), $ids)) &#123;</span><br><span class="line">    $delete[] = $node;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span>($delete <span class="keyword">as</span> $val)&#123;</span><br><span class="line">  $val-&gt;parentNode-&gt;removeChild($val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="simplexml-load-file"><a href="#simplexml-load-file" class="headerlink" title="simplexml_load_file"></a>simplexml_load_file</h2><h3 id="保存"><a href="#保存" class="headerlink" title="保存"></a>保存</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">save</span><span class="params">($dom)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>($dom-&gt;asXML(<span class="string">"/test.xml"</span>))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"fail"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改标签的值"><a href="#修改标签的值" class="headerlink" title="修改标签的值"></a>修改标签的值</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$xml = @simplexml_load_file(<span class="string">"/test.xml"</span>);</span><br><span class="line"><span class="comment">//用xpath快速查找值</span></span><br><span class="line">$node = $xml-&gt;xpath(<span class="string">"/node/config[@name='enable_tmp_files']"</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&lt;node&gt;&lt;config name="test"&gt;&lt;/config&gt;&lt;/node&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//读取标签间的值</span></span><br><span class="line">(string)$node-&gt;config;</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取标签的属性</span></span><br><span class="line">(string)$node-&gt;config[<span class="string">"name"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改标签间的值</span></span><br><span class="line">dom_import_simplexml($node)-&gt;nodeValue = <span class="string">"true"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&lt;node&gt;</span></span><br><span class="line"><span class="comment">   &lt;config enable="true"/&gt;</span></span><br><span class="line"><span class="comment">   &lt;config enable="true"/&gt;</span></span><br><span class="line"><span class="comment">   &lt;config enable="true"/&gt;</span></span><br><span class="line"><span class="comment">&lt;/node&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">foreach</span>($node-&gt;config <span class="keyword">as</span> $config)&#123;</span><br><span class="line">    <span class="comment">//修改标签的属性</span></span><br><span class="line">    $config[<span class="string">"enable"</span>] = <span class="string">"true"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除某个节点内所有节点内容"><a href="#删除某个节点内所有节点内容" class="headerlink" title="删除某个节点内所有节点内容"></a>删除某个节点内所有节点内容</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dom_import_simplexml($node)-&gt;nodeValue = &quot;&quot;;</span><br></pre></td></tr></table></figure><h3 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h3><p>solution 1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$newnode = $node-&gt;addChild(&quot;newnode&quot;);</span><br><span class="line">$newnode = $node-&gt;addChild(&quot;newnode2&quot;, &quot;nodeValue&quot;);</span><br><span class="line">$newnode-&gt;addAttribute(&quot;newAttr&quot;, &quot;attrValue&quot;);</span><br></pre></td></tr></table></figure></p><p>solution 2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$newnode = simplexml_load_string(&quot;&lt;newnode newAttr=&quot;attrValue&quot;&gt;nodeValue&lt;/newnode&gt;&quot;);</span><br><span class="line">dom_import_simplexml($node)-&gt;nodeValue = $newAttr;</span><br></pre></td></tr></table></figure></p><h2 id="XMLReader"><a href="#XMLReader" class="headerlink" title="XMLReader"></a>XMLReader</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>此扩展需要 libxml PHP 扩展。这表示需要使用 –enable-libxml ，尽管这将隐式完成因为 libxml 是缺省开启的。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>XMLReader是以Stream的形式读取数据，即纵然面对超大的xml文件用于读取大型xml，可以逐个节点进行读取操作，节约内存</p><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//读取bignode节点下的node节点,bignode后面的是smallnode节点不读取</span><br><span class="line">$z = new XMLReader();</span><br><span class="line">$z-&gt;open(&quot;/big.xml&quot;);</span><br><span class="line">$doc = new DOMDocument;</span><br><span class="line">// move to the first &lt;product /&gt; node</span><br><span class="line">while ($z-&gt;read() &amp;&amp; $z-&gt;name !== &apos;product&apos;);</span><br><span class="line"></span><br><span class="line">// now that we&apos;re at the right depth, hop to the next &lt;product/&gt; until the end of the tree</span><br><span class="line">while ($z-&gt;nodeType == XMLReader::ELEMENT &amp;&amp; $z-&gt;name === &apos;product&apos;)</span><br><span class="line">&#123;</span><br><span class="line">    // either one should work</span><br><span class="line">    //$node = new SimpleXMLElement($z-&gt;readOuterXML());</span><br><span class="line">    $node = simplexml_import_dom($doc-&gt;importNode($z-&gt;expand(), true));</span><br><span class="line"></span><br><span class="line">    // now you can use $node without going insane about parsing</span><br><span class="line">    var_dump($node-&gt;element_1);</span><br><span class="line"></span><br><span class="line">    // go to next &lt;product /&gt;</span><br><span class="line">    $z-&gt;next(&apos;product&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="读取单节点的方法使用simplexml的方法"><a href="#读取单节点的方法使用simplexml的方法" class="headerlink" title="读取单节点的方法使用simplexml的方法"></a>读取单节点的方法使用simplexml的方法</h4><p>solution 1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$xml = $z-&gt;readOuterXML();</span><br><span class="line">$xml = simplexml_load_string($xml);</span><br></pre></td></tr></table></figure></p><p>solution 2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$node = new SimpleXMLElement($z-&gt;readOuterXML());</span><br></pre></td></tr></table></figure></p><p>solution 3<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$doc = new DOMDocument;</span><br><span class="line">$node = simplexml_import_dom($doc-&gt;importNode($z-&gt;expand(), true));</span><br></pre></td></tr></table></figure></p><h3 id="读取节点间的内容"><a href="#读取节点间的内容" class="headerlink" title="读取节点间的内容"></a>读取节点间的内容</h3><p>xml文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;rss xmlns:dc=&quot;http://purl.org/dc/elements/1.1/&quot; version=&quot;2.0&quot;&gt;</span><br><span class="line">    &lt;channel&gt;</span><br><span class="line">        &lt;title&gt;拍拍看科技&lt;/title&gt;</span><br><span class="line">        &lt;link&gt;http://blog.limiwu.com/&lt;/link&gt;</span><br><span class="line">        &lt;description&gt;关注科技产品和个人博客发展,注重用户体验和界面优化&lt;/description&gt;</span><br><span class="line">        &lt;item&gt;</span><br><span class="line">            &lt;title&gt;新购买了一个域名：losehub.com&lt;/title&gt;</span><br><span class="line">            &lt;link&gt;http://blog.limiwu.com/537.html&lt;/link&gt;</span><br><span class="line">            &lt;description&gt;最近新购买了一个域名losehub.com。准备来做一个PHP项目，</span><br><span class="line">            具体的还在谋划中。不知道什么时候能开始制作呢。&lt;/description&gt;</span><br><span class="line">            &lt;pubDate&gt;Tue, 27 Dec 2016 14:47:25 +0800&lt;/pubDate&gt;</span><br><span class="line">        &lt;/item&gt;</span><br><span class="line">        ...</span><br><span class="line">    &lt;/channel&gt;</span><br><span class="line">&lt;/rss&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">while ($reader-&gt;read())&#123;  </span><br><span class="line">        if($reader-&gt;nodeType == XMLReader::ELEMENT)&#123;  </span><br><span class="line">            $nodeName = $reader-&gt;name;  </span><br><span class="line">        &#125;  </span><br><span class="line">        //注意XMLReader::TEXT 是识别不了CDATA，如果需要读取CDATA 可以改成$reader-&gt;nodeType == XMLReader::CDATA</span><br><span class="line">        if($reader-&gt;nodeType == XMLReader::TEXT &amp;&amp; !empty($nodeName))&#123;  </span><br><span class="line">            switch($nodeName)&#123;  </span><br><span class="line">                case &apos;title&apos;:</span><br><span class="line">                if ($reader -&gt; depth == &apos;4&apos;)&#123;</span><br><span class="line">                    $title = $reader-&gt;value;</span><br><span class="line">                    &#125;</span><br><span class="line">                    break;   </span><br><span class="line">                case &apos;link&apos;:</span><br><span class="line">                if ($reader -&gt; depth == &apos;4&apos;)&#123;</span><br><span class="line">                    $link = $reader-&gt;value;</span><br><span class="line">                    &#125;</span><br><span class="line">                    break;  </span><br><span class="line">                case &apos;description&apos;:  </span><br><span class="line">                    $description = $reader-&gt;value;  </span><br><span class="line">                    break;  </span><br><span class="line">                case &apos;pubDate&apos;:  </span><br><span class="line">                    $pubDate = $reader-&gt;value;  </span><br><span class="line">                    break;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line"> &#125;  </span><br><span class="line">$reader-&gt;close();</span><br></pre></td></tr></table></figure><h3 id="XMLReader-常量"><a href="#XMLReader-常量" class="headerlink" title="XMLReader 常量"></a>XMLReader 常量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">XMLReader::NONE = 0 ;</span><br><span class="line">XMLReader::ELEMENT = 1 ;</span><br><span class="line">XMLReader::ATTRIBUTE = 2 ;</span><br><span class="line">XMLReader::TEXT = 3 ;</span><br><span class="line">XMLReader::CDATA = 4 ;</span><br><span class="line">XMLReader::ENTITY_REF = 5 ;</span><br><span class="line">XMLReader::ENTITY = 6 ;</span><br><span class="line">XMLReader::PI = 7 ;</span><br><span class="line">XMLReader::COMMENT = 8 ;</span><br><span class="line">XMLReader::DOC = 9 ;</span><br><span class="line">XMLReader::DOC_TYPE = 10 ;</span><br><span class="line">XMLReader::DOC_FRAGMENT = 11 ;</span><br><span class="line">XMLReader::NOTATION = 12 ;</span><br><span class="line">XMLReader::WHITESPACE = 13 ;</span><br><span class="line">XMLReader::SIGNIFICANT_WHITESPACE = 14 ;</span><br><span class="line">XMLReader::END_ELEMENT = 15 ;</span><br><span class="line">XMLReader::END_ENTITY = 16 ;</span><br><span class="line">XMLReader::XML_DECLARATION = 17 ;</span><br><span class="line">XMLReader::LOADDTD = 1 ;</span><br><span class="line">XMLReader::DEFAULTATTRS = 2 ;</span><br><span class="line">XMLReader::VALIDATE = 3 ;</span><br><span class="line">XMLReader::SUBST_ENTITIES = 4 ;</span><br></pre></td></tr></table></figure><h3 id="XMLReader-方法"><a href="#XMLReader-方法" class="headerlink" title="XMLReader 方法"></a>XMLReader 方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">a、XMLReader::XML</span><br><span class="line">作用：载入 xml 字符串</span><br><span class="line">用法：XMLReader::xml(string source [, string encoding [, int options]] )</span><br><span class="line">参数：source，xml string；encoding，document encoding or NULL</span><br><span class="line">返回：如果成功则返回 TRUE，失败则返回 FALSE。</span><br><span class="line"></span><br><span class="line">b、XMLReader::open</span><br><span class="line">作用：载入xml文件</span><br><span class="line">用法：XMLReader::open(string url [, string encoding [, int options]] )</span><br><span class="line">参数：url，连接到xml的链接；encoding，document encoding or NULL</span><br><span class="line">返回：如果成功则返回 TRUE，失败则返回 FALSE。</span><br><span class="line"></span><br><span class="line">c、XMLReader::read</span><br><span class="line">作用：读取 xml，使解析器前进到下一个标记</span><br><span class="line">用法：XMLReader::read()，在 while 循环中遍历整个文档</span><br><span class="line">参数：NULL</span><br><span class="line">返回：如果成功则返回 TRUE，失败则返回 FALSE。</span><br><span class="line"></span><br><span class="line">d、XMLReader::getAttribute</span><br><span class="line">作用：获取属性</span><br><span class="line">用法：XMLReader::getAttribute(string name)</span><br><span class="line">参数：name，属性名称</span><br><span class="line">返回：如果成功则返回 属性值，失败则返回 FALSE。</span><br><span class="line"></span><br><span class="line">e、XMLReader::isValid</span><br><span class="line">作用：检验xml是否合法</span><br><span class="line">用法：XMLReader::isValid()</span><br><span class="line">参数：无</span><br><span class="line">返回：如果成功则返回 true，失败则返回 FALSE。</span><br><span class="line"></span><br><span class="line">f、XMLReader::moveToAttribute</span><br><span class="line">作用：移动焦点到所指的属性上</span><br><span class="line">用法：XMLReader::moveToAttribute(string name)</span><br><span class="line">参数：name，属性名称</span><br><span class="line">返回：如果成功则返回 true，失败则返回 FALSE。</span><br><span class="line"></span><br><span class="line">g、XMLReader::moveToFirstAttribute</span><br><span class="line">作用：移动焦点到第一个属性上</span><br><span class="line">用法：XMLReader::moveToFirstAttribute()</span><br><span class="line">参数：无</span><br><span class="line">返回：如果成功则返回 true，失败则返回 FALSE。</span><br><span class="line"></span><br><span class="line">h、XMLReader::moveToNextAttribute</span><br><span class="line">作用：移动焦点到下一个属性上</span><br><span class="line">用法：XMLReader::moveToNextAttribute()</span><br><span class="line">参数：无</span><br><span class="line">返回：如果成功则返回 true，失败则返回 FALSE。</span><br><span class="line"></span><br><span class="line">i、XMLReader::moveToElement</span><br><span class="line">作用：移动焦点到父节点当前属性上</span><br><span class="line">用法：XMLReader::moveToElement()</span><br><span class="line">参数：无</span><br><span class="line">返回：如果成功则返回 true，失败则返回 FALSE。</span><br><span class="line"></span><br><span class="line">j、XMLReader::close</span><br><span class="line">作用：关闭xml输入</span><br><span class="line">用法：XMLReader::close()</span><br><span class="line">参数：无</span><br><span class="line">返回：如果成功则返回 true，失败则返回 FALSE。</span><br></pre></td></tr></table></figure><h3 id="XMLReader属性"><a href="#XMLReader属性" class="headerlink" title="XMLReader属性"></a>XMLReader属性</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">a、XMLReader-&gt;attributeCount ;</span><br><span class="line">作用：属性数量</span><br><span class="line"></span><br><span class="line">b、XMLReader-&gt;baseURI ;</span><br><span class="line">作用：节点的url</span><br><span class="line"></span><br><span class="line">c、XMLReader-&gt;depth ;</span><br><span class="line">作用：节点树的层数</span><br><span class="line"></span><br><span class="line">d、XMLReader-&gt;hasAttributes ;</span><br><span class="line">作用：检测是否有属性</span><br><span class="line"></span><br><span class="line">e、XMLReader-&gt;hasValue ;</span><br><span class="line">作用：是否有值</span><br><span class="line"></span><br><span class="line">f、XMLReader-&gt;isEmptyElement ;</span><br><span class="line">作用：是否是空标签</span><br><span class="line"></span><br><span class="line">g、XMLReader-&gt;localName ;</span><br><span class="line">作用：标签内部明</span><br><span class="line"></span><br><span class="line">h、XMLReader-&gt;name ;</span><br><span class="line">作用：标签名</span><br><span class="line"></span><br><span class="line">i、XMLReader-&gt;nodeType ;</span><br><span class="line">作用：节点类型</span><br><span class="line"></span><br><span class="line">j、XMLReader-&gt;value ;</span><br><span class="line">作用：节点文本内容</span><br></pre></td></tr></table></figure><p>————————————————<br>版权声明：本文为CSDN博主「安南子.com」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/weixin_45578749/article/details/100131799" target="_blank" rel="noopener">https://blog.csdn.net/weixin_45578749/article/details/100131799</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;php-XML&quot;&gt;&lt;a href=&quot;#php-XML&quot; class=&quot;headerlink&quot; title=&quot;php XML&quot;&gt;&lt;/a&gt;php XML&lt;/h1&gt;&lt;h2 id=&quot;DOMDocument&quot;&gt;&lt;a href=&quot;#DOMDocument&quot; class=&quot;he
      
    
    </summary>
    
      <category term="php" scheme="https://moonclearner.cn/categories/php/"/>
    
    
      <category term="php" scheme="https://moonclearner.cn/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>python library description</title>
    <link href="https://moonclearner.cn/python/libDescription.html"/>
    <id>https://moonclearner.cn/python/libDescription.html</id>
    <published>2020-01-07T10:50:17.430Z</published>
    <updated>2020-01-07T10:50:17.430Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、环境管理：管理-Python-版本和环境的工具。"><a href="#1、环境管理：管理-Python-版本和环境的工具。" class="headerlink" title="1、环境管理：管理 Python 版本和环境的工具。"></a>1、环境管理：管理 Python 版本和环境的工具。</h2><p>p – 非常简单的交互式 python 版本管理工具。<br>pyenv – 简单的 Python 版本管理工具。<br>Vex – 可以在虚拟环境中执行命令。<br>virtualenv – 创建独立 Python 环境的工具。<br>virtualenvwrapper– virtualenv 的一组扩展。</p><h2 id="2、包管理：管理包和依赖的工具。"><a href="#2、包管理：管理包和依赖的工具。" class="headerlink" title="2、包管理：管理包和依赖的工具。"></a>2、包管理：管理包和依赖的工具。</h2><p>pip – Python 包和依赖关系管理工具。<br>pip-tools – 保证 Python 包依赖关系更新的一组工具。<br>conda – 跨平台，Python 二进制包管理工具。<br>Curdling – 管理 Python 包的命令行工具。<br>wheel – Python 分发的新标准，意在取代 eggs。</p><h2 id="3、包仓库：本地-PyPI-仓库服务和代理。"><a href="#3、包仓库：本地-PyPI-仓库服务和代理。" class="headerlink" title="3、包仓库：本地 PyPI 仓库服务和代理。"></a>3、包仓库：本地 PyPI 仓库服务和代理。</h2><p>warehouse – 下一代 PyPI。<br>Warehouse bandersnatch – PyPA 提供的 PyPI 镜像工具。<br>devpi – PyPI 服务和打包/测试/分发工具。<br>localshop – 本地 PyPI 服务（自定义包并且自动对 PyPI 镜像）。</p><h2 id="4、分发：打包为可执行文件以便分发。"><a href="#4、分发：打包为可执行文件以便分发。" class="headerlink" title="4、分发：打包为可执行文件以便分发。"></a>4、分发：打包为可执行文件以便分发。</h2><p>PyInstaller – 将 Python 程序转换成独立的执行文件（跨平台）。<br>dh-virtualenv – 构建并将 virtualenv 虚拟环境作为一个 Debian 包来发布。<br>Nuitka – 将脚本、模块、包编译成可执行文件或扩展模块。<br>py2app – 将 Python 脚本变为独立软件包（Mac OS X）。<br>py2exe – 将 Python 脚本变为独立软件包（Windows）。<br>pynsist – 一个用来创建 Windows 安装程序的工具，可以在安装程序中打包 Python本身。</p><h2 id="5、构建工具：将源码编译成软件。"><a href="#5、构建工具：将源码编译成软件。" class="headerlink" title="5、构建工具：将源码编译成软件。"></a>5、构建工具：将源码编译成软件。</h2><p>buildout – 一个构建系统，从多个组件来创建，组装和部署应用。<br>BitBake – 针对嵌入式 Linux 的类似 make 的构建工具。<br>fabricate – 对任何语言自动找到依赖关系的构建工具。<br>PlatformIO – 多平台命令行构建工具。<br>PyBuilder – 纯 Python 实现的持续化构建工具。<br>SCons – 软件构建工具。</p><h2 id="6、交互式解析器：交互式-Python-解析器。"><a href="#6、交互式解析器：交互式-Python-解析器。" class="headerlink" title="6、交互式解析器：交互式 Python 解析器。"></a>6、交互式解析器：交互式 Python 解析器。</h2><p>IPython – 功能丰富的工具，非常有效的使用交互式 Python。<br>bpython– 界面丰富的 Python 解析器。<br>ptpython – 高级交互式Python解析器， 构建于python-prompt-toolkit 之上。</p><h2 id="7、文件：文件管理和-MIME（多用途的网际邮件扩充协议）类型检测。"><a href="#7、文件：文件管理和-MIME（多用途的网际邮件扩充协议）类型检测。" class="headerlink" title="7、文件：文件管理和 MIME（多用途的网际邮件扩充协议）类型检测。"></a>7、文件：文件管理和 MIME（多用途的网际邮件扩充协议）类型检测。</h2><p>imghdr – （Python 标准库）检测图片类型。<br>mimetypes – （Python 标准库）将文件名映射为 MIME 类型。<br>path.py – 对 os.path 进行封装的模块。<br>pathlib – （Python3.4+ 标准库）跨平台的、面向对象的路径操作库。<br>python-magic– 文件类型检测的第三方库 libmagic 的 Python 接口。<br>Unipath– 用面向对象的方式操作文件和目录<br>watchdog – 管理文件系统事件的 API 和 shell 工具</p><h2 id="8、日期和时间：操作日期和时间的类库。"><a href="#8、日期和时间：操作日期和时间的类库。" class="headerlink" title="8、日期和时间：操作日期和时间的类库。"></a>8、日期和时间：操作日期和时间的类库。</h2><p>arrow– 更好的 Python 日期时间操作类库。<br>Chronyk – Python 3 的类库，用于解析手写格式的时间和日期。<br>dateutil – Python datetime 模块的扩展。<br>delorean– 解决 Python 中有关日期处理的棘手问题的库。<br>moment – 一个用来处理时间和日期的Python库。灵感来自于Moment.js。<br>PyTime – 一个简单易用的Python模块，用于通过字符串来操作日期/时间。<br>pytz – 现代以及历史版本的世界时区定义。将时区数据库引入Python。<br>when.py – 提供用户友好的函数来帮助用户进行常用的日期和时间操作。</p><h2 id="9、文本处理：用于解析和操作文本的库。"><a href="#9、文本处理：用于解析和操作文本的库。" class="headerlink" title="9、文本处理：用于解析和操作文本的库。"></a>9、文本处理：用于解析和操作文本的库。</h2><h3 id="9-1通用"><a href="#9-1通用" class="headerlink" title="9.1通用"></a>9.1通用</h3><p>chardet – 字符编码检测器，兼容 Python2 和 Python3。<br>difflib – (Python 标准库)帮助我们进行差异化比较。<br>ftfy – 让Unicode文本更完整更连贯。<br>fuzzywuzzy – 模糊字符串匹配。<br>Levenshtein – 快速计算编辑距离以及字符串的相似度。<br>pangu.py – 在中日韩语字符和数字字母之间添加空格。<br>pyfiglet -figlet 的 Python实现。<br>shortuuid – 一个生成器库，用以生成简洁的，明白的，URL 安全的 UUID。<br>unidecode – Unicode 文本的 ASCII 转换形式 。<br>uniout – 打印可读的字符，而不是转义的字符串。<br>xpinyin – 一个用于把汉字转换为拼音的库。</p><h3 id="9-2-Slug化"><a href="#9-2-Slug化" class="headerlink" title="9.2 Slug化"></a>9.2 Slug化</h3><p>awesome-slugify – 一个 Python slug 化库，可以保持 Unicode。<br>python-slugify – Python slug 化库，可以把 unicode 转化为 ASCII。<br>unicode-slugify – 一个 slug 工具，可以生成 unicode slugs ,需要依赖 Django 。</p><h3 id="9-3-解析器"><a href="#9-3-解析器" class="headerlink" title="9.3 解析器"></a>9.3 解析器</h3><p>phonenumbers – 解析，格式化，储存，验证电话号码。<br>PLY – lex 和 yacc 解析工具的 Python 实现。<br>Pygments – 通用语法高亮工具。<br>pyparsing – 生成通用解析器的框架。<br>python-nameparser – 把一个人名分解为几个独立的部分。<br>python-user-agents – 浏览器 user agent 解析器。<br>sqlparse – 一个无验证的 SQL 解析器。</p><p>10、特殊文本格式处理：一些用来解析和操作特殊文本格式的库。<br>10.1 通用<br>tablib – 一个用来处理中表格数据的模块。<br>10.2 Office<br>Marmir – 把输入的Python 数据结构转换为电子表单。<br>openpyxl – 一个用来读写 Excel 2010 xlsx/xlsm/xltx/xltm 文件的库。<br>python-docx – 读取，查询以及修改 Microsoft Word 2007/2008 docx 文件。<br>unoconv – 在 LibreOffice/OpenOffice 支持的任意文件格式之间进行转换。<br>XlsxWriter – 一个用于创建 Excel .xlsx 文件的 Python 模块。<br>xlwings – 一个使得在 Excel 中方便调用 Python 的库（反之亦然），基于 BSD 协议。<br>xlwt / xlrd – 读写 Excel 文件的数据和格式信息。<br>relatorio – 模板化OpenDocument 文件。<br>10.3 PDF<br>PDFMiner – 一个用于从PDF文档中抽取信息的工具。<br>PyPDF2 – 一个可以分割，合并和转换 PDF 页面的库。<br>ReportLab – 快速创建富文本 PDF 文档。<br>10.4 Markdown<br>Mistune – 快速并且功能齐全的纯 Python 实现的 Markdown 解析器。<br>Python-Markdown – John Gruber’s Markdown 的 Python 版实现。<br>10.5 YAML<br>PyYAML – Python 版本的 YAML 解析器。<br>10.6 CSV<br>csvkit – 用于转换和操作 CSV 的工具。<br>10.7 Archive<br>unp – 一个用来方便解包归档文件的命令行工具。</p><p>11、自然语言处理：用来处理人类语言的库。<br>NLTK – 一个先进的平台，用以构建处理人类语言数据的 Python 程序。<br>jieba – 中文分词工具。<br>langid.py – 独立的语言识别系统。<br>Pattern – Python 网络信息挖掘模块。<br>SnowNLP – 一个用来处理中文文本的库。<br>TextBlob – 为进行普通自然语言处理任务提供一致的 API。<br>TextGrocery – 一简单高效的短文本分类工具，基于 LibLinear 和 Jieba。</p><p>12、文档：用以生成项目文档的库。<br>Sphinx – Python 文档生成器。<br>awesome-sphinxdoc<br>MkDocs – 对 Markdown 友好的文档生成器。<br>pdoc – 一个可以替换Epydoc 的库，可以自动生成 Python 库的 API 文档。<br>Pycco – 文学编程（literate-programming）风格的文档生成器。</p><p>13、配置：用来保存和解析配置的库。<br>config – logging 模块作者写的分级配置模块。<br>ConfigObj – INI 文件解析器，带验证功能。<br>ConfigParser – (Python 标准库) INI 文件解析器。<br>profig – 通过多种格式进行配置，具有数值转换功能。<br>python-decouple – 将设置和代码完全隔离。</p><p>14、命令行工具：用于创建命令行程序的库。<br>14.1 命令行程序开发<br>cement – Python 的命令行程序框架。<br>click – 一个通过组合的方式来创建精美命令行界面的包。<br>cliff – 一个用于创建命令行程序的框架，可以创建具有多层命令的命令行程序。<br>clint – Python 命令行程序工具。<br>colorama – 跨平台彩色终端文本。<br>docopt – Python 风格的命令行参数解析器。<br>Gooey – 一条命令，将命令行程序变成一个 GUI 程序。<br>python-prompt-toolkit – 一个用于构建强大的交互式命令行程序的库。<br>14.2 生产力工具<br>aws-cli – Amazon Web Services 的通用命令行界面。<br>bashplotlib – 在终端中进行基本绘图。<br>caniusepython3 – 判断是哪个项目妨碍你你移植到 Python 3。<br>cookiecutter – 从 cookiecutters（项目模板）创建项目的一个命令行工具。<br>doitlive – 一个用来在终端中进行现场演示的工具。<br>howdoi – 通过命令行获取即时的编程问题解答。<br>httpie – 一个命令行HTTP 客户端，cURL 的替代品，易用性更好。<br>PathPicker – 从bash输出中选出文件。<br>percol – 向UNIX shell 传统管道概念中加入交互式选择功能。<br>SAWS – 一个加强版的 AWS 命令行。<br>thefuck – 修正你之前的命令行指令。<br>mycli – 一个 MySQL 命令行客户端，具有自动补全和语法高亮功能。<br>pgcli – Postgres 命令行工具，具有自动补全和语法高亮功能。</p><p>15、下载器：用来进行下载的库。<br>s3cmd – 一个用来管理Amazon S3 和 CloudFront 的命令行工具。<br>s4cmd – 超级 S3 命令行工具，性能更加强劲。<br>you-get – 一个 YouTube/Youku/Niconico 视频下载器，使用 Python3 编写。<br>youtube-dl – 一个小巧的命令行程序，用来下载 YouTube 视频。</p><p>16、图像处理：用来操作图像的库。<br>pillow – Pillow 是一个更加易用版的 PIL。<br>hmap – 图像直方图映射。<br>imgSeek – 一个使用视觉相似性搜索一组图片集合的项目。<br>nude.py – 裸体检测。<br>pyBarcode – 不借助 PIL 库在 Python 程序中生成条形码。<br>pygram – 类似 Instagram 的图像滤镜。<br>python-qrcode – 一个纯 Python 实现的二维码生成器。<br>Quads – 基于四叉树的计算机艺术。<br>scikit-image – 一个用于（科学）图像处理的 Python 库。<br>thumbor – 一个小型图像服务，具有剪裁，尺寸重设和翻转功能。<br>wand – MagickWand的Python 绑定。MagickWand 是 ImageMagick的 C API 。</p><p>17、OCR：光学字符识别库。<br>pyocr – Tesseract 和 Cuneiform 的一个封装(wrapper)。<br>pytesseract – Google Tesseract OCR 的另一个封装(wrapper)。<br>python-tesseract – Google Tesseract OCR 的一个包装类。</p><p>18、音频：用来操作音频的库。<br>audiolazy -Python 的数字信号处理包。<br>audioread – 交叉库 (GStreamer + Core Audio + MAD + FFmpeg) 音频解码。<br>beets – 一个音乐库管理工具及 MusicBrainz 标签添加工具<br>dejavu – 音频指纹提取和识别<br>django-elastic-transcoder – Django + Amazon Elastic Transcoder。<br>eyeD3 – 一个用来操作音频文件的工具，具体来讲就是包含 ID3 元信息的 MP3 文件。<br>id3reader – 一个用来读取 MP3 元数据的 Python 模块。<br>m3u8 – 一个用来解析 m3u8 文件的模块。<br>mutagen – 一个用来处理音频元数据的 Python 模块。<br>pydub – 通过简单、简洁的高层接口来操作音频文件。<br>pyechonest – Echo Nest API 的 Python 客户端<br>talkbox – 一个用来处理演讲/信号的 Python 库<br>TimeSide – 开源 web 音频处理框架。<br>tinytag – 一个用来读取MP3, OGG, FLAC 以及 Wave 文件音乐元数据的库。<br>mingus – 一个高级音乐理论和曲谱包，支持 MIDI 文件和回放功能。</p><p>19、Video：用来操作视频和GIF的库。<br>moviepy – 一个用来进行基于脚本的视频编辑模块，适用于多种格式，包括动图 GIFs。<br>scikit-video – SciPy 视频处理常用程序。</p><p>20、地理位置：地理编码地址以及用来处理经纬度的库。<br>GeoDjango – 世界级地理图形 web 框架。<br>GeoIP – MaxMind GeoIP Legacy 数据库的 Python API。<br>geojson – GeoJSON 的 Python 绑定及工具。<br>geopy – Python 地址编码工具箱。<br>pygeoip – 纯 Python GeoIP API。<br>django-countries – 一个 Django 应用程序，提供用于表格的国家选择功能，国旗图标静态文件以及模型中的国家字段。</p><p>21、HTTP：使用HTTP的库。<br>requests – 人性化的HTTP请求库。<br>grequests – requests 库 + gevent ，用于异步 HTTP 请求.<br>httplib2 – 全面的 HTTP 客户端库。<br>treq – 类似 requests 的Python API 构建于 Twisted HTTP 客户端之上。<br>urllib3 – 一个具有线程安全连接池，支持文件 post，清晰友好的 HTTP 库。</p><p>22、数据库：Python实现的数据库。<br>pickleDB – 一个简单，轻量级键值储存数据库。<br>PipelineDB – 流式 SQL 数据库。<br>TinyDB – 一个微型的，面向文档型数据库。<br>ZODB – 一个 Python 原生对象数据库。一个键值和对象图数据库。</p><p>23、数据库驱动：用来连接和操作数据库的库。<br>MySQL – awesome-mysql系列<br>mysql-python – Python 的 MySQL 数据库连接器。<br>mysqlclient – mysql-python 分支，支持 Python 3。<br>oursql – 一个更好的 MySQL 连接器，支持原生预编译指令和 BLOBs.<br>PyMySQL – 纯 Python MySQL 驱动，兼容 mysql-python。</p><p>24、PostgreSQL<br>psycopg2 – Python 中最流行的 PostgreSQL 适配器。<br>queries – psycopg2 库的封装，用来和 PostgreSQL 进行交互。<br>txpostgres – 基于 Twisted 的异步 PostgreSQL 驱动。<br>其他关系型数据库<br>apsw – 另一个 Python SQLite封装。<br>dataset – 在数据库中存储Python字典 – 可以协同SQLite，MySQL，和 PostgreSQL工作。<br>pymssql– 一个简单的Microsoft SQL Server数据库接口。<br>NoSQL 数据库<br>cassandra-python-driver – Cassandra 的 Python 驱动。<br>HappyBase – 一个为 Apache HBase 设计的，对开发者友好的库。<br>Plyvel – 一个快速且功能丰富的 LevelDB 的 Python 接口。<br>py2neo – Neo4j restful 接口的Python 封装客户端。<br>pycassa – Cassandra 的 Python Thrift 驱动。<br>PyMongo – MongoDB 的官方 Python 客户端。<br>redis-py – Redis 的 Python 客户端。<br>telephus – 基于 Twisted 的 Cassandra 客户端。<br>txRedis – 基于 Twisted 的 Redis 客户端。<br>ORM：实现对象关系映射或数据映射技术的库。<br>关系型数据库<br>awesome-sqlalchemy系列<br>Django Models – Django 的一部分。<br>SQLAlchemy – Python SQL 工具以及对象关系映射工具。<br>Peewee – 一个小巧，富有表达力的 ORM。<br>PonyORM – 提供面向生成器的 SQL 接口的 ORM。<br>python-sql – 编写 Python 风格的 SQL 查询。<br>NoSQL 数据库<br>django-mongodb-engine – Django MongoDB 后端。<br>PynamoDB – Amazon DynamoDB 的一个 Python 风格接口。<br>flywheel – Amazon DynamoDB 的对象映射工具。<br>MongoEngine – 一个Python 对象文档映射工具，用于 MongoDB。<br>hot-redis – 为 Redis 提供 Python 丰富的数据类型。<br>redisco – 一个 Python 库，提供可以持续存在在 Redis 中的简单模型和容器。</p><p>25、其他<br>butterdb – Google Drive 电子表格的 Python ORM。</p><p>26、Web 框架<br>全栈 web 框架。<br>Django – Python 界最流行的 web 框架。<br>awesome-django系列<br>Flask – 一个 Python 微型框架。<br>awesome-flask系列<br>Pyramid – 一个小巧，快速，接地气的开源Python web 框架。<br>awesome-pyramid系列<br>Bottle – 一个快速小巧，轻量级的 WSGI 微型 web 框架。<br>CherryPy – 一个极简的 Python web 框架，服从 HTTP/1.1 协议且具有WSGI 线程池。<br>TurboGears – 一个可以扩展为全栈解决方案的微型框架。<br>web.py – 一个 Python 的 web 框架，既简单，又强大。<br>web2py – 一个全栈 web 框架和平台，专注于简单易用。<br>Tornado – 一个web 框架和异步网络库。</p><p>27、权限：允许或拒绝用户访问数据或功能的库。<br>Carteblanche – Module to align code with thoughts of users and designers. Also magically handles navigation and permissions.<br>django-guardian – Django 1.2+ 实现了单个对象权限。<br>django-rules – 一个小巧但是强大的应用，提供对象级别的权限管理，且不需要使用数据库。</p><p>28、CMS:内容管理系统<br>django-cms – 一个开源的，企业级 CMS，基于 Django。<br>djedi-cms – 一个轻量级但却非常强大的 Django CMS ，考虑到了插件，内联编辑以及性能。<br>FeinCMS – 基于 Django 构建的最先进的内容管理系统之一。<br>Kotti – 一个高级的，Python 范的 web 应用框架，基于 Pyramid 构建。<br>Mezzanine – 一个强大的，持续的，灵活的内容管理平台。<br>Opps – 一个为杂志，报纸网站以及大流量门户网站设计的 CMS 平台，基于 Django。<br>Plone – 一个构建于开源应用服务器 Zope 之上的 CMS。<br>Quokka – 灵活，可扩展的小型 CMS，基于 Flask 和 MongoDB。<br>Wagtail – 一个 Django 内容管理系统。<br>Widgy – 最新的 CMS 框架，基于 Django。</p><p>29、电子商务:用于电子商务以及支付的框架和库。<br>django-oscar – 一个用于 Django 的开源的电子商务框架。<br>django-shop – 一个基于 Django 的店铺系统。<br>Cartridge – 一个基于 Mezzanine 构建的购物车应用。<br>shoop – 一个基于 Django 的开源电子商务平台。<br>alipay – 非官方的 Python 支付宝 API。<br>merchant – 一个可以接收来自多种支付平台支付的 Django 应用。<br>money – 货币类库with optional CLDR-backed locale-aware formatting and an extensible currency exchange solution.<br>python-currencies – 显示货币格式以及它的数值。</p><p>30、RESTful API:用来开发RESTful APIs的库<br>30.1 Django<br>django-rest-framework – 一个强大灵活的工具，用来构建 web API。<br>django-tastypie – 为Django 应用开发API。<br>django-formapi – 为 Django 的表单验证，创建 JSON APIs 。<br>30.2 Flask<br>flask-api – 为 flask 开发的，可浏览 Web APIs 。<br>flask-restful – 为 flask 快速创建REST APIs 。<br>flask-restless – 为 SQLAlchemy 定义的数据库模型创建 RESTful APIs 。<br>flask-api-utils – 为 Flask 处理 API 表示和验证。<br>eve – REST API 框架，由 Flask, MongoDB 等驱动。<br>30.3 Pyramid<br>cornice – 一个Pyramid 的 REST 框架 。<br>30.4 与框架无关的<br>falcon – 一个用来建立云 API 和 web app 后端的噶性能框架。<br>sandman – 为现存的数据库驱动系统自动创建 REST APIs 。<br>restless – 框架无关的 REST 框架 ，基于从 Tastypie 学到的知识。<br>ripozo – 快速创建 REST/HATEOAS/Hypermedia APIs。</p><p>31、验证:实现验证方案的库。<br>31.1 OAuth<br>Authomatic – 简单但是强大的框架，身份验证/授权客户端。<br>django-allauth – Django 的验证应用。<br>django-oauth-toolkit – 为 Django 用户准备的 OAuth2。<br>django-oauth2-provider – 为 Django 应用提供 OAuth2 接入。<br>Flask-OAuthlib – OAuth 1.0/a, 2.0 客户端实现，供 Flask 使用。<br>OAuthLib – 一个 OAuth 请求-签名逻辑通用、 完整的实现。<br>python-oauth2 – 一个完全测试的抽象接口。用来创建 OAuth 客户端和服务端。<br>python-social-auth – 一个设置简单的社会化验证方式。<br>rauth – OAuth 1.0/a, 2.0, 和 Ofly 的 Python 库。<br>sanction – 一个超级简单的OAuth2 客户端实现。<br>31.2 其他<br>jose – JavaScript 对象签名和加密草案的实现。<br>PyJWT – JSON Web 令牌草案 01。<br>python-jws – JSON Web 签名草案 02 的实现。<br>python-jwt – 一个用来生成和验证 JSON Web 令牌的模块。</p><p>32、模板引擎：模板生成和词法解析的库和工具。<br>Jinja2 – 一个现代的，对设计师友好的模板引擎。<br>Chameleon – 一个 HTML/XML 模板引擎。 模仿了 ZPT（Zope Page Templates）, 进行了速度上的优化。<br>Genshi – Python 模板工具，用以生成 web 感知的结果。<br>Mako – Python 平台的超高速轻量级模板。</p><p>33、Queue：处理事件以及任务队列的库。<br>celery – 一个异步任务队列/作业队列，基于分布式消息传递。<br>huey – 小型多线程任务队列。<br>mrq – Mr. Queue -一个 Python 的分布式 worker 任务队列， 使用 Redis 和 gevent。<br>rq – 简单的 Python 作业队列。<br>simpleq – 一个简单的，可无限扩张的，基于亚马逊 SQS 的队列。</p><p>34、搜索：对数据进行索引和执行搜索查询的库和软件。<br>django-haystack – Django 模块化搜索。<br>elasticsearch-py – Elasticsearch 的官方底层 Python 客户端。<br>elasticsearch-dsl-py -Elasticsearch 的官方高级 Python 客户端。<br>solrpy – solr的 Python 客户端。<br>Whoosh – 一个快速的纯 Python 搜索引擎库。</p><p>35、动态消息：用来创建用户活动的库。<br>django-activity-stream – 从你的站点行为中生成通用活动信息流。<br>Stream-Framework – 使用 Cassandra 和 Redis 创建动态消息和通知系统。</p><p>36、资源管理：管理、压缩、缩小网站资源的工具。<br>django-compressor – 将链接和内联的 JavaScript 或 CSS 压缩到一个单独的缓存文件中。<br>django-storages – 一个针对 Django 的自定义存储后端的工具集合。<br>fanstatic – 打包、优化，并且把静态文件依赖作为 Python 的包来提供。<br>File Conveyor – 一个后台驻留的程序，用来发现和同步文件到 CDNs, S3 和 FTP。<br>Flask-Assets – 帮你将 web 资源整合到你的 Flask app 中。<br>jinja-assets-compressor – 一个 Jinja 扩展，用来编译和压缩你的资源。<br>webassets – 为你的静态资源打包、优化和管理生成独一无二的缓存 URL。</p><p>37、缓存：缓存数据的库。<br>Beaker – 一个缓存和会话库，可以用在 web 应用和独立 Python脚本和应用上。<br>django-cache-machine – Django 模型的自动缓存和失效。<br>django-cacheops– 具有自动颗粒化事件驱动失效功能的 ORM。<br>django-viewlet – 渲染模板，同时具有额外的缓存控制功能。<br>dogpile.cache – dogpile.cache 是 Beaker 的下一代替代品，由同一作者开发。<br>HermesCache – Python 缓存库，具有基于标签的失效和 dogpile effect 保护功能。<br>johnny-cache – django应用缓存框架。<br>pylibmc – libmemcached 接口的 Python 封装。</p><p>38、电子邮件：用来发送和解析电子邮件的库。<br>django-celery-ses – 带有 AWS SES 和 Celery 的 Django email 后端。<br>envelopes – 供人类使用的电子邮件库。<br>flanker – 一个 email 地址和 Mime 解析库。<br>imbox – Python IMAP 库<br>inbox.py – Python SMTP 服务器。<br>inbox – 一个开源电子邮件工具箱。<br>lamson – Python 风格的 SMTP 应用服务器。<br>mailjet – Mailjet API 实现，用来提供批量发送邮件，统计等功能。<br>marrow.mailer – 高性能可扩展邮件分发框架。<br>modoboa – 一个邮件托管和管理平台，具有现代的、简约的 Web UI。<br>pyzmail – 创建，发送和解析电子邮件。<br>Talon – Mailgun 库，用来抽取信息和签名。</p><p>39、国际化：用来进行国际化的库。<br>Babel – 一个Python 的国际化库。<br>Korean – 一个韩语词态库。</p><p>40、URL处理：解析URLs的库。<br>furl – 一个让处理 URL 更简单小型 Python 库。<br>purl – 一个简单的，不可变的URL类，具有简洁的 API 来进行询问和处理。<br>pyshorteners – 一个纯 Python URL 缩短库。<br>shorturl– 生成短小 URL 和类似 bit.ly 短链的Python 实现。<br>webargs – 一个解析 HTTP 请求参数的库，内置对流行 web 框架的支持，包括 Flask, Django, Bottle, Tornado和 Pyramid。</p><p>41、HTML处理：处理 HTML和XML的库。<br>BeautifulSoup – 以 Python 风格的方式来对 HTML 或 XML 进行迭代，搜索和修改。<br>bleach – 一个基于白名单的 HTML 清理和文本链接库。<br>cssutils – 一个 Python 的 CSS 库。<br>html5lib – 一个兼容标准的 HTML 文档和片段解析及序列化库。<br>lxml – 一个非常快速，简单易用，功能齐全的库，用来处理 HTML 和 XML。<br>MarkupSafe – 为Python 实现 XML/HTML/XHTML 标记安全字符串。<br>pyquery – 一个解析 HTML 的库，类似 jQuery。<br>untangle – 将XML文档转换为Python对象，使其可以方便的访问。<br>xhtml2pdf – HTML/CSS 转 PDF 工具。<br>xmltodict – 像处理 JSON 一样处理 XML。</p><p>42、网络站点爬取：爬取网络站点的库。<br>Scrapy – 一个快速高级的屏幕爬取及网页采集框架。<br>cola – 一个分布式爬虫框架。<br>Demiurge – 基于PyQuery 的爬虫微型框架。<br>feedparser – 通用 feed 解析器。<br>Grab – 站点爬取框架。<br>MechanicalSoup – 用于自动和网络站点交互的 Python 库。<br>portia – Scrapy 可视化爬取。<br>pyspider – 一个强大的爬虫系统。<br>RoboBrowser – 一个简单的，Python 风格的库，用来浏览网站，而不需要一个独立安装的浏览器。</p><p>43、网页内容提取：用于进行网页内容提取的库。<br>Haul – 一个可以扩展的图像爬取工具。<br>html2text – 将 HTML 转换为 Markdown 格式文本<br>lassie – 人性化的网页内容检索库。<br>micawber -一个小型网页内容提取库，用来从 URLs 提取富内容。<br>newspaper – 使用 Python 进行新闻提取，文章提取以及内容策展。<br>opengraph – 一个用来解析开放内容协议(Open Graph Protocol)的 Python模块。<br>python-goose – HTML内容/文章提取器。<br>python-readability– arc90 公司 readability 工具的 Python 高速端口<br>sanitize – 为杂乱的数据世界带来调理性。<br>sumy – 一个为文本文件和 HTML 页面进行自动摘要的模块。<br>textract – 从任何格式的文档中提取文本，Word，PowerPoint，PDFs 等等。</p><p>44、表单：进行表单操作的库。<br>Deform – Python HTML 表单生成库，受到了 formish 表单生成库的启发。<br>django-bootstrap3– 集成了 Bootstrap 3 的 Django。<br>django-crispy-forms – 一个 Django 应用，他可以让你以一种非常优雅且 DRY（Don’t repeat yourself） 的方式来创建美观的表单。<br>django-remote-forms– 一个平台独立的 Django 表单序列化工具。<br>WTForms – 一个灵活的表单验证和呈现库。<br>WTForms-JSON– 一个 WTForms 扩展，用来处理 JSON 数据。</p><p>45、数据验证：数据验证库，多用于表单验证。<br>Cerberus – A mappings-validator with a variety of rules, normalization-features and simple customization that uses a pythonic schema-definition.<br>colander – 一个用于对从 XML, JSON，HTML 表单获取的数据或其他同样简单的序列化数据进行验证和反序列化的系统。<br>kmatch – 一种用于匹配/验证/筛选 Python 字典的语言。<br>schema -一个用于对 Python 数据结构进行验证的库。<br>Schematics – 数据结构验证。<br>valideer – 轻量级可扩展的数据验证和适配库。<br>voluptuous – 一个 Python 数据验证库。主要是为了验证传入 Python的 JSON，YAML 等数据。</p><p>46、反垃圾技术：帮助你和电子垃圾进行战斗的库。<br>django-simple-captcha – 一个简单、高度可定制的Django 应用，可以为任何Django表单添加验证码。<br>django-simple-spam-blocker– 一个用于Django的简单的电子垃圾屏蔽工具。</p><p>47、标记：用来进行标记的库。<br>django-taggit – 简单的 Django 标记工具。</p><p>48、管理面板：管理界面库。<br>Ajenti – 一个你的服务器值得拥有的管理面板。<br>django-suit – Django 管理界面的一个替代品 (仅对于非商业用途是免费的)。<br>django-xadmin – Django admin 的一个替代品，具有很多不错的功能。<br>flask-admin – 一个用于 Flask 的简单可扩展的管理界面框架。<br>flower – 一个对 Celery 集群进行实时监控和提供 web 管理界面的工具。<br>Grappelli – Django 管理界面的一个漂亮的皮肤。<br>Wooey – 一个 Django 应用，可以为 Python 脚本创建 web 用户界面。</p><p>49、静态站点生成器：静态站点生成器是一个软件，它把文本和模板作为输入，然后输出HTML文件。<br>Pelican – 使用 Markdown 或 ReST 来处理内容， Jinja 2 来制作主题。支持 DVCS, Disqus.。AGPL 许可。<br>Cactus – 为设计师设计的静态站点生成器。<br>Hyde – 基于 Jinja2 的静态站点生成器。<br>Nikola – 一个静态网站和博客生成器。<br>Tinkerer – Tinkerer 是一个博客引擎/静态站点生成器，由Sphinx驱动。<br>Lektor – 一个简单易用的静态 CMS 和博客引擎。</p><p>50、进程：操作系统进程启动及通信库。<br>envoy – 比 Python subprocess 模块更人性化。<br>sarge – 另一 种 subprocess 模块的封装。<br>sh – 一个完备的 subprocess 替代库。</p><p>51、并发和并行：用以进行并发和并行操作的库。<br>multiprocessing – (Python 标准库) 基于进程的“线程”接口。<br>threading – (Python 标准库)更高层的线程接口。<br>eventlet – 支持 WSGI 的异步框架。<br>gevent – 一个基于协程的 Python 网络库，使用greenlet。<br>Tomorrow -用于产生异步代码的神奇的装饰器语法实现。</p><p>52、网络：用于网络编程的库。<br>asyncio – (Python 标准库) 异步 I/O, 事件循环, 协程以及任务。<br>Twisted – 一个事件驱动的网络引擎。<br>pulsar – 事件驱动的并发框架。<br>diesel – 基于Greenlet 的事件 I/O 框架。<br>pyzmq – 一个 ZeroMQ 消息库的 Python 封装。<br>txZMQ – 基于 Twisted 的 ZeroMQ 消息库的 Python 封装。</p><p>53、WebSocket：帮助使用WebSocket的库。<br>AutobahnPython – 给 Python 、使用的 WebSocket &amp; WAMP 基于 Twisted 和 asyncio。<br>Crossbar – 开源统一应用路由(Websocket &amp; WAMP for Python on Autobahn).<br>django-socketio – 给 Django 用的 WebSockets。<br>WebSocket-for-Python – 为Python2/3 以及 PyPy 编写的 WebSocket 客户端和服务器库。</p><p>54、WSGI 服务器：兼容 WSGI 的 web 服务器<br>gunicorn – Pre-forked, 部分是由 C 语言编写的。<br>uwsgi – uwsgi 项目的目的是开发一组全栈工具，用来建立托管服务， 由 C 语言编写。<br>bjoern – 异步，非常快速，由 C 语言编写。<br>fapws3 – 异步 (仅对于网络端)，由 C 语言编写。<br>meinheld – 异步，部分是由 C 语言编写的。<br>netius – 异步，非常快速。<br>paste – 多线程，稳定，久经考验。<br>rocket – 多线程。<br>waitress – 多线程, 是它驱动着 Pyramid 框架。<br>Werkzeug – 一个 WSGI 工具库，驱动着 Flask ，而且可以很方便大嵌入到你的项目中去。</p><p>55、RPC 服务器：兼容 RPC 的服务器。<br>SimpleJSONRPCServer – 这个库是 JSON-RPC 规范的一个实现。<br>SimpleXMLRPCServer – (Python 标准库) 简单的 XML-RPC 服务器实现，单线程。<br>zeroRPC – zerorpc 是一个灵活的 RPC 实现，基于 ZeroMQ 和 MessagePack。</p><p>56、密码学：<br>cryptography – 这个软件包意在提供密码学基本内容和方法提供给 Python 开发者。<br>hashids – 在 Python 中实现 hashids 。<br>Paramiko – SSHv2 协议的 Python (2.6+, 3.3+) ，提供客户端和服务端的功能。<br>Passlib – 安全密码存储／哈希库，<br>PyCrypto – Python 密码学工具箱。<br>PyNacl – 网络和密码学(NaCl) 库的 Python 绑定。</p><p>57、图形用户界面：用来创建图形用户界面程序的库。<br>curses – 内建的 ncurses 封装，用来创建终端图形用户界面。<br>enaml – 使用类似 QML 的Declaratic语法来创建美观的用户界面。<br>kivy – 一个用来创建自然用户交互（NUI）应用程序的库，可以运行在 Windows, Linux, Mac OS X, Android 以及 iOS平台上。<br>pyglet – 一个Python 的跨平台窗口及多媒体库。<br>PyQt – 跨平台用户界面框架 Qt 的 Python 绑定 ，支持Qt v4 和 Qt v5。<br>PySide – P跨平台用户界面框架 Qt 的 Python 绑定 ，支持Qt v4。<br>Tkinter – Tkinter 是 Python GUI 的一个事实标准库。<br>Toga – 一个 Python 原生的, 操作系统原生的 GUI 工具包。<br>urwid – 一个用来创建终端 GUI 应用的库，支持组件，事件和丰富的色彩等。<br>PyGObject – GLib/GObject/GIO/GTK+ (GTK+3) 的 Python 绑定<br>Flexx – Flexx 是一个纯 Python 语言编写的用来创建 GUI 程序的工具集，它使用 web 技术进行界面的展示。</p><p>58、游戏开发：超赞的游戏开发库。<br>Cocos2d – cocos2d 是一个用来开发 2D 游戏， 示例和其他图形/交互应用的框架。基于 pyglet。<br>Panda3D – 由迪士尼开发的 3D 游戏引擎，并由卡内基梅陇娱乐技术中心负责维护。使用C++编写, 针对 Python 进行了完全的封装。<br>Pygame – Pygame 是一组 Python 模块，用来编写游戏。<br>PyOgre – Ogre 3D 渲染引擎的 Python 绑定，可以用来开发游戏和仿真程序等任何 3D 应用。<br>PyOpenGL – OpenGL 的 Python 绑定及其相关 APIs。<br>PySDL2 – SDL2 库的封装，基于 ctypes。<br>RenPy – 一个视觉小说（visual novel）引擎。</p><p>59、日志：用来生成和操作日志的库。<br>logging – (Python 标准库) 为 Python 提供日志功能。<br>logbook – Logging 库的替代品。<br>Eliot – 为复杂的和分布式系统创建日志。<br>Raven – Sentry的 Python 客户端。<br>Sentry – 实时记录和收集日志的服务器。</p><p>60、Testing：进行代码库测试和生成测试数据的库。<br>60.1测试框架<br>unittest – (Python 标准库) 单元测试框架。<br>nose – nose 扩展了 unittest 的功能。<br>contexts – 一个 Python 3.3+ 的 BDD 框架。受到C# –Machine.Specifications的启发。<br>hypothesis – Hypothesis 是一个基于先进的 Quickcheck 风格特性的测试库。<br>mamba – Python 的终极测试工具， 拥护BDD。<br>PyAutoGUI – PyAutoGUI 是一个人性化的跨平台 GUI 自动测试模块。<br>pyshould– Should 风格的断言，基于 PyHamcrest。<br>pytest– 一个成熟的全功能 Python 测试工具。<br>green– 干净，多彩的测试工具。<br>pyvows– BDD 风格的测试工具，受Vows.js的启发。<br>Robot Framework – 一个通用的自动化测试框架。<br>60.2 Web 测试<br>Selenium – Selenium WebDriver 的 Python 绑定。<br>locust – 使用 Python 编写的，可扩展的用户加载测试工具。<br>sixpack – 一个和语言无关的 A/B 测试框架。<br>splinter – 开源的 web 应用测试工具。<br>60.3 Mock测试<br>mock – (Python 标准库) 一个用于伪造测试的库。<br>doublex – Python 的一个功能强大的 doubles 测试框架。<br>freezegun – 通过伪造日期模块来生成不同的时间。<br>httmock – 针对 Python 2.6+ 和 3.2+ 生成 伪造请求的库。<br>httpretty – Python 的 HTTP 请求 mock 工具。<br>responses – 伪造 Python 中的 requests 库的一个通用库。<br>VCR.py – 在你的测试中记录和重放 HTTP 交互。<br>60.4 对象工厂<br>factoryboy – 一个 Python 用的测试固件 (test fixtures) 替代库。<br>mixer – 另外一个测试固件 (test fixtures) 替代库，支持 Django, Flask, SQLAlchemy, Peewee 等。<br>modelmommy – 为 Django 测试创建随机固件</p><p>61、代码覆盖率<br>coverage – 代码覆盖率测量。</p><p>62、伪数据<br>faker – 一个 Python 库，用来生成伪数据。<br>fake2db – 伪数据库生成器。<br>radar – 生成随机的日期/时间。</p><p>63、错误处理<br>FuckIt.py – FuckIt.py 使用最先进的技术来保证你的 Python 代码无论对错都能继续运行。</p><p>64、代码分析和Lint工具：进行代码分析，解析和操作代码库的库和工具。<br>64.1 代码分析<br>code2flow – 把你的 Python 和 JavaScript 代码转换为流程图。<br>pycallgraph -这个库可以把你的Python 应用的流程(调用图)进行可视化。<br>pysonar2 – Python 类型推断和检索工具。<br>64.2 Lint工具<br>Flake8 – 模块化源码检查工具: pep8, pyflakes 以及 co。<br>Pylint – 一个完全可定制的源码分析器。<br>pylama – Python 和 JavaScript 的代码审查工具。</p><p>65、Debugging Tools：用来进行代码调试的库。<br>65.1 调试器<br>ipdb – IPython 启用的 pdb。<br>pudb – 全屏，基于控制台的 Python 调试器。<br>pyringe – 可以在 Python 进程中附加和注入代码的调试器。<br>wdb – 一个奇异的 web 调试器，通过 WebSockets 工作。<br>winpdb – 一个具有图形用户界面的 Python 调试器，可以进行远程调试，基于 rpdb2。<br>django-debug-toolbar – 为 Django 显示各种调试信息。<br>django-devserver – 一个 Django 运行服务器的替代品。<br>flask-debugtoolbar – django-debug-toolbar 的 flask 版。<br>65.2 性能分析器<br>lineprofiler – 逐行性能分析。<br>memoryprofiler – 监控 Python 代码的内存使用。<br>profiling – 一个交互式 Python 性能分析工具。<br>65.3 其他<br>pyelftools – 解析和分析 ELF 文件以及 DWARF 调试信息。<br>python-statsd – statsd 服务器的 Python 客户端。</p><p>66、Science and Data Analysis：用来进行科学计算和数据分析的库。<br>astropy – 一个天文学 Python 库。<br>bcbio-nextgen – 这个工具箱为全自动高通量测序分析提供符合最佳实践的处理流程。<br>bccb – 生物分析相关代码集合<br>Biopython – Biopython 是一组可以免费使用的用来进行生物计算的工具。<br>blaze – NumPy 和 Pandas 的大数据接口。<br>cclib – 一个用来解析和解释计算化学软件包输出结果的库。<br>NetworkX – 一个为复杂网络设计的高性能软件。<br>Neupy – 执行和测试各种不同的人工神经网络算法。<br>Numba – Python JIT (just in time) 编译器，针对科学用的 Python ，由Cython 和 NumPy 的开发者开发。<br>NumPy – 使用 Python 进行科学计算的基础包。<br>Open Babel – 一个化学工具箱，用来描述多种化学数据。<br>Open Mining – 使用 Python 挖掘商业情报 (BI) (Pandas web 接口)。<br>orange – 通过可视化编程或 Python 脚本进行数据挖掘，数据可视化，分析和机器学习。<br>Pandas – 提供高性能，易用的数据结构和数据分析工具。<br>PyDy – PyDy 是 Python Dynamics 的缩写，用来为动力学运动建模工作流程提供帮助， 基于 NumPy, SciPy, IPython 和 matplotlib。<br>PyMC – 马尔科夫链蒙特卡洛采样工具。<br>RDKit – 化学信息学和机器学习软件。<br>SciPy – 由一些基于 Python ，用于数学，科学和工程的开源软件构成的生态系统。<br>statsmodels – 统计建模和计量经济学。<br>SymPy – 一个用于符号数学的 Python 库。<br>zipline – 一个 Python 算法交易库。</p><p>67、数据可视化：进行数据可视化的库。 参见: awesome-javascript。<br>matplotlib – 一个 Python 2D 绘图库。<br>bokeh – 用 Python 进行交互式 web 绘图。<br>ggplot – ggplot2 给 R 提供的 API 的 Python 版本。<br>plotly – 协同 Python 和 matplotlib 工作的 web 绘图库。<br>pygal – 一个 Python SVG 图表创建工具。<br>pygraphviz – Graphviz 的 Python 接口。<br>PyQtGraph – 交互式实时2D/3D/图像绘制及科学/工程学组件。<br>SnakeViz – 一个基于浏览器的 Python’s cProfile 模块输出结果查看工具。<br>vincent – 把 Python 转换为 Vega 语法的转换工具。<br>VisPy – 基于 OpenGL 的高性能科学可视化工具。</p><p>68、计算机视觉：计算机视觉库。<br>OpenCV – 开源计算机视觉库。<br>SimpleCV – 一个用来创建计算机视觉应用的开源框架。</p><p>69、机器学习：机器学习库。 参见: awesome-machine-learning.<br>Crab – 灵活、快速的推荐引擎。<br>gensim – 人性化的话题建模库。<br>hebel – GPU 加速的深度学习库。<br>NuPIC – 智能计算 Numenta 平台。<br>pattern – Python 网络挖掘模块。<br>PyBrain – 另一个 Python 机器学习库。<br>Pylearn2 – 一个基于 Theano 的机器学习库。<br>python-recsys – 一个用来实现推荐系统的 Python 库。<br>scikit-learn – 基于 SciPy 构建的机器学习 Python 模块。<br>pydeep – Python 深度学习库。<br>vowpalporpoise – 轻量级 Vowpal Wabbit 的 Python 封装。<br>skflow – 一个 TensorFlow 的简化接口(模仿 scikit-learn)。</p><p>70、MapReduce：MapReduce 框架和库。<br>dpark – Spark 的 Python 克隆版，一个类似 MapReduce 的框架。<br>dumbo – 这个 Python 模块可以让人轻松的编写和运行 Hadoop 程序。<br>luigi – 这个模块帮你构建批处理作业的复杂流水线。<br>mrjob – 在 Hadoop 或 Amazon Web Services 上运行 MapReduce 任务。<br>PySpark – Spark 的 Python API 。<br>streamparse – 运行针对事实数据流的 Python 代码。集成了Apache Storm。</p><p>71、函数式编程：使用 Python 进行函数式编程。<br>CyToolz – Toolz 的 Cython 实现 : 高性能函数式工具。<br>fn.py – 在 Python 中进行函数式编程 : 实现了一些享受函数式编程缺失的功能。<br>funcy – 炫酷又实用的函数式工具。<br>Toolz – 一组用于迭代器，函数和字典的函数式编程工具。</p><p>72、第三方 API：用来访问第三方 API的库。 参见： List of Python API Wrappers and Libraries。<br>apache-libcloud – 一个为各种云设计的 Python 库。<br>boto – Amazon Web Services 的 Python 接口。<br>django-wordpress – WordPress models and views for Django.<br>facebook-sdk – Facebook 平台的 Python SDK.<br>facepy – Facepy 让和 Facebook’s Graph API 的交互变得更容易。<br>gmail – Gmail 的 Python 接口。<br>google-api-python-client – Python 用的 Google APIs 客户端库。<br>gspread – Google 电子表格的 Python API.<br>twython – Twitter API 的封装。</p><p>73、DevOps 工具：用于 DevOps 的软件和库。<br>Ansible – 一个非常简单的 IT 自动化平台。<br>SaltStack – 基础设施自动化和管理系统。<br>OpenStack – 用于构建私有和公有云的开源软件。<br>Docker Compose – 快速，分离的开发环境，使用 Docker。<br>Fabric – 一个简单的，Python 风格的工具，用来进行远程执行和部署。<br>cuisine – 为 Fabric 提供一系列高级函数。<br>Fabtools – 一个用来编写超赞的 Fabric 文件的工具。<br>gitapi – Git 的纯 Python API。<br>hgapi – Mercurial 的纯 Python API。<br>honcho – Foreman的 Python 克隆版，用来管理基于Procfile的应用。<br>pexpect – Controlling interactive programs in a pseudo-terminal like 在一个伪终端中控制交互程序，就像 GNU expect 一样。<br>psutil – 一个跨平台进程和系统工具模块。<br>supervisor – UNIX 的进程控制系统。</p><p>74、任务调度：任务调度库。<br>APScheduler – 轻巧但强大的进程内任务调度，使你可以调度函数。<br>django-schedule – 一个 Django 排程应用。<br>doit – 一个任务执行和构建工具。<br>gunnery – 分布式系统使用的多用途任务执行工具 ，具有 web 交互界面。<br>Joblib – 一组为 Python 提供轻量级作业流水线的工具。<br>Plan – 如有神助地编写 crontab 文件。<br>schedule – 人性化的 Python 任务调度库。<br>Spiff – 使用纯 Python 实现的强大的工作流引擎。<br>TaskFlow – 一个可以让你方便执行任务的 Python 库，一致并且可靠。</p><p>75、外来函数接口：使用外来函数接口的库。<br>cffi – 用来调用 C 代码的外来函数接口。<br>ctypes – (Python 标准库) 用来调用 C 代码的外来函数接口。<br>PyCUDA – Nvidia CUDA API 的封装。<br>SWIG – 简化的封装和接口生成器。</p><p>76、高性能：让 Python 更快的库。<br>Cython – 优化的 Python 静态编译器。使用类型混合使 Python 编译成 C 或 C++ 模块来获得性能的极大提升。<br>PeachPy – 嵌入 Python 的 x86-64 汇编器。可以被用作 Python 内联的汇编器或者是独立的汇编器，用于 Windows, Linux, OS X, Native Client 或者 Go 。<br>PyPy – 使用 Python 实现的 Python。解释器使用黑魔法加快 Python 运行速度且不需要加入额外的类型信息。<br>Pyston – 使用 LLVM 和现代 JIT 技术构建的 Python 实现，目标是为了获得很好的性能。<br>Stackless Python – 一个强化版的 Python。</p><p>77、微软的 Windows平台：在 Windows 平台上进行 Python 编程。<br>Anaconda(强烈推荐)：使用科学软件包免费发布Python。支持Linux，Windows和Mac。<br>Enthought Canopy：免费和商业版本包括核心科学包。支持Linux，Windows和Mac。<br>Python（x，y）：一个免费的发行版，包括基于 Qt 和Spyder IDE的科学包 。支持Windows和Ubuntu；仅限Py2。<br>WinPython：另一个免费发行版，包括科学软件包和Spyder IDE。仅限Windows，但更积极地维护并支持最新的Python 3版本。<br>Pyzo：基于Anaconda和IEP交互式开发环境的免费发行版。支持Linux，Windows和Mac。<br>Pythonlibs：非官方的 Windows 平台 Python 扩展二进制包。<br>PythonNet： Python 与 .NET 公共语言运行库 (CLR)的集成。<br>PyWin32：针对 Windows 的Python 扩展。</p><p>78、网络可视化和SDN：用来进行网络可视化和SDN(软件定义网络)的工具和库。<br>Mininet – 一款流行的网络模拟器以及用 Python 编写的 API。<br>POX – 一个针对基于 Python 的软件定义网络应用（例如 OpenFlow SDN 控制器）的开源开发平台。<br>Pyretic – 火热的 SDN 编程语言中的一员，为网络交换机和模拟器提供强大的抽象能力。<br>SDX Platform – 基于 SDN 的 IXP 实现，影响了 Mininet, POX 和 Pyretic。</p><p>79、硬件：用来对硬件进行编程的库。<br>ino -操作Arduino的命令行工具。<br>Pyro – Python 机器人编程库。<br>PyUserInput – 跨平台的，控制鼠标和键盘的模块。<br>scapy – 一个非常棒的操作数据包的库。<br>wifi – 一个 Python 库和命令行工具用来在 Linux 平台上操作WiFi。<br>Pingo – Pingo 为类似Raspberry Pi，pcDuino， Intel Galileo等设备提供统一的API用以编程。</p><p>80、兼容性：帮助从 Python 2 向 Python 3迁移的库。<br>Python-Future – 这就是 Python 2 和 Python 3 之间丢失的那个兼容性层。<br>Python-Modernize – 使 Python 代码更加现代化以便最终迁移到 Python 3。<br>Six – Python 2 和 3 的兼容性工具。</p><p>81、杂项：不属于上面任何一个类别，但是非常有用的库。<br>blinker – 一个快速的 Python 进程内信号/事件分发系统。<br>itsdangerous – 一系列辅助工具用来将可信的数据传入不可信的环境。<br>pluginbase – 一个简单但是非常灵活的 Python 插件系统。<br>Pychievements – 一个用来创建和追踪成就的 Python 框架。<br>Tryton – 一个通用商务框架。</p><p>82、算法和设计模式：Python 实现的算法和设计模式。<br>algorithms -一个 Python 算法模块<br>python-patterns – Python 设计模式的集合。<br>sortedcontainers – 快速，纯 Python 实现的SortedList，SortedDict 和 SortedSet 类型。</p><p>83、编辑器插件：编辑器和 IDE 的插件。<br>83.1 Emacs：<br>Elpy – Emacs Python 开发环境。<br>83.2 Sublime Text：<br>SublimeJEDI – 一个 Sublime Text 插件，用来使用超赞的自动补全库 Jedi。<br>Anaconda – Anaconda 把你的 Sublime Text 3 变成一个功能齐全的 Python IDE。<br>83.3 Vim：<br>YouCompleteMe – 引入基于 Jedi 的 Python 自动补全引擎。<br>Jedi-vim – 绑定 Vim 和 Jedi 自动补全库对 Python 进行自动补全。<br>Python-mode – 将 Vim 变成 Python IDE 的一款多合一插件。<br>83.4 Visual Studio：<br>PTVS – Visual Studio 的 Python 工具</p><p>84、集成开发环境：流行的 Python 集成开发环境。<br>PyCharm – 商业化的 Python IDE ，由 JetBrains 开发。也有免费的社区版提供。<br>LiClipse – 基于 Eclipse 的免费多语言 IDE 。使用 PyDev 来支持 Python 。<br>Spyder – 开源 Python IDE。</p><p>85、服务：在线工具和简化开发的 API 。<br>85.1 持续集成：参见: awesome-CIandCD.<br>Travis CI – 一个流行的工具，为你的开源和私人项目提供持续集成服务。(仅支持 GitHub)<br>CircleCI – 一个持续集成工具，可以非常快速的进行并行测试。 (仅支持 GitHub)<br>Vexor CI – 一个为私人 app 提供持续集成的工具，支持按分钟付费。<br>Wercker – 基于 Docker 平台，用来构建和部署微服务。<br>85.2 代码质量：<br>Codacy – 自动化代码审查，更加快速的发布高质量代码。对于开源项目是免费的。<br>QuantifiedCode – 一个数据驱动、自动、持续的代码审查工具。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1、环境管理：管理-Python-版本和环境的工具。&quot;&gt;&lt;a href=&quot;#1、环境管理：管理-Python-版本和环境的工具。&quot; class=&quot;headerlink&quot; title=&quot;1、环境管理：管理 Python 版本和环境的工具。&quot;&gt;&lt;/a&gt;1、环境管理：管
      
    
    </summary>
    
      <category term="python" scheme="https://moonclearner.cn/categories/python/"/>
    
    
      <category term="python" scheme="https://moonclearner.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>mysql learning note</title>
    <link href="https://moonclearner.cn/databases/mysql/notes.html"/>
    <id>https://moonclearner.cn/databases/mysql/notes.html</id>
    <published>2020-01-07T07:42:46.090Z</published>
    <updated>2020-01-07T07:42:46.090Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mysql-learning-note"><a href="#mysql-learning-note" class="headerlink" title="mysql learning note"></a>mysql learning note</h1><h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><p>查询原因：</p><ul><li>没有命中索引</li><li>没有分页处理</li></ul><h3 id="最大数据量"><a href="#最大数据量" class="headerlink" title="最大数据量"></a>最大数据量</h3><p>MySQL没有限制单位最大记录数，其取决于os以及文件系统对单文件最大的限制</p><h3 id="最大并发数"><a href="#最大并发数" class="headerlink" title="最大并发数"></a>最大并发数</h3><p>由maxconnections和maxuserconnections决定</p><p>maxconnections是指MySQL实例的最大连接数，上限值是16384，maxuserconnections是指每个数据库用户的最大连接数</p><p>MySQL会为每个连接提供缓冲区，意味着消耗更多的内存。如果连接数设置太高硬件吃不消，太低又不能充分利用硬件。一般要求两者比值超过10%，计算方法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">max_used_connections / max_connections * 100% = 3/100 *100% ≈ 3%</span><br></pre></td></tr></table></figure></p><p>查看最大连接数与响应最大连接数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">show variables like &apos;%max_connections%&apos;;</span><br><span class="line">show variables like &apos;%max_user_connections%&apos;;</span><br></pre></td></tr></table></figure></p><p>在配置文件my.cnf中修改最大连接数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]max_connections = 100max_used_connections = 20</span><br></pre></td></tr></table></figure></p><h3 id="查询耗时0-5秒"><a href="#查询耗时0-5秒" class="headerlink" title="查询耗时0.5秒"></a>查询耗时0.5秒</h3><p>建议将单次查询耗时控制在0.5秒以内，0.5秒是个经验值，源于用户体验的3秒原则 。如果用户的操作3秒内没有响应，将会厌烦甚至退出。响应时间=客户端UI渲染耗时+网络请求耗时+应用程序处理耗时+查询数据库耗时，0.5秒就是留给数据库1/6的处理时间</p><h3 id="实施原则"><a href="#实施原则" class="headerlink" title="实施原则"></a>实施原则</h3><p>相比NoSQL数据库，MySQL容量小并发低、SQL约束太多。应用程序扩容比数据库要容易得多，所以实施原则是 <strong>数据库少干活，应用程序多干活</strong></p><ul><li>充分利用但不滥用索引，须知索引也消耗磁盘和CPU。</li><li>不推荐使用数据库函数格式化数据，交给应用程序处理。</li><li>不推荐使用外键约束，用应用程序保证数据准确性。</li><li>写多读少的场景，不推荐使用唯一索引，用应用程序保证唯一性。</li><li>适当冗余字段，尝试创建中间表，用应用程序计算中间结果，用空间换时间。</li><li>不允许执行极度耗时的事务，配合应用程序拆分成更小的事务。</li><li>预估重要数据表（比如订单表）的负载和数据增长态势，提前优化。</li></ul><h2 id="表设计"><a href="#表设计" class="headerlink" title="表设计"></a>表设计</h2><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p><strong>数据类型的选择原则：更简单或者占用空间更小</strong></p><ul><li>如果长度能够满足，整型尽量使用tinyint、smallint、medium_int而非int</li><li>如果字符串长度确定，采用char类型</li><li>如果varchar能够满足，不采用text类型</li><li>精度要求较高的使用decimal类型，也可以使用BIGINT，比如精确两位小数就乘以100后保存</li><li>尽量采用timestamp而非datetime</li></ul><table><thead><tr><th>类型</th><th>占据字节</th><th>描述</th></tr></thead><tbody><tr><td>datetime</td><td>8个字节</td><td>‘1000-01-01 00:00:00.000000’ to ‘9999-12-31 23:59:59.999999</td></tr><tr><td>timestamp</td><td>4字节</td><td>‘1970-01-01 00:00:01.000000’ to ‘2038-01-19 03:14:07.999999’</td></tr></tbody></table><h3 id="avoid-null-value"><a href="#avoid-null-value" class="headerlink" title="avoid null value"></a>avoid null value</h3><p>MySQL中字段为NULL时依然占用空间，会使索引、索引统计更加复杂。从NULL值更新到非NULL无法做到原地更新，容易发生索引分裂影响性能。尽可能将NULL值用有意义的值代替，也能避免SQL语句里面包含 is not null的判断</p><h3 id="text-type-Optimization"><a href="#text-type-Optimization" class="headerlink" title="text type Optimization"></a>text type Optimization</h3><p>由于text字段储存大量数据，表容量会很早涨上去，影响其他字段的查询性能。建议抽取出来放在子表里，用业务主键关联</p><h2 id="引索optimization"><a href="#引索optimization" class="headerlink" title="引索optimization"></a>引索optimization</h2><h3 id="index-分类"><a href="#index-分类" class="headerlink" title="index 分类"></a>index 分类</h3><ul><li>普通索引：最基本的索引。</li><li>组合索引：多个字段上建立的索引，能够加速复合查询条件的检索。</li><li>唯一索引：与普通索引类似，但索引列的值必须唯一，允许有空值。</li><li>组合唯一索引：列值的组合必须唯一。</li><li>主键索引：特殊的唯一索引，用于唯一标识数据表中的某一条记录，不允许有空值，一般用primary key约束。</li><li>全文索引：用于海量文本的查询，MySQL5.6之后的InnoDB和MyISAM均支持全文索引。由于查询精度以及扩展性不佳，更多的企业选择Elasticsearch。</li></ul><h3 id="index-optimization"><a href="#index-optimization" class="headerlink" title="index optimization"></a>index optimization</h3><ul><li>分页查询很重要，如果查询数据量超过30%，MYSQL不会使用索引。</li><li>单表索引数不超过5个、单个索引字段数不超过5个。</li><li>字符串可使用前缀索引，前缀长度控制在5-8个字符。</li><li>字段唯一性太低，增加索引没有意义，如：是否删除、性别。</li><li>合理使用覆盖索引，如下所示：<br>  select loginname, nickname from member where login_name = ?<br>  loginname, nickname两个字段建立组合索引，比login_name简单索引要更快</li></ul><h2 id="sql优化"><a href="#sql优化" class="headerlink" title="sql优化"></a>sql优化</h2><h3 id="batch"><a href="#batch" class="headerlink" title="batch"></a>batch</h3><p>当一条sql语句会处理整个表的数据的时候，有可能会堵塞其他sql运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update status=0 FROMcoupon WHERE expire_date &lt;= #&#123;currentDate&#125; and status=1;</span><br></pre></td></tr></table></figure></p><p>因此可以使用分批操作</p><h4 id="optimization"><a href="#optimization" class="headerlink" title="optimization"></a>optimization</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">int pageNo = 1;</span><br><span class="line">int PAGE_SIZE = 100;</span><br><span class="line">while(true) &#123;</span><br><span class="line">    List&lt;Integer&gt; batchIdList = queryList(&apos;select id FROM `coupon` WHERE expire_date &lt;= #&#123;currentDate&#125; and status = 1 limit #&#123;(pageNo-1) * PAGE_SIZE&#125;,#&#123;PAGE_SIZE&#125;&apos;);</span><br><span class="line">    if (CollectionUtils.isEmpty(batchIdList)) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    update(&apos;update status = 0 FROM `coupon` where status = 1 and id in #&#123;batchIdList&#125;&apos;)</span><br><span class="line">    pageNo ++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="operation-lt-gt-optimization"><a href="#operation-lt-gt-optimization" class="headerlink" title="operation &lt;&gt; optimization"></a>operation &lt;&gt; optimization</h3><p>通常&lt;&gt;操作符无法使用索引，举例如下，查询金额不为100元的订单：select id from orders where amount != 100;如果金额为100的订单极少，这种数据分布严重不均的情况下，有可能使用索引。鉴于这种不确定性，采用union聚合搜索结果，改写方法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(select id from orders where amount &gt; 100) union all(select id from orders where amount &lt; 100 and amount &gt; 0)</span><br></pre></td></tr></table></figure></p><h3 id="operation-or-optimization"><a href="#operation-or-optimization" class="headerlink" title="operation or optimization"></a>operation or optimization</h3><p>在Innodb引擎下or无法使用组合索引，比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select id，product_name from orders where mobile_no = &apos;13421800407&apos; or user_id = 100;</span><br></pre></td></tr></table></figure></p><p>OR无法命中mobileno + userid的组合索引，可采用union，如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(select id，product_name from orders where mobile_no = &apos;13421800407&apos;) union(select id，product_name from orders where user_id = 100);</span><br></pre></td></tr></table></figure></p><p>此时id和product_name字段都有索引，查询才最高效。</p><h3 id="operation-in-optimization"><a href="#operation-in-optimization" class="headerlink" title="operation in optimization"></a>operation in optimization</h3><ul><li>IN适合主表大子表小，EXIST适合主表小子表大。由于查询优化器的不断升级，很多场景这两者性能差不多一样了。</li><li>尝试改为join查询，举例如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select id from orders where user_id in (select id from user where level = &apos;VIP&apos;);</span><br><span class="line">采用JOIN如下所示：</span><br><span class="line">select o.id from orders o left join user u on o.user_id = u.id where u.level = &apos;VIP&apos;;</span><br></pre></td></tr></table></figure></li></ul><h3 id="不做列运算"><a href="#不做列运算" class="headerlink" title="不做列运算"></a>不做列运算</h3><p>通常在查询条件列运算会导致索引失效，如下所示：查询当日订单<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select id from order where date_format(create_time，&apos;%Y-%m-%d&apos;) = &apos;2019-07-01&apos;;</span><br></pre></td></tr></table></figure></p><p>date_format函数会导致这个查询无法使用索引，改写后：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select id from order where create_time between &apos;2019-07-01 00:00:00&apos; and &apos;2019-07-01 23:59:59&apos;;</span><br></pre></td></tr></table></figure></p><h3 id="avoid-Select-all"><a href="#avoid-Select-all" class="headerlink" title="avoid Select all"></a>avoid Select all</h3><p>如果不查询表中所有的列，避免使用 SELECT *，它会进行全表扫描，不能有效利用索引。</p><h3 id="operation-like-optimization"><a href="#operation-like-optimization" class="headerlink" title="operation like optimization"></a>operation like optimization</h3><p>like用于模糊查询，举个例子（field已建立索引）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT column FROM table WHERE field like &apos;%keyword%&apos;;</span><br></pre></td></tr></table></figure></p><p>这个查询未命中索引，换成下面的写法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT column FROM table WHERE field like &apos;keyword%&apos;;</span><br></pre></td></tr></table></figure></p><p>去除了前面的%查询将会命中索引，但是产品经理一定要前后模糊匹配呢？全文索引fulltext可以尝试一下，但Elasticsearch才是终极武器。</p><h3 id="operation-Join-optimization"><a href="#operation-Join-optimization" class="headerlink" title="operation Join optimization"></a>operation Join optimization</h3><p>join的实现是采用Nested Loop Join算法，就是通过驱动表的结果集作为基础数据，通过该结数据作为过滤条件到下一个表中循环查询数据，然后合并结果。如果有多个join，则将前面的结果集作为循环数据，再次到后一个表中查询数据。</p><ul><li>驱动表和被驱动表尽可能增加查询条件，满足ON的条件而少用Where，用小结果集驱动大结果集。</li><li>被驱动表的join字段上加上索引，无法建立索引的时候，设置足够的Join Buffer Size。</li><li>禁止join连接三个以上的表，尝试增加冗余字段。</li></ul><h3 id="oper-Limit-optimization"><a href="#oper-Limit-optimization" class="headerlink" title="oper Limit optimization"></a>oper Limit optimization</h3><p>limit用于分页查询时越往后翻性能越差，解决的原则：缩小扫描范围 ，如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from orders order by id desc limit 100000,10 耗时0.4秒</span><br><span class="line">select * from orders order by id desc limit 1000000,10耗时5.2秒</span><br></pre></td></tr></table></figure></p><p>先筛选出ID缩小查询范围，写法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from orders where id &gt; (select id from orders order by id desc  limit 1000000, 1) order by id desc limit 0,10耗时0.5秒</span><br></pre></td></tr></table></figure></p><p>如果查询条件仅有主键ID，写法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select id from orders where id between 1000000 and 1000010 order by id desc耗时0.3秒</span><br></pre></td></tr></table></figure></p><p>如果以上方案依然很慢呢？只好用游标了，感兴趣的朋友阅读JDBC使用游标实现分页查询的方法</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;mysql-learning-note&quot;&gt;&lt;a href=&quot;#mysql-learning-note&quot; class=&quot;headerlink&quot; title=&quot;mysql learning note&quot;&gt;&lt;/a&gt;mysql learning note&lt;/h1&gt;&lt;h2 i
      
    
    </summary>
    
      <category term="mysql" scheme="https://moonclearner.cn/categories/mysql/"/>
    
    
      <category term="mysql" scheme="https://moonclearner.cn/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu best software</title>
    <link href="https://moonclearner.cn/ubuntu/best_software.html"/>
    <id>https://moonclearner.cn/ubuntu/best_software.html</id>
    <published>2020-01-06T03:12:10.594Z</published>
    <updated>2020-01-06T03:12:10.594Z</updated>
    
    <content type="html"><![CDATA[<h2 id="cpu-内存-网速显示"><a href="#cpu-内存-网速显示" class="headerlink" title="cpu 内存 网速显示"></a>cpu 内存 网速显示</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sudo add-apt-repository ppa:fossfreedom/indicator-sysmonitor</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install indicator-sysmonitor</span><br><span class="line"></span><br><span class="line">indicator-sysmonitor</span><br></pre></td></tr></table></figure><h2 id="远程连接windos"><a href="#远程连接windos" class="headerlink" title="远程连接windos"></a>远程连接windos</h2><ul><li>rdesktop</li><li>teamview</li></ul><h2 id="百度云有linux版本"><a href="#百度云有linux版本" class="headerlink" title="百度云有linux版本"></a>百度云有linux版本</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;cpu-内存-网速显示&quot;&gt;&lt;a href=&quot;#cpu-内存-网速显示&quot; class=&quot;headerlink&quot; title=&quot;cpu 内存 网速显示&quot;&gt;&lt;/a&gt;cpu 内存 网速显示&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;tabl
      
    
    </summary>
    
      <category term="tool" scheme="https://moonclearner.cn/categories/tool/"/>
    
    
      <category term="ubuntu" scheme="https://moonclearner.cn/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>sogou input method install</title>
    <link href="https://moonclearner.cn/ubuntu/sogouInputMethod.html"/>
    <id>https://moonclearner.cn/ubuntu/sogouInputMethod.html</id>
    <published>2020-01-06T02:33:52.491Z</published>
    <updated>2020-01-06T02:33:52.491Z</updated>
    
    <content type="html"><![CDATA[<h1 id="搜狗输入法安装"><a href="#搜狗输入法安装" class="headerlink" title="搜狗输入法安装"></a>搜狗输入法安装</h1><ul><li>先添加源：sudo add-apt-repository ppa:fcitx-team/nightly</li><li>添加源之后更新一下：sudo apt-get update &amp;&amp; apt-get upgrade</li><li>开始安装fcitx: sudo apt-get install fcitx  （可能系统已安装好），如果出现错误提示，就：apt-get -f install,然后再sudo apt-get install fcitx</li><li>安装fcitx的配置工具：sudo apt-get install fcitx-config-gtk</li><li>安装fcitx的table-all:sudo apt-get install fcitx-table-all</li><li>安装im-switch工具：sudo apt-get install im-switch</li><li><a href="https://pinyin.sogou.com/linux/?r=pinyin" target="_blank" rel="noopener">安装包</a> 下载安装包，并且安装sudo dpkg -i sogoupinyin_2.2.0.0108_amd64.deb ，如果出现错误提示，就：apt-get -f install，再安装</li><li>到system settings-&gt;language support,将键盘输入法设置为fcitx</li><li>运行fcitx-configure 设置输入法，如果没有发现搜狗输入法，重启一次电脑</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;搜狗输入法安装&quot;&gt;&lt;a href=&quot;#搜狗输入法安装&quot; class=&quot;headerlink&quot; title=&quot;搜狗输入法安装&quot;&gt;&lt;/a&gt;搜狗输入法安装&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;先添加源：sudo add-apt-repository ppa:fcitx-team/
      
    
    </summary>
    
      <category term="ubuntu" scheme="https://moonclearner.cn/categories/ubuntu/"/>
    
    
      <category term="inputMethod" scheme="https://moonclearner.cn/tags/inputMethod/"/>
    
  </entry>
  
  <entry>
    <title>license</title>
    <link href="https://moonclearner.cn/sublimeText/sublimeText_license.html"/>
    <id>https://moonclearner.cn/sublimeText/sublimeText_license.html</id>
    <published>2019-12-31T05:48:28.109Z</published>
    <updated>2019-12-31T05:48:02.792Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sublime-text3-license"><a href="#sublime-text3-license" class="headerlink" title="sublime text3 license"></a>sublime text3 license</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;sublime-text3-license&quot;&gt;&lt;a href=&quot;#sublime-text3-license&quot; class=&quot;headerlink&quot; title=&quot;sublime text3 license&quot;&gt;&lt;/a&gt;sublime text3 license&lt;/
      
    
    </summary>
    
      <category term="sublimeText" scheme="https://moonclearner.cn/categories/sublimeText/"/>
    
    
      <category term="license" scheme="https://moonclearner.cn/tags/license/"/>
    
      <category term="sublimeText" scheme="https://moonclearner.cn/tags/sublimeText/"/>
    
  </entry>
  
  <entry>
    <title>postgresql Learning resource map</title>
    <link href="https://moonclearner.cn/databases/postgresql/postgresqlLearningResource.html"/>
    <id>https://moonclearner.cn/databases/postgresql/postgresqlLearningResource.html</id>
    <published>2019-12-30T10:40:17.433Z</published>
    <updated>2019-12-30T10:40:17.433Z</updated>
    
    <content type="html"><![CDATA[<h1 id="postgresql-Learning-resource-map"><a href="#postgresql-Learning-resource-map" class="headerlink" title="postgresql Learning resource map"></a>postgresql Learning resource map</h1><p>引用<a href="https://github.com/ty4z2008/Qix" target="_blank" rel="noopener">ty4z2008</a></p><h2 id="PostgreSQL-数据库-资料"><a href="#PostgreSQL-数据库-资料" class="headerlink" title="PostgreSQL(数据库)资料"></a>PostgreSQL(数据库)资料</h2><p><img src="https://wiki.postgresql.org/images/3/30/PostgreSQL_logo.3colors.120x120.png" alt="PostgreSQL"></p><p>About:<a href="http://www.postgresql.org/about/" target="_blank" rel="noopener">PostgreSQL About</a></p><p><a href="#pg_kernel">《PostgreSQL 源码分析系列》</a></p><ul><li><a name="pg_kernel"> PostgreSQL 源码分析系列</a></li></ul><p>介绍:PostgreSQL 源码分析系列文章</p><ul><li><a href="http://www.zhangxiaojian.name/?p=447" target="_blank" rel="noopener">《PG 内存上下文》</a></li></ul><p>介绍：PG 内存上下文,<a href="https://github.com/zhangxiaojian/memoryContext" target="_blank" rel="noopener">code</a></p><ul><li><a href="http://wiki.postgresql.org/wiki/Pgsrcstructure" target="_blank" rel="noopener">《PostgreSQL及其代码的结构》</a></li></ul><p>介绍:PostgreSQL及其代码的结构</p><ul><li><a href="http://www.postgresql.org/files/developer/tour.pdf" target="_blank" rel="noopener">《A Tour of PostgreSQL Internals》</a></li></ul><p>介绍:PostgreSQL内部的概览,可以结合上面的pg代码结构来阅读</p><ul><li><a href="http://www.zhangxiaojian.name/?p=317" target="_blank" rel="noopener">《PostgreSQL 中的 Json —从使用到源码》</a></li></ul><p>介绍：PostgreSQL 中的 Json —从使用到源码</p><ul><li><a href="http://mp.weixin.qq.com/s?__biz=MzIwNzEzNDkxNQ==&amp;mid=400885298&amp;idx=1&amp;sn=76df79eff99131cf6e64991b1629e8c9&amp;scene=7#wechat_redirect" target="_blank" rel="noopener">《PostgreSQL锁机制分析》</a></li></ul><p>介绍：PostgreSQL锁机制分析,<a href="http://mp.weixin.qq.com/s?__biz=MzIwNzEzNDkxNQ==&amp;mid=400897914&amp;idx=1&amp;sn=e83f15ba1b62abfd9e01cd7b08b87cc7&amp;scene=4#wechat_redirect" target="_blank" rel="noopener">第二部分</a></p><ul><li><a href="http://blog.chinaunix.net/uid-24774106-id-3764994.html" target="_blank" rel="noopener">《FSM》</a></li></ul><p>介绍：PostgreSQL源码分析之FSM</p><ul><li><a href="http://blog.chinaunix.net/uid-24774106-id-3764606.html" target="_blank" rel="noopener">《page》</a></li></ul><p>介绍：PostgreSQL源码分析之page</p><ul><li><a href="http://blog.chinaunix.net/uid-24774106-id-3761861.html" target="_blank" rel="noopener">《shared buffer状态信息及性能测量 》</a></li></ul><p>介绍：PostgreSQL源码分析之shared buffer状态信息及性能测量,推荐<a href="http://blog.chinaunix.net/uid-24774106-id-3761272.html" target="_blank" rel="noopener">shared buffer的分配与替换</a>,<a href="http://blog.chinaunix.net/uid-24774106-id-3761123.html" target="_blank" rel="noopener">shared buffer与磁盘文件 </a>,<a href="http://blog.chinaunix.net/uid-24774106-id-3757916.html" target="_blank" rel="noopener">database和table 与磁盘文件的对应</a></p><ul><li><a href="http://www.cnblogs.com/gaojian/p/3261568.html" target="_blank" rel="noopener">《PostgreSQL内部结构与源代码研究索引页》</a></li></ul><p>介绍：文章包括pg_stat_statements源代码分析,PostgreSQL的hook机制初步学习,EDB*Plus的client_encoding问题,PostgreSQL的索引膨胀,libpq 与 fe-misc.c,libpq 练习的入口点,Autovacuum 的运行限制,autovacuum 与 vacuum full,autoanalyze 的注意事项,backuplabel file 初步学习,HOT（Heap-Only Tuples）,Checkpoint 发生的时机,checkpoint 活动,pg_buffercache 代码研究,内存结构图示,内存使用增长观察,使用cgroups来控制内存使用,调整内存与IO的参数说明,MVCC图示,ListenSocket 的研究</p><ul><li><a href="http://blog.csdn.net/huguangshanse00/article/details/40479995" target="_blank" rel="noopener">《CreateLockFile》</a></li></ul><p>介绍：PostgreSQL CreateLockFile分析</p><ul><li><a href="http://blog.csdn.net/li_shugan1/article/details/7975571" target="_blank" rel="noopener">《动态Hash》</a></li></ul><p>介绍：动态Hash</p><ul><li><a href="http://momjian.us/main/presentations/internals.html" target="_blank" rel="noopener">《Postgres Internals Presentations》</a></li></ul><p>介绍: PG内部机制分析.</p><ul><li><a href="http://my.oschina.net/Suregogo/blog/550201" target="_blank" rel="noopener">《为PostgreSQL添加插件》</a></li></ul><p>介绍: 利用pg的hook机制为pg添加插件.</p><ul><li><a href="http://blog.163.com/digoal@126/blog/static/163877040201612374931160/" target="_blank" rel="noopener">《PostgreSQL 优化器逻辑推理能力》</a></li></ul><p>介绍: 源码解析.</p><ul><li><a href="http://blog.csdn.net/huguangshanse00/article/details/37045847" target="_blank" rel="noopener">《postgres 源码分析之 insert(1)》</a></li></ul><p>介绍: Insert分析.</p><ul><li><a href="http://7xtcs7.com1.z0.glb.clouddn.com/PostgreSQL%E6%9F%A5%E8%AF%A2%E5%A4%84%E7%90%86%E9%83%A8%E5%88%86%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.pdf" target="_blank" rel="noopener">《PostgreSQL查询处理部分源码分析》</a></li></ul><p>介绍: PostgreSQL查询处理部分源码分析.</p><ul><li><a href="http://www.docin.com/p-271989068.html" target="_blank" rel="noopener">《PostgreSQL查询处理部分源码分析》</a></li></ul><p>介绍:  PostgreSQL查询处理部分源码分析.</p><ul><li><a href="https://madusudanan.com/blog/understanding-postgres-caching-in-depth/" target="_blank" rel="noopener">《Understanding caching in Postgres》</a></li></ul><p>介绍:Postgres缓存机制分析.</p><ul><li><a href="https://blog.codeship.com/discovering-computer-science-behind-postgres-indexes/" target="_blank" rel="noopener">《Discovering the Computer Science Behind Postgres Indexes》</a></li></ul><p>介绍: Postgres索引分析,推荐先阅读<a href="http://www.csd.uoc.gr/~hy460/pdf/p650-lehman.pdf" target="_blank" rel="noopener">Efficient Locking for Concurrent Operations on B-Trees</a>.</p><ul><li><a href="http://research.cs.queensu.ca/~cordy/Papers/GC_SCAM10_ConceptCount.pdf" target="_blank" rel="noopener">《Estimating the Optimal Number of Latent Concepts in Source Code Analysis》</a></li></ul><p>介绍:Estimating the Optimal Number of Latent Concepts in Source Code Analysis.</p><ul><li><a href="https://wiki.postgresql.org/wiki/Pgkernel" target="_blank" rel="noopener">《Pgkernel》</a></li></ul><p>介绍:Postgres内核分析系列文章</p><ul><li><a href="http://www.postgresql.org/docs/manuals/" target="_blank" rel="noopener">《PostgreSQL Documentation》</a></li></ul><p>介绍：PostgreSQL官方文档主页</p><ul><li><a href="http://wenku.it168.com/org/145" target="_blank" rel="noopener">《PG技术沙龙ppt》</a></li></ul><p>介绍：2013年4月PG技术沙龙PPT</p><ul><li><a href="http://postgres.cn/docs/9.4/" target="_blank" rel="noopener">《PG9.4.4中文翻译文档》</a></li></ul><p>介绍：PG9.4.4中文翻译文档</p><ul><li><a href="http://codex.cs.yale.edu/avi/db-book/" target="_blank" rel="noopener">《Database System Concepts Sixth Edition》</a></li></ul><p>介绍：数据库系统概念(第六版)</p><ul><li><a href="http://download.csdn.net/detail/lusizeng/8679303" target="_blank" rel="noopener">《PostgreSQL从菜鸟到专家(中译稿 by 洞庭湖的泥鳅)》</a></li></ul><p>介绍：这篇文档是国内的一线postgreSQL专家所翻译。很经典</p><ul><li><a href="http://www.pg-versus-ms.com/" target="_blank" rel="noopener">《PostgreSQL vs. MS SQL Server》</a></li></ul><p>介绍：PostgreSQL与 MS SQL Server的对比,<a href="http://www.oschina.net/translate/postgresql-vs-ms-sql-server" target="_blank" rel="noopener">中文版</a></p><ul><li><a href="http://blog.163.com/digoal@126/blog/static/16387704020141229159715/" target="_blank" rel="noopener">《PostgreSQL 30天 培训视频》</a></li></ul><p>介绍：作者<a href="http://blog.163.com/digoal@126/" target="_blank" rel="noopener">德哥@Digoal</a>从事pg截止目前大概有7-8年，长期活跃在国内的pg社区。这套PostgreSQL 30天 培训视频包含了SQL基础,备份恢复,HA,服务端编程,大数据,内核,应用案例等，非常适合新手</p><ul><li><a href="http://blog.163.com/digoal@126/blog/static/163877040201172183022203/" target="_blank" rel="noopener">《PostgreSQL爱好者的参考资料推荐》</a></li></ul><p>介绍：PostgreSQL爱好者的参考资料推荐</p><ul><li><a href="http://www.postgresqlstudio.org/" target="_blank" rel="noopener">《PostgreSQL Studio》</a></li></ul><p>介绍：PostgreSQL Studio 是开源的 PostgreSQL 数据库的 Web 接口。可以让你直接在浏览器上编辑数据库代码，浏览数据库模型和运行 SQL 语句。这是一个数据库管理工具，侧重于开发。</p><ul><li><a href="http://code.google.com/p/pqc/" target="_blank" rel="noopener">《PostgreSQL Query Cache》</a></li></ul><p>介绍：PostgreSQL Query Cache 一个新的开源软件，用来极速提升 PostgreSQL 数据库的查询性能，通过缓存查询结果，可提升 10 ~ 100 倍。</p><ul><li><a href="http://python.projects.pgfoundry.org/" target="_blank" rel="noopener">《py-postgresql》</a></li></ul><p>介绍：Python的PostgreSQL驱动。</p><ul><li><a href="http://www.postgres-xl.org/" target="_blank" rel="noopener">《Postgres-XL》</a></li></ul><p>介绍： 一个构建PostgreSQL集群开源软件,Postgres-XL is a PostgreSQL-based scale-out cluster that handles both OLTP write intensive workloads as well as OLAP/BI type of workloads thanks to MPP parallelism.。</p><ul><li><a href="http://sourceforge.net/projects/pgdesigner/" target="_blank" rel="noopener">《pgDesigner》</a></li></ul><p>介绍：pgDesigner 是一个为PostgreSQL数据库设计的建模工具.仅支持Linux。</p><ul><li><a href="https://github.com/sosedoff/pgweb/" target="_blank" rel="noopener">《pgweb》</a></li></ul><p>介绍：一个采用 Go 语言开发的基于 Web 的 PostgreSQL 管理系统。</p><ul><li><a href="http://www.cybertec.at/postgresql_produkte/pgwatch-cybertec-enterprise-postgresql-monitor/" target="_blank" rel="noopener">《pgwatch》</a></li></ul><p>介绍：一个简单易用的 PostgreSQL 的监控工具，支持 PostgreSQL 9.0 以及更新的版本。</p><ul><li><a href="http://www.pgpool.net/mediawiki/index.php/Main_Page" target="_blank" rel="noopener">《pgpool-II》</a></li></ul><p>介绍：pgpool-II 是运行于 PostgreSQL 数据库服务器和客户端之间的一个中间件，提供的功能包括：连接池、复制、负载均衡、客户端限制和并行查询等。</p><ul><li><a href="http://pgcluu.darold.net/" target="_blank" rel="noopener">《pgCluu》</a></li></ul><p>介绍：pgCluu 是一个对 PostgreSQL 集群性能进行完整审计的工具，该工具分为两部分：</p><ol><li>collector 收集器用于从 PostgreSQL 集群中获取统计数据，使用 psql 和 sar 工具</li><li>grapher 关于生成 HTML 报表和图表 数据库服务器和客户端之间的一个中间件，提供的功能包括：连接池、复制、负载均衡、客户端限制和并行查询等。</li></ol><ul><li><a href="https://github.com/citusdata/cstore_fdw" target="_blank" rel="noopener">《cstore_fdw》</a></li></ul><p>介绍：cstore_fdw 实现了 PostgreSQL 数据库的柱状存储，用于对批量加载的数据进行分析的场景。</p><ul><li><a href="http://www.pgbarman.org/" target="_blank" rel="noopener">《Barman for PostgreSQL》</a></li></ul><p>介绍：Barman (备份和恢复管理器) for PostgreSQL 是 PostgreSQL 数据库服务器的灾难恢复工具，允许远程备份多个服务器，帮助 DBA 在数据恢复阶段的关键工作。</p><ul><li><a href="http://www.pgbarman.org/" target="_blank" rel="noopener">《pgFouine》</a></li></ul><p>介绍：pgFouine 是一个 PostgreSQL 的日志分析软件，可以让你对 PostgreSQL 数据库的运行状态有个清晰的了解，同时对一些慢查询、使用频率最高的查询、错误生成相应的报表和图表。</p><ul><li><a href="http://news.dice.com/2014/11/24/substitute-postgresql-nosql-needs/" target="_blank" rel="noopener">《Substitute PostgreSQL for Your NoSQL Needs》</a></li></ul><p>介绍：用PostgreSQL替换你的NoSQL。</p><ul><li><a href="http://woss.name/articles/representing-trees-in-postgresql/" target="_blank" rel="noopener">《Representing Trees in PostgreSQL》</a></li></ul><p>介绍：Representing Trees in PostgreSQL</p><ul><li><a href="http://michael.otacoo.com/" target="_blank" rel="noopener">《Michael Paquier》</a></li></ul><p>介绍：推荐一个博客，作者是一位日本的开发者。但是文章写的挺好的。是英文！！</p><ul><li><a href="http://omniti.com/seeds/writable-ctes-improve-performance" target="_blank" rel="noopener">《Using Writeable CTEs to Improve Performance in PostgreSQL 》</a></li></ul><p>介绍：使用CTEs来提升你的数据库性能</p><ul><li><a href="http://chrisdone.com/posts/postgresql-pagination" target="_blank" rel="noopener">《Fast pagination on PostgreSQL》</a></li></ul><p>介绍：PostgreSQL的快速分页</p><ul><li><a href="https://www.florian-schlachter.de/post/upgrading-postgres-9-3-9-4/" target="_blank" rel="noopener">《Upgrading your PostgreSQL cluster from 9.3 to 9.4 》</a></li></ul><p>介绍：把你的PostgreSQL集群从9.3升级到9.4.</p><ul><li><a href="http://www.citusdata.com/blog/86-making-postgresql-scale-hadoop-style" target="_blank" rel="noopener">《Making PostgreSQL scale Hadoop-style: Benchmark numbers》</a></li></ul><p>介绍：Making PostgreSQL scale Hadoop-style: Benchmark numbers</p><ul><li><a href="http://engineroom.trackmaven.com/blog/so-you-want-another-postgresql-database-part-1" target="_blank" rel="noopener">《So You Want Another PostgreSQL Database？》</a></li></ul><p>介绍：还有<a href="http://engineroom.trackmaven.com/blog/so-you-want-another-postgresql-database-part-2/" target="_blank" rel="noopener">part2</a></p><ul><li><a href="http://rob.conery.io/2012/07/19/postgresql-rising/" target="_blank" rel="noopener">《PostgreSQL Rising》</a></li></ul><p>介绍：PostgreSQL的成长</p><ul><li><a href="http://rny.io/nginx/postgresql/2013/07/26/simple-api-with-nginx-and-postgresql.html" target="_blank" rel="noopener">《Simple API with Nginx and PostgreSQL》</a></li></ul><p>介绍：如何建一个简单的REST API 仅仅使用 Nginx 和 PostgreSQL.如果不理解REST API这里推荐<a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="noopener">RESTful API 设计指南</a>、<a href="http://www.ruanyifeng.com/blog/2011/09/restful.html" target="_blank" rel="noopener">理解RESTful架构</a></p><ul><li><a href="https://github.com/tetsuo/hypervault" target="_blank" rel="noopener">《hypervault》</a></li></ul><p>介绍：PostgreSQL connection manager for scalability freaks.</p><ul><li><a href="https://www.pgcon.org/2014/schedule/attachments/309_PG_as_bench_mark.pdf" target="_blank" rel="noopener">《PostgreSQL as a benchmarking tool》</a></li></ul><p>介绍：PostgreSQL as a benchmarking tool</p><ul><li><a href="http://www.pgcon.org/2014/schedule/index.en.html" target="_blank" rel="noopener">《2014年 PGcon会议paper》</a></li></ul><p>介绍：2014年 PGcon会议paper，进去之后你还可以发现往年的paper。</p><ul><li><a href="http://www.psequel.com/" target="_blank" rel="noopener">《PSequel》</a></li></ul><p>介绍： Mac OS X端的PostgreSQL图形管理工具</p><ul><li><a href="http://blog.heapanalytics.com/postgresqls-powerful-new-join-type-lateral/" target="_blank" rel="noopener">《PostgreSQL’s Powerful New Join Type:LATERAL》</a></li></ul><p>介绍： PostgreSQL’s Powerful New Join Type: LATERAL，这个类型是在9.3的版本中开始的。</p><ul><li><a href="http://momjian.us/main/writings/pgsql/hw_performance/" target="_blank" rel="noopener">《PostgreSQL Hardware Performance Tuning》</a></li></ul><p>介绍：PostgreSQL的硬件性能调优。</p><ul><li><a href="http://momjian.us/main/writings/pgsql/aw_pgsql_book/" target="_blank" rel="noopener">《PostgreSQL: Introduction and Concepts Bruce Momjian》</a></li></ul><p>介绍：入门型电子书籍,书有点老了2001年的了。此外这本书的作者还有一个<a href="http://momjian.us/main/writings/pgsql/" target="_blank" rel="noopener">资源页</a>，里面有很多的干货。作者是enterpriseDB的工程师。经典文章还有<a href="http://momjian.us/main/writings/pgsql/writing_apps.pdf" target="_blank" rel="noopener">Writing PostgreSQL Applications</a>.</p><ul><li><a href="http://blogs.enterprisedb.com/2014/12/03/compiling-plv8-with-postgres-plus-advanced-server-2/" target="_blank" rel="noopener">《Compiling PLV8 with Postgres Plus Advanced Server》</a></li></ul><p>介绍：<a href="https://code.google.com/p/plv8js/wiki/PLV8" target="_blank" rel="noopener">什么是PLV8？</a>,魅力就是:用js写SQL</p><ul><li><a href="https://archive.fosdem.org/2014/schedule/track/postgresql/" target="_blank" rel="noopener">《fosdem 2014年PostgreSQL议题(含视频)》</a></li></ul><p>介绍:<a href="http://en.wikipedia.org/wiki/FOSDEM" target="_blank" rel="noopener">fosdem</a>是一个开源性组织,这个只是会议的一部分，从2001年开始到目前历经13年的<a href="https://archive.fosdem.org/" target="_blank" rel="noopener">资料</a>都被保存着，如果你有需要可以自己去翻阅。干货很多，另外2015年的议题已经开始筹备了<a href="https://fosdem.org/2015/" target="_blank" rel="noopener">官方地址</a></p><p>*<a href="http://rhaas.blogspot.jp/2014/03/postgresql-now-has-logical-decoding.html" target="_blank" rel="noopener">《PostgreSQL Now Has Logical Decoding》</a></p><p>介绍：PostgreSQL Now Has Logical Decoding,此外作者也是一位enterpriseDB的工程师，他的其他<a href="http://rhaas.blogspot.jp/" target="_blank" rel="noopener">博文</a>也很精彩.</p><ul><li><a href="http://www.pgconf.us/2014/schedule/" target="_blank" rel="noopener">《美国2014年pgconf paper》</a></li></ul><p>介绍：美国2014年pgconf paper。</p><ul><li><a href="https://github.com/maxlapshin/mysql2postgres" target="_blank" rel="noopener">《mysql2postgres》</a></li></ul><p>介绍：把MySQL迁移至postgreSQL?不如试试这个工具吧</p><ul><li><a href="https://www.quora.com/What-are-the-advantages-and-disadvantages-of-using-PostgreSQL-over-MySQL" target="_blank" rel="noopener">《What are the advantages and disadvantages of using PostgreSQL over MySQL?》</a></li></ul><p>介绍：使用PG与MySQL比较有那些有点和缺点？</p><ul><li><a href="http://blog.lostpropertyhq.com/postgres-full-text-search-is-good-enough/" target="_blank" rel="noopener">《Postgres full-text search is Good Enough!》</a></li></ul><p>介绍：Postgres的全文查询其实也很棒：多语言支持，模糊查询等，这篇文章说的很详细。而且里面有很多实际例子</p><ul><li><a href="http://security.stackexchange.com/a/2536" target="_blank" rel="noopener">《PostgreSQL Security Audit》</a></li></ul><p>介绍：数据库安全问题一直是一个问题热门话题，PostgreSQL资料更是少之有少。这篇文章值得推荐。建议多多留意<a href="http://www.cvedetails.com/vulnerability-list/vendor_id-336/product_id-575/Postgresql-Postgresql.html" target="_blank" rel="noopener">postgresql security Vulnerabilities</a>、<a href="http://lwn.net/Articles/546550/" target="_blank" rel="noopener">Vulnerability handling in the PostgreSQL project</a>、<a href="https://docs.newrelic.com/docs/apm/traces/transaction-traces/security-postgresql-explain-plans" target="_blank" rel="noopener">Security for PostgreSQL explain plans</a>、<a href="http://blog.2ndquadrant.com/postgresql-row-security-overview/" target="_blank" rel="noopener">Row security in PostgreSQL</a></p><ul><li><a href="http://blog.osdba.net/525.html" target="_blank" rel="noopener">《使用oracle_fdw进行增量数据迁移的神奇方法》</a></li></ul><p>介绍:Oracle增量数据迁移到postgres方法，此外博主还有其他非常棒的文章。推荐也可以看看</p><ul><li><a href="http://blog.2ndquadrant.com/ware-yosemite-possible-postgresql-upgrade-issues-os-x-10-10/" target="_blank" rel="noopener">《Ware Yosemite? Possible PostgreSQL upgrade issues in OS X 10.10》</a></li></ul><p>介绍:PostgreSQL升级在 Yosemite出现问题？可以参考一下这里。同样的也还有其他的文章也很不错</p><ul><li><a href="http://michael.otacoo.com/" target="_blank" rel="noopener">《Open source developer based in Japan》</a></li></ul><p>介绍:如题，是日本一个开源项目博客，里面有很多postgresql的最新特性介绍(截止目前2014.12.13已有pg9.5的特性预览了)</p><ul><li><a href="http://pgxn.org/" target="_blank" rel="noopener">《PGXN: PostgreSQL Extension Network》</a></li></ul><p>介绍:一个存放PostgreSQL扩展库的资源库,很多扩展插件都能够在这个里面找到</p><ul><li><a href="http://www.slideshare.net/kaigai/gpgpu-accelerates-postgresql" target="_blank" rel="noopener">《GP GPU  Accelerates PostgreSQL》</a></li></ul><p>介绍：GPU对pg数据库的加速优化</p><ul><li><a href="http://www.slideshare.net/petereisentraut/porting-oracle-applications-to-postgresql" target="_blank" rel="noopener">《Porting Oracle Applications to PostgreSQL》</a></li></ul><p>介绍：从Oracle迁移到pg，此外该作者还有一篇迁移的<a href="http://www.slideshare.net/petereisentraut/porting-applications-from-oracle-to-postgre-sql" target="_blank" rel="noopener">ppt</a>.</p><ul><li><a href="http://www.slideshare.net/justatheory/building-and-distributing-postgresql-extensions-without-learning-c" target="_blank" rel="noopener">《Building and Distributing PostgreSQL Extensions Without Learning C》</a></li></ul><p>介绍：即使没有C，你也可以扩展pg</p><ul><li><a href="https://stripe.com/blog/pagerduty-analytics-with-pd2pg" target="_blank" rel="noopener">《PagerDuty analytics with Postgres》</a></li></ul><p>介绍：使用PagerDuty做pg分析</p><ul><li><a href="https://gocardless.com/blog/syncing-postgres-to-elasticsearch-lessons-learned/" target="_blank" rel="noopener">《Syncing Postgres to Elasticsearch: lessons learned》</a></li></ul><p>介绍：Elasticsearch是一个实时的分布式搜索和分析引擎,这篇文章是讲述作者在做pg同步到Elasticsearch的时候的一些经验之谈，如果有相关需要的建议阅读．如果不明白什么是E<a href="http://www.elasticsearch.org/" target="_blank" rel="noopener">lasticsearch</a>，可以先看看<a href="http://fuxiaopang.gitbooks.io/learnelasticsearch/" target="_blank" rel="noopener">Elasticsearch权威指南</a></p><ul><li><a href="https://github.com/itissid/pypgTAP" target="_blank" rel="noopener">《pypgTAP》</a></li></ul><p>介绍：Making Postgres coding and testing fun!</p><ul><li><a href="http://geoffrey.io/backuping-postgresql-in-docker.html" target="_blank" rel="noopener">《Backuping PostgreSQL with Docker》</a></li></ul><p>介绍：备份基于Docker的PostgreSQL数据库,国内有<a href="http://dockerone.com/article/118" target="_blank" rel="noopener">中文版</a></p><ul><li><a href="http://raghavt.blogspot.com/2011/04/postgresql-90-memory-processes.html" target="_blank" rel="noopener">《postgresql 9.0 memory processes》</a></li></ul><p>介绍：PostgreSQL 9.0 内存 &amp; 进程，感觉英语吃力的朋友可以阅读<a href="http://dreamer-yzy.github.io/2015/01/09/-%E7%BF%BB%E8%AF%91-PostgreSQL-9-0-%E5%86%85%E5%AD%98-%E8%BF%9B%E7%A8%8B/" target="_blank" rel="noopener">中文版</a></p><ul><li><a href="http://raghavt.blogspot.com/2011/04/postgresql-90-architecture.html" target="_blank" rel="noopener">《postgresql 9.0 architecture》</a></li></ul><p>介绍： 本篇文章讲述了PostgreSQL 9.0 构架，<a href="http://dreamer-yzy.github.io/2015/01/08/-%E7%BF%BB%E8%AF%91-PostgreSQL-9-0-%E6%9E%84%E6%9E%B6/" target="_blank" rel="noopener">中文版</a></p><ul><li><a href="http://raghavt.blogspot.com/2011/11/deadlocks-in-postgresql.html" target="_blank" rel="noopener">《Deadlocks in PostgreSQL》</a></li></ul><p>介绍： PostgreSQL中的死锁，<a href="http://dreamer-yzy.github.io/2015/01/14/-%E7%BF%BB%E8%AF%91-PostgreSQL%E4%B8%AD%E7%9A%84%E6%AD%BB%E9%94%81/" target="_blank" rel="noopener">中文版</a></p><ul><li><a href="http://raghavt.blogspot.com/2011/05/postgresql-90-backup-recovery.html" target="_blank" rel="noopener">《PostgreSQL 9.0 Backup &amp; Recovery》</a></li></ul><p>介绍： 本篇文章讲述了PostgreSQL 9.0 备份 &amp; 恢复架，<a href="http://dreamer-yzy.github.io/2015/01/13/-%E7%BF%BB%E8%AF%91-PostgreSQL-9-0-%E5%A4%87%E4%BB%BD-%E6%81%A2%E5%A4%8D/" target="_blank" rel="noopener">中文版</a></p><ul><li><a href="http://www.infoq.com/cn/news/2015/01/postgresql-elasticsearch" target="_blank" rel="noopener">《将数据从PostgreSQL同步到Elasticsearch的经验总结》</a></li></ul><p>介绍： 将数据从PostgreSQL同步到Elasticsearch的经验总结</p><ul><li><a href="http://www.vldb.org/pvldb/vol6/" target="_blank" rel="noopener">《数据库相论文推荐》</a></li></ul><p>介绍： 索引，查询，磁盘，优化，挖掘，集群，数据恢复，高可用，高性能等等，这些仅仅是一部分而已，在<a href="http://www.vldb.org/pvldb/" target="_blank" rel="noopener">主页</a>上面有2014年一年的数据库相关论文</p><ul><li><a href="http://pgloader.io/" target="_blank" rel="noopener">《pgloader》</a></li></ul><p>介绍： postgresql的一数据导入工具，支持csv, 数据迁移</p><ul><li><a href="https://github.com/mihailShumilov/mysql2postgresql" target="_blank" rel="noopener">《mysql schema to postgresql》</a></li></ul><p>介绍：Converter mysql schema and data to postgresql</p><ul><li><a href="http://www.pgsql.ru/db/pgsearch/" target="_blank" rel="noopener">《Search PostgreSQL sites》</a></li></ul><p>介绍：一个PostgreSQL资料搜索引擎.</p><ul><li><a href="http://www.postgresqltutorial.com/" target="_blank" rel="noopener">《PostgreSQL Tutorial》</a></li></ul><p>介绍：一个PostgreSQL入门教程站点，新手上路.</p><ul><li><a href="http://hans.io/blog/2014/03/25/postgresql_cluster/" target="_blank" rel="noopener">《PostgreSQL: CLUSTER table USING index》</a></li></ul><p>介绍：对CLUSTER表使用索引.</p><ul><li><a href="http://blog.endpoint.com/2014/11/when-postgres-will-not-start.html" target="_blank" rel="noopener">《When Postgres will not start》</a></li></ul><p>介绍：当数据库无法启动的时候,我们应该如何做.</p><ul><li><a href="http://www.craigkerstiens.com/2014/05/22/on-connection-pooling/" target="_blank" rel="noopener">《Postgres and Connection Pooling》</a></li></ul><p>介绍：作者的<a href="http://www.craigkerstiens.com/" target="_blank" rel="noopener">博客</a>还有很多干货.</p><ul><li><a href="https://pgbouncer.github.io/" target="_blank" rel="noopener">《PgBouncer》</a></li></ul><p>介绍：PGBouncer是一个轻量级的针对PostgreSQL的数据库连接池工具，能够给客户端提供一个统一的链接视图.</p><ul><li><a href="https://wiki.postgresql.org/wiki/PGQ_Tutorial" target="_blank" rel="noopener">《PGQ 》</a></li></ul><p>介绍：PGQ is the queueing solution from Skytools. The Londiste replication solution is a consumer daemon built on PGQ, and the API is accessible for you to create any asynchronous processing facility, based on queuing.<a href="https://github.com/kostya/pgq" target="_blank" rel="noopener">github</a>.</p><ul><li><a href="https://www.youtube.com/watch?v=j642n39oBgQ" target="_blank" rel="noopener">《Implementing High Availability with PostgreSQL》</a></li></ul><p>介绍：实现一个高可用PostgreSQL集群,YoutuBe上更多<a href="https://www.youtube.com/results?search_query=postgresql+cluster" target="_blank" rel="noopener">PostgreSQL cluster</a>视频.</p><ul><li><a href="https://github.com/numtel/meteor-pg" target="_blank" rel="noopener">《numtel:pg》</a></li></ul><p>介绍：Reactive PostgreSQL for Meteor.</p><ul><li><a href="https://lob.com/blog/supercharge-your-postgresql-performance/" target="_blank" rel="noopener">《Slow PostgreSQL Performance? Don’t Forget to Vacuum your Database》</a></li></ul><p>介绍：数据库性能优化之Vacuum.</p><ul><li><a href="http://www.depesz.com/" target="_blank" rel="noopener">《select * from depesz;》</a></li></ul><p>介绍：里面有很多pg的最新资料,例如新版本的功能,技巧等.</p><ul><li><a href="http://bdr-project.org/docs/next/index.html" target="_blank" rel="noopener">《BDR 0.10.0 Documentation》</a></li></ul><p>介绍：<a href="http://2ndquadrant.com/en/resources/bdr/" target="_blank" rel="noopener">BDR</a>新的文档,使用的数据库版本是9.4的,BDR可以帮助你更好的建立一个pg集群.</p><ul><li><a href="http://blog.tarkalabs.com/2015/04/16/managing-big-enough-data-in-postgres/" target="_blank" rel="noopener">《Managing big enough data in postgres》</a></li></ul><p>介绍：pg中的大规模数据管理经验.</p><ul><li><a href="http://codex.cs.yale.edu/avi/db-book/" target="_blank" rel="noopener">《Database System Concepts Sixth Edition》</a></li></ul><p>介绍：耶鲁大学的数据库系统概念课件.</p><ul><li><a href="https://wiki.postgresql.org/images/e/e3/Hooks_in_postgresql.pdf" target="_blank" rel="noopener">《Hooks in PostgreSQL》</a></li></ul><p>介绍：PostgreSQL的hook机制介绍.如果有困难可以先看看<a href="http://www.cnblogs.com/gaojian/p/3259147.html" target="_blank" rel="noopener">简单的使用介绍</a>，此外这位博主的<a href="http://www.cnblogs.com/gaojian/p/topindex.html" target="_blank" rel="noopener">其他pg文章</a>也不错.</p><ul><li><a href="http://www.postgresql.org.es/sites/default/files/ERL-M87-06.pdf" target="_blank" rel="noopener">《The design of the postgres storage system》</a></li></ul><p>介绍：Postgres存储系统设计论文.</p><ul><li><a href="http://www.postgresql.org.es/sites/default/files/ERL-M85-95.pdf" target="_blank" rel="noopener">《The design of the postgres》</a></li></ul><p>介绍：Postgres设计论文.</p><ul><li><a href="http://www.postgresql.org.es/sites/default/files/ERL-M85-95.pdf" target="_blank" rel="noopener">《The Design of the POSTGRES Rules System》</a></li></ul><p>介绍：The Design of the POSTGRES Rules System.</p><ul><li><a href="http://www.postgresql.org/docs/devel/static/biblio.html" target="_blank" rel="noopener">《PostgreSQL官方推荐文献》</a></li></ul><p>介绍：PostgreSQL官方推荐文献.</p><ul><li><a href="http://wshan.net/bigdata/read1.pdf" target="_blank" rel="noopener">《Anatomy of a Database System》</a></li></ul><p>介绍：数据库内部结构剖析.</p><ul><li><a href="http://pgtune.leopard.in.ua/" target="_blank" rel="noopener">《PGtune》</a></li></ul><p>介绍：PostgreSQL性能调优工具,只需要输入机器配置即可获得相应的推荐优化参数.</p><ul><li><a href="https://robots.thoughtbot.com/postgresql-performance-considerations" target="_blank" rel="noopener">《PostgreSQL performance considerations》</a></li></ul><p>介绍：很多讲 PostgreSQL 优化的文章都提到了 Partial indexes<a href="http://www.postgresql.org/docs/9.4/static/indexes-partial.html" target="_blank" rel="noopener">Partial indexes</a>，简单的说，它是一个通过 WHERE 过滤后的子集数据的索引，虽然 MySQL 里也有这个名词，但完全不是一个东西。案例：㈠ <a href="http://instagram-engineering.tumblr.com/post/40781627982/handling-growth-with-postgres-5-tips-from" target="_blank" rel="noopener">Handling Growth with Postgres: 5 Tips From Instagram</a> ㈡ <a href="http://blog.heapanalytics.com/speeding-up-postgresql-queries-with-partial-indexes/" target="_blank" rel="noopener">Speeding Up PostgreSQL With Partial Indexes</a>.</p><ul><li><a href="http://www.postgresguide.com/index.html" target="_blank" rel="noopener">《Postgres Guide》</a></li></ul><p>介绍：Postgres的指南主要强调在Postgre存在的最佳实践和强大的功能.</p><ul><li><a href="http://linuxfinances.info/info/postgresqlperformance.html" target="_blank" rel="noopener">《PostgreSQL Performance Tuning》</a></li></ul><p>介绍：PostgreSQL性能调优,作者的其他<a href="http://linuxfinances.info/info/postgresql.html" target="_blank" rel="noopener">关于PostgreSQL文章</a>也不错.</p><ul><li><a href="http://www.postgresql.org/developer/backend/" target="_blank" rel="noopener">《PostgreSQL Backend Flowchart》</a></li></ul><p>介绍： PostgreSQL 内核学习.</p><ul><li><a href="http://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=postgresql" target="_blank" rel="noopener">《PostgreSQL Vulnerability》</a></li></ul><p>介绍： PostgreSQL漏洞库.</p><ul><li><a href="https://blog.lateral.io/2015/05/full-text-search-in-milliseconds-with-postgresql/" target="_blank" rel="noopener">《Full text search in milliseconds with PostgreSQL》</a></li></ul><p>介绍： PostgreSQL毫秒级全文本搜索.</p><ul><li><a href="http://www.varlena.com/GeneralBits/Tidbits/annotated_conf_e.html" target="_blank" rel="noopener">《Annotated postgresql.conf and Global User Configuration (GUC) Guide》</a></li></ul><p>介绍： postgresql.conf配置文件注释.</p><ul><li><a href="http://blog.confluent.io/2015/04/23/bottled-water-real-time-integration-of-postgresql-and-kafka/" target="_blank" rel="noopener">《Bottled Water: Real-time integration of PostgreSQL and Kafka》</a></li></ul><p>介绍：利用Postgres 9.4的新功能Logical Decoding，实时stream所有SQL操作到Kafka，然后下游的各种consumer从Kafka中接收。其实就是Write-ahead logging的广义应用</p><ul><li><a href="https://www.compose.io/articles/is-postgresql-your-next-json-database/" target="_blank" rel="noopener">《Is PostgreSQL Your Next JSON Database?》</a></li></ul><p>介绍： Is PostgreSQL Your Next JSON Database?.</p><ul><li><a href="http://blog.2ndquadrant.com/nosql-postgresql-9-4-jsonb/" target="_blank" rel="noopener">《NoSQL with PostgreSQL 9.4 and JSONB》</a></li></ul><p>介绍： NoSQL with PostgreSQL 9.4 and JSONB.</p><ul><li><a href="http://www.linuxjournal.com/content/postgresql-nosql-database" target="_blank" rel="noopener">《PostgreSQL, the NoSQL Database》</a></li></ul><p>介绍： PostgreSQL, the NoSQL Database.</p><ul><li><a href="http://blog.codacy.com/2015/05/14/how-to-update-large-tables-in-postgresql/" target="_blank" rel="noopener">《How to update large tables in PostgreSQL》</a></li></ul><p>介绍： PostgreSQL如何更新大表.</p><ul><li><a href="http://www.postgresql.org/docs/devel/static/error-style-guide.html" target="_blank" rel="noopener">《PostgreSQL:Error Message Style Guide》</a></li></ul><p>介绍： PostgreSQL错误信息编码指南.</p><ul><li><a href="https://www.citusdata.com/blog/156-compressing-jsonb-using-cstore-fdw" target="_blank" rel="noopener">《Compressing PostgreSQL JSONB data 12x using cstore_fdw》</a></li></ul><p>介绍： cstore_fdw压缩PostgreSQL数据.</p><ul><li><a href="http://lwn.net/SubscriberLink/645020/e1ba36cff8248df0/" target="_blank" rel="noopener">《PostgreSQL: the good, the bad, and the ugly》</a></li></ul><p>介绍： PostgreSQL评价.</p><ul><li><a href="http://www.hankinsoft.com/SQLProPostgres/" target="_blank" rel="noopener">《SQLPro for PostgresSQL》</a></li></ul><p>介绍： Mac OS X上的PostgreSQL管理器.</p><ul><li><a href="https://www.youtube.com/watch?v=pbg97bkxbbY&amp;utm_source=postgresweekly&amp;utm_medium=email" target="_blank" rel="noopener">《PostgreSQL 9.5’s Upsert Feature Explained》</a></li></ul><p>介绍: PostgreSQL 9.5新特性Upsert解释 .</p><ul><li><a href="http://www.vertabelo.com/blog/technical-articles/postgresql-database-replication" target="_blank" rel="noopener">《PostgreSQL database replication》</a></li></ul><p>介绍:PostgreSQL的复制.</p><ul><li><a href="http://momjian.us/main/blogs/pgblog/2015.html" target="_blank" rel="noopener">《YeSQL: Battling the NoSQL Hype Cycle with Postgres》</a></li></ul><p>介绍： YeSQL: Battling the NoSQL Hype Cycle with Postgres,博客的<a href="http://momjian.us/main/blogs/pgblog/2015.html" target="_blank" rel="noopener">其他内容</a>也不错.</p><ul><li><a href="http://pgtap.org/" target="_blank" rel="noopener">《pgTAP》</a></li></ul><p>介绍:pgTAP is a unit testing framework for PostgreSQL written in PL/pgSQL and PL/SQL.</p><ul><li><a href="http://www.commandprompt.com/ppbook/?page=ppbook" target="_blank" rel="noopener">《Practical PostgreSQL》</a></li></ul><p>介绍: 免费的pg电子书《PostgreSQL实践》,书虽然有点老,但是很多知识点是可以通用的.</p><ul><li><a href="http://momjian.us/main/writings/pgsql/aw_pgsql_book/" target="_blank" rel="noopener">《PostgreSQL: Introduction and Concepts》</a></li></ul><p>介绍:PostgreSQL介绍与入门,免费在线电子书,<a href="http://momjian.us/main/writings/pgsql/bookfigs.pdf" target="_blank" rel="noopener">pdf版</a>,入门的还有<a href="http://momjian.us/main/writings/pgsql/Get_to_know_PostgreSQL.pdf" target="_blank" rel="noopener">Get to know PostgreSQL</a>.</p><ul><li><a href="http://momjian.us/main/writings/pgsql/administration.pdf" target="_blank" rel="noopener">《Mastering PostgreSQL Administration》</a></li></ul><p>介绍:PostgreSQL管理入门,非常全,此外作者写了很多关于pg的<a href="http://momjian.us/main/writings/pgsql/" target="_blank" rel="noopener">ppt和文档</a>,也很精彩.</p><ul><li><a href="https://wiki.postgresql.org/wiki/Postgres-XC" target="_blank" rel="noopener">《Postgres-XC》</a></li></ul><p>介绍: Postgres-XC 是一种提供写可靠性,多主节点数据同步,数据传输的开源集群方案.</p><ul><li><a href="http://www.pgcon.org/2015/schedule/" target="_blank" rel="noopener">《PGCon 2015 演讲稿》</a></li></ul><p>介绍: PGCon 2015 演讲稿下载.</p><ul><li><a href="http://www.enterprisedb.com/postgres-plus-edb-blog/robert-haas/postgresql-shutdown" target="_blank" rel="noopener">《PostgreSQL Shutdown》</a></li></ul><p>介绍: PG停止服务评析.</p><ul><li><a href="http://www.enterprisedb.com/postgres-plus-edb-blog/robert-haas/first-rule-securing-postgres-don-t-be-dumb" target="_blank" rel="noopener">《First Rule in Securing Postgres: Don’t Be Dumb》</a></li></ul><p>介绍: pg的安全规则建议,共5点,第一点就是Don’t be dumb!,enterprisedb的<a href="http://www.enterprisedb.com/postgres-plus-edb-blog" target="_blank" rel="noopener">官方博客</a>资源还真的比较丰富,例如还有中文版的<a href="http://www.enterprisedb.com/docs/cn/8.3R2/oracompat/EnterpriseDB_OraCompat_8.3_CN-01.htm" target="_blank" rel="noopener">Postgres Plus Advanced Server与oracle兼容文档</a>.</p><ul><li><a href="http://arxiv.org/pdf/1208.4179v1.pdf" target="_blank" rel="noopener">《Serializable Snapshot Isolation in PostgreSQL》</a></li></ul><p>介绍: PG中的可串行化快照隔离.</p><ul><li><a href="https://wiki.postgresql.org/wiki/Converting_from_other_Databases_to_PostgreSQL" target="_blank" rel="noopener">《Converting from other Databases to PostgreSQL》</a></li></ul><p>介绍: 其他数据库向psotgresql迁移数据的工具,官方出品，包括 MySQL, MS SQL Server, SQL Azure, Oracle, MS Access.等.</p><ul><li><a href="http://pan.baidu.com/s/1bnnqEHx" target="_blank" rel="noopener">《深度学习PostgreSQL》</a></li></ul><p>介绍: 从安装到双机热备再到内核分析,内容丰富网盘提取密码<code>fmby</code>.</p><ul><li><a href="http://pgcli.com/" target="_blank" rel="noopener">《Postgres CLI with autocompletion and syntax highlighting》</a></li></ul><p>介绍: pgcli是一个PostgreSQL命令行工具,提供了语法高亮以及自动补全的功能.</p><ul><li><a href="http://postgresguide.com/" target="_blank" rel="noopener">《Postgres Guid》</a></li></ul><p>介绍: Postgres入门指南,从安装到优化,也讲到了非标准数据类型JSON,hstor等.</p><ul><li><a href="https://devcenter.heroku.com/articles/postgresql-indexes#partial-indexes" target="_blank" rel="noopener">《Efficient Use of PostgreSQL Indexes》</a></li></ul><p>介绍: 本文介绍了如何高效的使用pg的索引,很详细.讲到了很多容易被初学者容易疏忽的地方.</p><ul><li><a href="http://www.cnblogs.com/stephen-liu74/archive/2012/06/08/2315679.html" target="_blank" rel="noopener">《PostgreSQL学习手册(目录)》</a></li></ul><p>介绍: PostgreSQL学习手册,虽然是2012年的,但里面的内容与现在的最新版pg是兼容,可以正常使用的.</p><ul><li><a href="http://lwn.net/Articles/653411/" target="_blank" rel="noopener">《”Big data” features coming in PostgreSQL 9.5》</a></li></ul><p>介绍: PostgreSQL9.5中对于大数据的有利特性介绍.</p><ul><li><a href="http://postgres-bits.herokuapp.com/" target="_blank" rel="noopener">《PostgreSQL-The Bits You Haven’t Found》</a></li></ul><p>介绍: PostgreSQL中可能你还不知道的秘密,可以用作知识梳理.</p><ul><li><a href="http://rob.conery.io/2015/08/20/designing-a-postgresql-document-api/" target="_blank" rel="noopener">《Designing A PostgreSQL Document API》</a></li></ul><p>介绍: 自己动手设计一个PostgreSQL文档api.</p><ul><li><a href="https://eye.raze.mx/10-beginner-postgresql-tasks-you-should-know/" target="_blank" rel="noopener">《10 beginner’s PostgreSQL tasks you should know》</a></li></ul><p>介绍: PostgreSQL初学者快速入门要点.</p><ul><li><a href="https://www.airpair.com/postgresql/posts/sql-vs-nosql-ko-postgres-vs-mongo" target="_blank" rel="noopener">《SQL vs NoSQL KO. Postgres vs Mongo》</a></li></ul><p>介绍: 关系型数据库Postgres vs NoSQL 数据库Mongo的对决,这篇文章比较客观.</p><ul><li><a href="http://blog.chinaunix.net/uid-20726500-id-4454943.html" target="_blank" rel="noopener">《EnterpriseDB认证通关攻略》</a></li></ul><p>介绍:如果你想考EnterpriseDB认证,推荐阅读此篇文章.</p><ul><li><a href="https://github.com/uptimejp/sql_firewall" target="_blank" rel="noopener">《sql_firewall: a SQL Firewall Extension for PostgreSQL》</a></li></ul><p>介绍:这个插件可以更好的帮助你防御黑客攻击你的数据库.</p><ul><li><a href="http://blog.aquameta.com/2015/08/29/intro-meta/" target="_blank" rel="noopener">《Aquameta Layer 0: meta - Writable System Catalog for PostgreSQL》</a></li></ul><p>介绍:Aquameta的pg实践.</p><ul><li><a href="http://postgresweekly.com/" target="_blank" rel="noopener">《Postgres Weekly》</a></li></ul><p>介绍:国外的PostgreSQL周刊,每周的pg新鲜事.</p><ul><li><a href="https://www.citusdata.com/blog/19-ozgun/265-postgresql-pgshard-and-what-we-learned-our-failures" target="_blank" rel="noopener">《PostgreSQL, pg_shard, and what we learned from our failures》</a></li></ul><p>介绍:pg_shard的经验分享.</p><ul><li><a href="https://github.com/begriffs/postgrest" target="_blank" rel="noopener">《REST API for any Postgres database》</a></li></ul><p>介绍:pg的一个非官方REST API,此外推荐<a href="https://github.com/QBisConsult/psql-api" target="_blank" rel="noopener">RADIP RESTful API for PostgreSQL</a>.</p><ul><li><a href="http://mysql.taobao.org/monthly/2015/09/02/" target="_blank" rel="noopener">《Pg_clog异步提交一致性、原子操作与fsync》</a></li></ul><p>介绍:Pg_clog分析.</p><ul><li><a href="http://mysql.taobao.org/monthly/2015/09/06/" target="_blank" rel="noopener">《Pg的checkpoint的调度》</a></li></ul><p>介绍:同步机制分析.</p><ul><li><a href="https://www.kentik.com/postgresql-foreign-data-wrappers/" target="_blank" rel="noopener">《PostgreSQL Foreign Data Wrappers》</a></li></ul><p>介绍:PostgreSQL外部数据封装器介绍.</p><ul><li><a href="http://patshaughnessy.net/2014/10/13/following-a-select-statement-through-postgres-internals" target="_blank" rel="noopener">《Following a Select Statement Through Postgres Internals》</a></li></ul><p>介绍:SELECT查询如何在PostgreSQL内部工作的.</p><ul><li><a href="https://www.pipelinedb.com/" target="_blank" rel="noopener">《PipelineDB—The Streaming SQL Database》</a></li></ul><p>介绍:PipelineDB是基于PostgreSQL研发的一种流式关系数据库.</p><ul><li><a href="https://abdulyadi.files.wordpress.com/2015/10/ictvetpaper.pdf" target="_blank" rel="noopener">《PostgreSQL：A Platform for Multiple Sources Data Retrieval》</a></li></ul><p>介绍:使用pg完成多平台数据源检索,<a href="https://abdulyadi.files.wordpress.com/2015/10/presentation.pdf" target="_blank" rel="noopener">幻灯片</a>.</p><ul><li><a href="http://db.csail.mit.edu/projects/cstore/abadi-sigmod08.pdf" target="_blank" rel="noopener">《Column-Stores vs. Row-Stores: How Different Are They Really?》</a></li></ul><p>介绍:列式存储与行式存储数据库之间究竟有何区别？.</p><ul><li><a href="https://github.com/greenplum-db/gpdb" target="_blank" rel="noopener">《Pivotal Greenplum Database has been open sourced》</a></li></ul><p>介绍:基于PostgreSQL的Greenplum Database数据仓库开源.</p><ul><li><a href="http://pgsqlcn.com/index.html" target="_blank" rel="noopener">《PostgreSQL 数据库文档》</a></li></ul><p>介绍:PostgreSQL数据库文档,文档内容基于9.5版本演示.</p><ul><li><a href="http://highscalability.com/blog/2015/10/13/more-concurrency-improved-locking-in-postgresql.html" target="_blank" rel="noopener">《More Concurrency: Improved Locking In PostgreSQL》</a></li></ul><p>介绍:pg高并发在锁方面的改善，<a href="http://www.csdn.net/article/2015-11-07/2826143" target="_blank" rel="noopener">中文版</a>.</p><ul><li><a href="http://www.sqltabs.com/" target="_blank" rel="noopener">《SQL Tabs 》</a></li></ul><p>介绍:PostgreSQL的跨平台终端.</p><ul><li><a href="http://big-elephants.com/2015-10/writing-postgres-extensions-part-iii/" target="_blank" rel="noopener">《Writing Postgres Extensions - Debugging》</a></li></ul><p>介绍:PostgreSQL插件开发.</p><ul><li><a href="http://shisaa.jp/postset/postgresql-full-text-search-part-1.html" target="_blank" rel="noopener">《PostgreSQL: A full text search engine》</a></li></ul><p>介绍:PostgreSQL全文搜索引擎剖析<a href="http://shisaa.jp/postset/postgresql-full-text-search-part-2.html" target="_blank" rel="noopener">part2</a>,<a href="http://shisaa.jp/postset/postgresql-full-text-search-part-3.html" target="_blank" rel="noopener">part3</a>.</p><ul><li><a href="http://blog.postgresql-consulting.com/" target="_blank" rel="noopener">《PostgreSQL-Consulting.com》</a></li></ul><p>介绍:这是一个PG商业顾问的博客，里面提供的pg性能调优，部署，迁移等博文.</p><ul><li><a href="http://planet.postgresql.org/" target="_blank" rel="noopener">《PostgreSQL Planet》</a></li></ul><p>介绍:PostgreSQL官方的一个pg文章news.</p><ul><li><a href="http://blog.2ndquadrant.com/benchmarking-postgres-xl/" target="_blank" rel="noopener">《Benchmarking Postgres-XL》</a></li></ul><p>介绍:Postgres-XL压力测试分析,博客中的<a href="http://blog.2ndquadrant.com/" target="_blank" rel="noopener">其他内容</a>也很有料.</p><ul><li><a href="https://www.youtube.com/playlist?list=PLFRIKEguV54bgwAcgFiOs5GMo3q2DhVDj" target="_blank" rel="noopener">《PostgreSql Database Video Tutorials》</a></li></ul><p>介绍:PostgreSQL视频教程.</p><ul><li><a href="https://www.youtube.com/watch?v=GobQw9LMEaw" target="_blank" rel="noopener">《PostgreSQL Replication Tutorial》</a></li></ul><p>介绍：PostgreSQL Replication Tutorial</p><ul><li><a href="https://github.com/FRiCKLE/ngx_postgres" target="_blank" rel="noopener">《ngx_postgres》</a></li></ul><p>介绍:nginx访问Postgresql模块</p><ul><li><a href="http://anoncvs.postgresql.org/cvsweb.cgi/~checkout~/pgsql/src/tools/backend/index.html" target="_blank" rel="noopener">《How PostgreSQL Processes a Query》</a></li></ul><p>介绍:pg是如何处理一个查询的？</p><ul><li><a href="https://www.compose.io/articles/common-misconceptions-about-locking-in-postgresql/" target="_blank" rel="noopener">《Common misconceptions about locking in PostgreSQL》</a></li></ul><p>介绍:pg中容易误解的锁</p><ul><li><a href="http://www.bigsql.org/se/components.jsp" target="_blank" rel="noopener">《PostgreSQL Big SQL commponent》</a></li></ul><p>介绍:pg大数据工具箱</p><ul><li><a href="http://www.postgres.cn/docs/9.3.4/" target="_blank" rel="noopener">《PostgreSQL 9.3.4 文档》</a></li></ul><p>介绍:PostgreSQL 9.3.4 文档翻译,作者是《postgresql内核分析》作者</p><ul><li><a href="http://2ndquadrant.com/en/resources/pglogical/" target="_blank" rel="noopener">《pglogical：A logical replication system for PostgreSQL》</a></li></ul><p>介绍:pg的逻辑复制扩展,兼顾了基于触发器复制技术的灵活性,同时又有基于日志复制技术的高效性</p><ul><li><a href="http://tatiyants.com/pev" target="_blank" rel="noopener">《Postgres EXPLAIN Visualizer》</a></li></ul><p>介绍:Postgres的EXPLAIN查看执行计划已经非常的直观、全面，不过有人更钟情于图形化的展示，现在有了这样一个项目就是干这个的：Postgres EXPLAIN Visualizer (Pev)。</p><ul><li><a href="https://hashrocket.com/blog/posts/custom-aggregates-in-postgresql" target="_blank" rel="noopener">《Custom Aggregates in PostgreSQL》</a></li></ul><p>介绍:在写复杂的SQL时，可能会进行复杂的运算.但是原有的聚集函数并不能满足要求。这篇文章详细介绍了自定义聚集函数</p><ul><li><a href="http://www.geekytidbits.com/performance-tuning-postgres" target="_blank" rel="noopener">《Performance Tuning Queries in PostgreSQL》</a></li></ul><p>介绍:pg性能调优之数据查询,此外推荐<a href="https://www.youtube.com/watch?v=svqQzYFBPIo" target="_blank" rel="noopener">https://www.youtube.com/watch?v=svqQzYFBPIo</a></p><ul><li><a href="http://www.adalyz.com/building-full-text-search-for-your-application-using-postgres/" target="_blank" rel="noopener">《Building Full Text Search For Your Application using Postgres》</a></li></ul><p>介绍:使用pg为自己的应用构建全文检索</p><ul><li><a href="http://www.sqlinjectionwiki.com/Categories/4/postgresql-sql-injection-cheat-sheet/" target="_blank" rel="noopener">《PostgreSQL SQL Injection Cheat Sheet》</a></li></ul><p>介绍:PostgreSQL SQL注入手册</p><ul><li><a href="http://jinchengli.me/post/postgres-query-opt/" target="_blank" rel="noopener">《PostgreSQL Query Optimization》</a></li></ul><p>介绍:PostgreSQL查询优化，比较新手，但是你得有点基本的优化基础。否则会看起来很吃力</p><ul><li><a href="https://begriffs.com/posts/2016-03-20-postgrest-tour.html" target="_blank" rel="noopener">《A Tour of PostgREST》</a></li></ul><p>介绍:PostgreSQL RESTful教程</p><ul><li><a href="http://explain.depesz.com/" target="_blank" rel="noopener">《PostgreSQL’s explain analyze made readable》</a></li></ul><p>介绍:可视化PostgreSQL执行计划,pg学习看执行计划的好资料</p><ul><li><a href="https://wiki.postgresql.org/images/1/1e/QuanHa_PGConf_US_2016_-_Doc.pdf" target="_blank" rel="noopener">《PostgreSQL HA Database Clusters through Containment》</a></li></ul><p>介绍:pg HA数据库集群分析</p><ul><li><a href="http://community.hpe.com/hpeb/attachments/hpeb/JapanEnterpriseTopics/198/1/PostgreSQL%209.6%20New%20Features%20en%2020160606-1.pdf" target="_blank" rel="noopener">《PostgreSQL 9.6 New Features With Examples》</a></li></ul><p>介绍:PostgreSQL9.6新特性</p><ul><li><a href="http://www.dalibo.org/_media/understanding_explain.pdf" target="_blank" rel="noopener">《Understanding EXPLAIN》</a></li></ul><p>介绍:深入学习PostgreSQL的explain工具</p><ul><li><a href="https://pgexercises.com/" target="_blank" rel="noopener">《PostgreSQL Exercises》</a></li></ul><p>介绍:PostgreSQL学习实验室，有练习。适合新手入门pg</p><ul><li><a href="http://use-the-index-luke.com/blog/2016-07-29/on-ubers-choice-of-databases" target="_blank" rel="noopener">《On Uber’s Choice of Databases》</a></li></ul><p>介绍:文章诞生于Uber发表的一篇关于从pg迁移到mysql的文章，国内与国外讨论甚广.在讨论过程中诞生了很多精彩的干货，值得一读。学习数据库要深入，并存的世界才是和平.推荐<a href="https://yq.aliyun.com/articles/58421" target="_blank" rel="noopener">为PostgreSQL讨说法 - 浅析《UBER ENGINEERING SWITCHED FROM POSTGRES TO MYSQL》</a></p><ul><li><a href="https://robots.thoughtbot.com/advanced-postgres-performance-tips" target="_blank" rel="noopener">《Advanced Postgres Performance Tips》</a></li></ul><p>介绍:高级PostgreSQL性能调优</p><ul><li><a href="https://www.pgcon.org/2016/schedule/events/934.en.html" target="_blank" rel="noopener">《PostgreSQL Index Internals》</a></li></ul><p>介绍:索引的内部原理,推荐<a href="https://www.pgcon.org/2016/schedule/" target="_blank" rel="noopener">2016年欧洲pg大会资料</a>涵盖ppt与视频</p><ul><li><a href="http://www.pglivebackup.org/" target="_blank" rel="noopener">《PGLiveBackup》</a></li></ul><p>介绍:pg数据库自动全量备份脚本.</p><ul><li><a href="https://github.com/citusdata/pg_paxos" target="_blank" rel="noopener">《pg_paxos:Basic implementation of Paxos and Paxos》</a></li></ul><p>介绍:分布式算法Paxos的pg实践，可以先通过<a href="https://wiki.postgresql.org/images/8/8f/Marco_Slot_-_pg_paxos_2015-10-29.pdf" target="_blank" rel="noopener">PPT</a>.它实现了基本的Multi-Paxos和Paxos.</p><ul><li><a href="https://momjian.us/main/writings/pgsql/hw_selection.pdf" target="_blank" rel="noopener">《Database Hardware Selection Guidelines》</a></li></ul><p>介绍:数据库硬件选择指南,主要是一个参考.推荐<a href="https://www.youtube.com/watch?v=qIlYZeSuv8w" target="_blank" rel="noopener">Database Hardware Selection Guidelines </a></p><ul><li><a href="https://github.com/2ndQuadrant/pglogical" target="_blank" rel="noopener">《pglogical:Logical Replication extension for PostgreSQL》</a></li></ul><p>介绍:PostgreSQL逻辑复制扩展.</p><ul><li><a href="http://www.foo.be/docs-free/aw_pgsql_book.pdf" target="_blank" rel="noopener">《PostgreSQL: Introduction and Concepts》</a></li></ul><p>介绍:PostgreSQL的历史书.</p><ul><li><a href="https://blog.twitch.tv/how-twitch-uses-postgresql-c34aa9e56f58" target="_blank" rel="noopener">《How Twitch uses PostgreSQL》</a></li></ul><p>介绍:PostgreSQL在twitch的应用.</p><ul><li><a href="http://pg-monz.github.io/pg_monz/index-en.html" target="_blank" rel="noopener">《pg_monz:PostgreSQL monitoring template for Zabbix》</a></li></ul><p>介绍:PostgreSQL的Zabbix监控模版.</p><ul><li><a href="https://github.com/chenaisheng/pgclusteradmin" target="_blank" rel="noopener">《pgclusteradmin:PostgreSQL cluster manager base on Golang》</a></li></ul><p>介绍:一款基于go开发的Postgresql集群管理工具</p><ul><li><a href="https://github.com/ankane/pghero" target="_blank" rel="noopener">《PgHero:PostgreSQL performance monitoring tool》</a></li></ul><p>介绍:基于Ruby开发的PostgreSQL性能监控Web平台，支持SQL查询历史记录，实时连接数监控,SQL分析,性能调优推荐,Tune是基于<a href="http://pgtune.leopard.in.ua/" target="_blank" rel="noopener">pgtune</a></p><ul><li><a href="http://www.sai.msu.su/~megera/postgres/gist/" target="_blank" rel="noopener">《GiST for PostgreSQL》</a></li></ul><p>介绍:PostgreSQL的GiST（通用搜索树）核心开发作者主页.</p><ul><li><a href="https://github.com/workflowproducts/postage" target="_blank" rel="noopener">《Postage - A fast replacement for PGAdmin》</a></li></ul><p>介绍:PGAdmin的替代工具.里面有一个比较实用的功能就是可以逆向表成关系图</p><ul><li><a href="http://tatiyants.com/pev/" target="_blank" rel="noopener">《Postgres EXPLAIN Visualizer (pev)》</a></li></ul><p>介绍:Postgres 执行计划可视化工具</p><ul><li><a href="http://blog.postgresql-consulting.com/2017/09/postgresql-workings-in-one-picture.html" target="_blank" rel="noopener">《PostgreSQL workings in one picture》</a></li></ul><p>介绍:一张图了解PostgreSQL工作结构</p><ul><li><a href="https://rcoh.me/posts/postgres-indexes-under-the-hood/" target="_blank" rel="noopener">《Postgres Indexes Under the Hood》</a></li></ul><p>介绍:Postgres索引的底层运行机制</p><ul><li><a href="https://github.com/jberkus/annotated.conf" target="_blank" rel="noopener">《Annotated Config Files for PostgreSQL》</a></li></ul><p>介绍:PostgreSQL配置文件注释篇，详细介绍每个参数的意思，其中<code>postgresql.10.simple.conf</code>为必须修改项，<code>extra.10.conf</code>为可能要修改的项。</p><ul><li><a href="https://pgbackrest.org/" target="_blank" rel="noopener">《pgBackRest:Reliable PostgreSQL Backup &amp; Restore》</a></li></ul><p>介绍:pgBackRest支持并行备份和恢复，增量备份。对于大规模pg数据库备份与同步很有帮助</p><ul><li><a href="https://wiki.postgresql.org/wiki/PostgreSQL_Related_Slides_and_Presentations" target="_blank" rel="noopener">《PostgreSQL Related Slides and Presentations》</a></li></ul><p>介绍:PostgreSQL相关演讲资料。包括一些pgconf会议PPT。</p><ul><li><a href="https://github.com/dhamaniasad/awesome-postgres" target="_blank" rel="noopener">《Awesome Postgres》</a></li></ul><p>介绍:Awesome系列，高可用、备份、管理、打包版本、命令行、监控、扩展、优化、工具、API、以及一些比较不错的博文、例如<a href="https://www.justwatch.com/blog/post/debugging-postgresql-performance-the-hard-way/" target="_blank" rel="noopener">Debugging PostgreSQL performance, the hard way</a></p><ul><li><a href="http://www.interdb.jp/pg/" target="_blank" rel="noopener">《The Internals of PostgreSQL》</a></li></ul><p>介绍:一本关于PG数据库管理员运维的书，主要围绕着集群、备份、Buffer、索引、复制.</p><ul><li><a href="http://postgres-data-types.pvh.ca/" target="_blank" rel="noopener">《Understanding the power of data types: PostgreSQL’s Secret Weapon》</a></li></ul><p>介绍:了解数据类型的力量：PostgreSQL的秘密武器.</p><ul><li><a href="https://www.postgresql.org/developer/backend/" target="_blank" rel="noopener">《PostgreSQL Backend Flowchart》</a></li></ul><p>介绍:PostgreSQL的后台执行流程图,对于阅读源码或者是想了解内部的构成可以先阅读。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;postgresql-Learning-resource-map&quot;&gt;&lt;a href=&quot;#postgresql-Learning-resource-map&quot; class=&quot;headerlink&quot; title=&quot;postgresql Learning resource
      
    
    </summary>
    
      <category term="postgresql" scheme="https://moonclearner.cn/categories/postgresql/"/>
    
    
      <category term="postgresql" scheme="https://moonclearner.cn/tags/postgresql/"/>
    
  </entry>
  
  <entry>
    <title>www trace request test</title>
    <link href="https://moonclearner.cn/ITsecure/www_trace_request.html"/>
    <id>https://moonclearner.cn/ITsecure/www_trace_request.html</id>
    <published>2019-12-16T08:28:45.963Z</published>
    <updated>2019-12-16T08:28:45.963Z</updated>
    
    <content type="html"><![CDATA[<h1 id="远程WWW服务支持TRACE请求"><a href="#远程WWW服务支持TRACE请求" class="headerlink" title="远程WWW服务支持TRACE请求"></a>远程WWW服务支持TRACE请求</h1><h2 id="test-method"><a href="#test-method" class="headerlink" title="test method"></a>test method</h2><p> ‘’’</p><h1 id="http"><a href="#http" class="headerlink" title="http"></a>http</h1><p>  curl -v -X TRACE <a href="http://www.yourserver.com" target="_blank" rel="noopener">http://www.yourserver.com</a></p><h1 id="https"><a href="#https" class="headerlink" title="https"></a>https</h1><p>  curl –insecure -v -X TRACE <a href="https://www.yourserver.com" target="_blank" rel="noopener">https://www.yourserver.com</a></p><p> ‘’’<br> return msg is “HTTP/1.1 405 Method Not Allowed”<br> It works</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;远程WWW服务支持TRACE请求&quot;&gt;&lt;a href=&quot;#远程WWW服务支持TRACE请求&quot; class=&quot;headerlink&quot; title=&quot;远程WWW服务支持TRACE请求&quot;&gt;&lt;/a&gt;远程WWW服务支持TRACE请求&lt;/h1&gt;&lt;h2 id=&quot;test-meth
      
    
    </summary>
    
      <category term="ITsecure" scheme="https://moonclearner.cn/categories/ITsecure/"/>
    
    
      <category term="apache" scheme="https://moonclearner.cn/tags/apache/"/>
    
  </entry>
  
  <entry>
    <title>代码审计-企业级web代码安全架构</title>
    <link href="https://moonclearner.cn/ITsecure/code%20audit%20Notes.html"/>
    <id>https://moonclearner.cn/ITsecure/code audit Notes.html</id>
    <published>2019-12-16T08:22:12.125Z</published>
    <updated>2019-12-16T08:22:12.125Z</updated>
    
    <content type="html"><![CDATA[<h1 id="code-audit-Notes"><a href="#code-audit-Notes" class="headerlink" title="code audit Notes"></a>code audit Notes</h1><h2 id="code-audit-env-built"><a href="#code-audit-env-built" class="headerlink" title="code audit env built"></a>code audit env built</h2><h3 id="php-env-install"><a href="#php-env-install" class="headerlink" title="php env install"></a>php env install</h3><ul><li>phpStudy<ul><li>用于做技术探针，集成了所有php运行的环境，apache nginx</li></ul></li><li>php core secure configure<ul><li>register_globals 全局变量注册开关</li><li>allow_url_include 是否运行包含远程文件<ul><li>include()</li></ul></li><li>magic_quotes_gpc 魔术引号自动过滤<ul><li>filter get post cookie but $_SERVER</li><li>ver 5.4 later abandon</li></ul></li><li>magic_quotes_runtime 魔术引号自动过滤<ul><li>filter database or file</li><li>ver 5.4 later abandon</li></ul></li><li>magic_quotes_sybase 魔术引号自动过滤<ul><li>like magic_quotes_gpc</li></ul></li><li>safe_mode 安全模式<ul><li>限制文件操作</li><li>限制函数执行和外部命令执行</li></ul></li><li>open_basedir PHP可访问目录</li><li>disable_functions 禁用函数<ul><li>phpinfo,eval,assthru,exec,system</li></ul></li><li>display_errors 和 error_reporting 错误显示</li></ul></li></ul><h2 id="audit-auxiliary-tool-or-defect-verification-tool"><a href="#audit-auxiliary-tool-or-defect-verification-tool" class="headerlink" title="audit auxiliary tool or defect verification tool"></a>audit auxiliary tool or defect verification tool</h2><h3 id="code-audit-tool"><a href="#code-audit-tool" class="headerlink" title="code audit tool"></a>code audit tool</h3><ul><li>seay<ul><li>only for php</li></ul></li><li>Fortify SCA</li><li>RIPS<ul><li>only for php</li></ul></li></ul><h3 id="defect-verification-tool"><a href="#defect-verification-tool" class="headerlink" title="defect verification tool"></a>defect verification tool</h3><ul><li>burp suite</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;code-audit-Notes&quot;&gt;&lt;a href=&quot;#code-audit-Notes&quot; class=&quot;headerlink&quot; title=&quot;code audit Notes&quot;&gt;&lt;/a&gt;code audit Notes&lt;/h1&gt;&lt;h2 id=&quot;code-audi
      
    
    </summary>
    
      <category term="ITsecure" scheme="https://moonclearner.cn/categories/ITsecure/"/>
    
    
      <category term="php" scheme="https://moonclearner.cn/tags/php/"/>
    
      <category term="secure" scheme="https://moonclearner.cn/tags/secure/"/>
    
      <category term="audit" scheme="https://moonclearner.cn/tags/audit/"/>
    
  </entry>
  
  <entry>
    <title>PHP dangerous function</title>
    <link href="https://moonclearner.cn/php/secure/php_dangerous_function_unsafe_regular_expression.html"/>
    <id>https://moonclearner.cn/php/secure/php_dangerous_function_unsafe_regular_expression.html</id>
    <published>2019-11-28T11:35:53.185Z</published>
    <updated>2019-11-28T11:35:53.185Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PHP-dangerous-function"><a href="#PHP-dangerous-function" class="headerlink" title="PHP dangerous function"></a>PHP dangerous function</h1><h2 id="split"><a href="#split" class="headerlink" title="split"></a>split</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explode</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;PHP-dangerous-function&quot;&gt;&lt;a href=&quot;#PHP-dangerous-function&quot; class=&quot;headerlink&quot; title=&quot;PHP dangerous function&quot;&gt;&lt;/a&gt;PHP dangerous functi
      
    
    </summary>
    
      <category term="php" scheme="https://moonclearner.cn/categories/php/"/>
    
    
      <category term="php" scheme="https://moonclearner.cn/tags/php/"/>
    
      <category term="web attack" scheme="https://moonclearner.cn/tags/web-attack/"/>
    
  </entry>
  
  <entry>
    <title>PHP XSS</title>
    <link href="https://moonclearner.cn/php/secure/php_XSS.html"/>
    <id>https://moonclearner.cn/php/secure/php_XSS.html</id>
    <published>2019-11-28T09:21:24.872Z</published>
    <updated>2019-11-28T09:21:24.872Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PHP-XSS"><a href="#PHP-XSS" class="headerlink" title="PHP XSS"></a>PHP XSS</h1><h2 id="Persistent"><a href="#Persistent" class="headerlink" title="Persistent"></a>Persistent</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> htmlspecialchars($data, ENT_QUOTES);</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">"location.replace("</span>/index/<span class="string">'.urlencode($type).'</span><span class="string">");"</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;PHP-XSS&quot;&gt;&lt;a href=&quot;#PHP-XSS&quot; class=&quot;headerlink&quot; title=&quot;PHP XSS&quot;&gt;&lt;/a&gt;PHP XSS&lt;/h1&gt;&lt;h2 id=&quot;Persistent&quot;&gt;&lt;a href=&quot;#Persistent&quot; class=&quot;head
      
    
    </summary>
    
      <category term="php" scheme="https://moonclearner.cn/categories/php/"/>
    
    
      <category term="php" scheme="https://moonclearner.cn/tags/php/"/>
    
      <category term="web attack" scheme="https://moonclearner.cn/tags/web-attack/"/>
    
  </entry>
  
  <entry>
    <title>open redirect</title>
    <link href="https://moonclearner.cn/php/secure/Open_Redirect.html"/>
    <id>https://moonclearner.cn/php/secure/Open_Redirect.html</id>
    <published>2019-11-20T05:58:39.499Z</published>
    <updated>2019-11-20T05:58:39.499Z</updated>
    
    <content type="html"><![CDATA[<h1 id="open-redirect"><a href="#open-redirect" class="headerlink" title="open redirect"></a>open redirect</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">header(<span class="string">"Location: $url"</span>);</span><br></pre></td></tr></table></figure><h1 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">header(<span class="string">"Location: "</span>.filter_var($url, FILTER_SANITIZE_URL));</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;open-redirect&quot;&gt;&lt;a href=&quot;#open-redirect&quot; class=&quot;headerlink&quot; title=&quot;open redirect&quot;&gt;&lt;/a&gt;open redirect&lt;/h1&gt;&lt;figure class=&quot;highlight php&quot;
      
    
    </summary>
    
      <category term="php" scheme="https://moonclearner.cn/categories/php/"/>
    
    
      <category term="php" scheme="https://moonclearner.cn/tags/php/"/>
    
      <category term="web attack" scheme="https://moonclearner.cn/tags/web-attack/"/>
    
  </entry>
  
</feed>
