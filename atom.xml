<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>moonclearner page</title>
  
  <subtitle>moonclearner blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://moonclearner.cn/"/>
  <updated>2020-11-11T06:08:50.680Z</updated>
  <id>https://moonclearner.cn/</id>
  
  <author>
    <name>moonclearner</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>kvm common command</title>
    <link href="https://moonclearner.cn/ubuntu/kvm.html"/>
    <id>https://moonclearner.cn/ubuntu/kvm.html</id>
    <published>2020-11-11T06:08:50.680Z</published>
    <updated>2020-11-11T06:08:50.680Z</updated>
    
    <content type="html"><![CDATA[<h1 id="kvm-command"><a href="#kvm-command" class="headerlink" title="kvm command"></a>kvm command</h1><ul><li>virsh list –all<ul><li>gets the list of virtual machine info</li></ul></li><li>virsh start “Name”<ul><li>start virtual machine</li></ul></li><li>virsh shutdown “Id”<ul><li>shutdown virtual machine</li></ul></li><li>virsh console “Id”<ul><li>gets virtual machine console</li></ul></li><li>virsh dumpxml “Id” | grep file<ul><li>gets the image file path</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;kvm-command&quot;&gt;&lt;a href=&quot;#kvm-command&quot; class=&quot;headerlink&quot; title=&quot;kvm command&quot;&gt;&lt;/a&gt;kvm command&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;virsh list –all&lt;ul&gt;
&lt;li&gt;gets
      
    
    </summary>
    
      <category term="kvm" scheme="https://moonclearner.cn/categories/kvm/"/>
    
    
      <category term="kvm" scheme="https://moonclearner.cn/tags/kvm/"/>
    
  </entry>
  
  <entry>
    <title>sogou install</title>
    <link href="https://moonclearner.cn/ubuntu/sogou.html"/>
    <id>https://moonclearner.cn/ubuntu/sogou.html</id>
    <published>2020-11-11T06:08:43.076Z</published>
    <updated>2020-11-11T06:08:43.076Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ubuntu-20-04-install-sogou"><a href="#ubuntu-20-04-install-sogou" class="headerlink" title="ubuntu 20.04 install sogou"></a>ubuntu 20.04 install sogou</h1><p>ubuntu 20.04 不支持搜狗官方linux下载的deb</p><h2 id="使用ubuntukylin的-sogou输入法"><a href="#使用ubuntukylin的-sogou输入法" class="headerlink" title="使用ubuntukylin的 sogou输入法"></a>使用ubuntukylin的 sogou输入法</h2><h3 id="添加ubuntukylin源"><a href="#添加ubuntukylin源" class="headerlink" title="添加ubuntukylin源"></a>添加ubuntukylin源</h3><p>根据官方教程添加ukui的官方源，为了安装及后续更新。此源中包含了麒麟版搜狗输入法。</p><p>$ curl -sL ‘<a href="https://keyserver.ubuntu.com/pks/lookup?&amp;op=get&amp;search=0x73BC8FBCF5DE40C6ADFCFFFA9C949F2093F565FF&#39;" target="_blank" rel="noopener">https://keyserver.ubuntu.com/pks/lookup?&amp;op=get&amp;search=0x73BC8FBCF5DE40C6ADFCFFFA9C949F2093F565FF&#39;</a> | sudo apt-key add<br>$ sudo apt-add-repository ‘deb <a href="http://archive.ubuntukylin.com/ukui" target="_blank" rel="noopener">http://archive.ubuntukylin.com/ukui</a> focal main’<br>$ sudo apt upgrade</p><h3 id="安装搜狗输入法"><a href="#安装搜狗输入法" class="headerlink" title="安装搜狗输入法"></a>安装搜狗输入法</h3><p>直接安装软件包，注意包名是sogouimebs而不是原来的sogoupinyin。这个版本在其他地方暂时是找不到的，因为是麒麟社区定制的版本。由于ubuntu和优麒麟一脉相承的关系，我们可以直接拿来用。</p><p>$ sudo apt install sogouimebs</p><h3 id="输入法设置"><a href="#输入法设置" class="headerlink" title="输入法设置"></a>输入法设置</h3><p>根据自身需求针对输入法属性进行设置</p><p>$ sogouIme-configtool </p><h3 id="shift-ctrl-就可以切换语言"><a href="#shift-ctrl-就可以切换语言" class="headerlink" title="shift + ctrl 就可以切换语言"></a>shift + ctrl 就可以切换语言</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ubuntu-20-04-install-sogou&quot;&gt;&lt;a href=&quot;#ubuntu-20-04-install-sogou&quot; class=&quot;headerlink&quot; title=&quot;ubuntu 20.04 install sogou&quot;&gt;&lt;/a&gt;ubuntu 2
      
    
    </summary>
    
      <category term="compile" scheme="https://moonclearner.cn/categories/compile/"/>
    
    
      <category term="ubuntu" scheme="https://moonclearner.cn/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>索引覆盖与回表</title>
    <link href="https://moonclearner.cn/%E7%B4%A2%E5%BC%95%E8%A6%86%E7%9B%96%E4%B8%8E%E5%9B%9E%E8%A1%A8.html"/>
    <id>https://moonclearner.cn/索引覆盖与回表.html</id>
    <published>2020-11-11T02:36:11.000Z</published>
    <updated>2020-11-11T05:48:53.577Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mysql的覆盖索引与回表"><a href="#Mysql的覆盖索引与回表" class="headerlink" title="Mysql的覆盖索引与回表"></a>Mysql的覆盖索引与回表</h1><p>##两大类索引<br>使用的存储引擎：MySQL5.7 InnoDB</p><h3 id="聚簇索引"><a href="#聚簇索引" class="headerlink" title="聚簇索引"></a>聚簇索引</h3><ul><li>如果表设置了主键，则主键就是聚簇索引</li><li>如果表没有主键，则会默认第一个NOT NULL，且唯一（UNIQUE）的列作为聚簇索引</li><li>以上都没有，则会默认创建一个隐藏的row_id作为聚簇索引<br>InnoDB的聚簇索引的叶子节点存储的是行记录（其实是页结构，一个页包含多行数据），InnoDB必须要有至少一个聚簇索引。<br>由此可见，使用聚簇索引查询会很快，因为可以直接定位到行记录。<h3 id="普通索引"><a href="#普通索引" class="headerlink" title="普通索引"></a>普通索引</h3>普通索引也叫二级索引，除聚簇索引外的索引，即非聚簇索引。<br>InnoDB的普通索引叶子节点存储的是主键（聚簇索引）的值，而MyISAM的普通索引存储的是记录指针。<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create table user(</span><br><span class="line">    -&gt; id int(10) auto_increment,</span><br><span class="line">    -&gt; name varchar(30),</span><br><span class="line">    -&gt; age tinyint(4),</span><br><span class="line">    -&gt; primary key (id),</span><br><span class="line">    -&gt; index idx_age (age)</span><br><span class="line">    -&gt; )engine=innodb charset=utf8mb4;</span><br></pre></td></tr></table></figure></li></ul><p>id 字段是聚簇索引，age 字段是普通索引（二级索引）</p><h3 id="填充数据"><a href="#填充数据" class="headerlink" title="填充数据"></a>填充数据</h3><ul><li>insert into user(name,age) values(‘张三’,30);</li><li>insert into user(name,age) values(‘李四’,20);</li><li>insert into user(name,age) values(‘王五’,40);</li><li>insert into user(name,age) values(‘刘八’,10);</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from user;</span><br><span class="line">+----+--------+------+</span><br><span class="line">| id | name  | age |</span><br><span class="line">+----+--------+------+</span><br><span class="line">| 1 | 张三  |  30 |</span><br><span class="line">| 2 | 李四  |  20 |</span><br><span class="line">| 3 | 王五  |  40 |</span><br><span class="line">| 4 | 刘八  |  10 |</span><br><span class="line">+----+--------+------+</span><br></pre></td></tr></table></figure><h3 id="索引存储结构"><a href="#索引存储结构" class="headerlink" title="索引存储结构"></a>索引存储结构</h3><p>id 是主键，所以是聚簇索引，其叶子节点存储的是对应行记录的数据</p><img src="/索引覆盖与回表/20201111-105447.png"><h4 id="聚簇索引（ClusteredIndex）"><a href="#聚簇索引（ClusteredIndex）" class="headerlink" title="聚簇索引（ClusteredIndex）"></a>聚簇索引（ClusteredIndex）</h4><p>age 是普通索引（二级索引），非聚簇索引，其叶子节点存储的是聚簇索引的的值</p><img src="/索引覆盖与回表/20201111-105757.png"><h4 id="普通索引（secondaryIndex）"><a href="#普通索引（secondaryIndex）" class="headerlink" title="普通索引（secondaryIndex）"></a>普通索引（secondaryIndex）</h4><p>如果查询条件为主键（聚簇索引），则只需扫描一次B+树即可通过聚簇索引定位到要查找的行记录数据。<br>如：select * from user where id = 1;</p><img src="/索引覆盖与回表/20201111-105824.png"><h4 id="聚簇索引查找过程"><a href="#聚簇索引查找过程" class="headerlink" title="聚簇索引查找过程"></a>聚簇索引查找过程</h4><p>如果查询条件为普通索引（非聚簇索引），需要扫描两次B+树，第一次扫描通过普通索引定位到聚簇索引的值，然后第二次扫描通过聚簇索引的值定位到要查找的行记录数据。 如：select * from user where age = 30;</p><ol><li>先通过普通索引 age=30 定位到主键值 id=1</li><li>再通过聚集索引 id=1 定位到行记录数据<img src="/索引覆盖与回表/20201111-105840.png"></li></ol><p>普通索引查找过程第一步</p><img src="/索引覆盖与回表/20201111-105845.png"><p>普通索引查找过程第二步</p><h3 id="回表查询"><a href="#回表查询" class="headerlink" title="回表查询"></a>回表查询</h3><p>先通过普通索引的值定位聚簇索引值，再通过聚簇索引的值定位行记录数据，需要扫描两次索引B+树，它的性能较扫一遍索引树更低。</p><h3 id="索引覆盖"><a href="#索引覆盖" class="headerlink" title="索引覆盖"></a>索引覆盖</h3><p>只需要在一棵索引树上就能获取SQL所需的所有列数据，无需回表，速度更快。</p><p>例如：select id,age from user where age = 10;</p><h3 id="如何实现覆盖索引"><a href="#如何实现覆盖索引" class="headerlink" title="如何实现覆盖索引"></a>如何实现覆盖索引</h3><p>常见的方法是：将被查询的字段，建立到联合索引里去。</p><p>1、如实现：select id,age from user where age = 10;</p><p>explain分析：因为age是普通索引，使用到了age索引，通过一次扫描B+树即可查询到相应的结果，这样就实现了覆盖索引</p><img src="/索引覆盖与回表/20201111-105903.png"><p>2、实现：select id,age,name from user where age = 10;</p><p>explain分析：age是普通索引，但name列不在索引树上，所以通过age索引在查询到id和age的值后，需要进行回表再查询name的值。此时的Extra列的NULL表示进行了回表查询</p><img src="/索引覆盖与回表/20201111-105908.png"><p>为了实现索引覆盖，需要建组合索引idx_age_name(age,name)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">drop index idx_age on user;</span><br><span class="line">create index idx_age_name on user(`age`,`name`);</span><br></pre></td></tr></table></figure></p><p>explain分析：此时字段age和name是组合索引idx_age_name，查询的字段id、age、name的值刚刚都在索引树上，只需扫描一次组合索引B+树即可，这就是实现了索引覆盖，此时的Extra字段为Using index表示使用了索引覆盖。</p><img src="/索引覆盖与回表/20201111-105916.png"><p>哪些场景适合使用索引覆盖来优化SQL</p><p>全表count查询优化<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create table user(</span><br><span class="line">    -&gt; id int(10) auto_increment,</span><br><span class="line">    -&gt; name varchar(30),</span><br><span class="line">    -&gt; age tinyint(4),</span><br><span class="line">    -&gt; primary key (id),</span><br><span class="line">    -&gt; )engine=innodb charset=utf8mb4;</span><br></pre></td></tr></table></figure></p><p>例如：select count(age) from user;</p><img src="/索引覆盖与回表/20201111-105959.png"><p>使用索引覆盖优化：创建age字段索引</p><p>create index idx_age on user(age);</p><img src="/索引覆盖与回表/20201111-110004.png"><h3 id="列查询回表优化"><a href="#列查询回表优化" class="headerlink" title="列查询回表优化"></a>列查询回表优化</h3><p>前文在描述索引覆盖使用的例子就是</p><p>例如：select id,age,name from user where age = 10;</p><p>使用索引覆盖：建组合索引idx_age_name(age,name)即可</p><h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><p>例如：select id,age,name from user order by age limit 100,2;<br>因为name字段不是索引，所以在分页查询需要进行回表查询，此时Extra为Using filesort文件排序，查询性能低下。</p><img src="/索引覆盖与回表/20201111-110100.png"><p>使用索引覆盖：建组合索引idx_age_name(age,name)</p><img src="/索引覆盖与回表/20201111-110105.png">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Mysql的覆盖索引与回表&quot;&gt;&lt;a href=&quot;#Mysql的覆盖索引与回表&quot; class=&quot;headerlink&quot; title=&quot;Mysql的覆盖索引与回表&quot;&gt;&lt;/a&gt;Mysql的覆盖索引与回表&lt;/h1&gt;&lt;p&gt;##两大类索引&lt;br&gt;使用的存储引擎：MySQL5.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>sqlzoo</title>
    <link href="https://moonclearner.cn/databases/sql/sqlzooNote.html"/>
    <id>https://moonclearner.cn/databases/sql/sqlzooNote.html</id>
    <published>2020-11-10T13:07:03.685Z</published>
    <updated>2020-11-10T13:07:03.685Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sql-Note"><a href="#sql-Note" class="headerlink" title="sql Note"></a>sql Note</h1><h2 id="function"><a href="#function" class="headerlink" title="function"></a>function</h2><ul><li>concat<ul><li>concat(stringa, stringb)</li></ul></li><li>replace<ul><li>replace(column_name,replace_string, dest_replace_string)</li></ul></li><li>mid<ul><li>截取字符串 MID(column_name,start[,length])</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;sql-Note&quot;&gt;&lt;a href=&quot;#sql-Note&quot; class=&quot;headerlink&quot; title=&quot;sql Note&quot;&gt;&lt;/a&gt;sql Note&lt;/h1&gt;&lt;h2 id=&quot;function&quot;&gt;&lt;a href=&quot;#function&quot; class=&quot;head
      
    
    </summary>
    
      <category term="sql" scheme="https://moonclearner.cn/categories/sql/"/>
    
    
      <category term="sql" scheme="https://moonclearner.cn/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>index and like and covering index</title>
    <link href="https://moonclearner.cn/databases/sql/index_and_like.html"/>
    <id>https://moonclearner.cn/databases/sql/index_and_like.html</id>
    <published>2020-11-10T13:07:01.665Z</published>
    <updated>2020-11-10T13:07:01.665Z</updated>
    
    <content type="html"><![CDATA[<h1 id="avoid-to-global-query-when-use-to-like"><a href="#avoid-to-global-query-when-use-to-like" class="headerlink" title="avoid to global query when use to like"></a>avoid to global query when use to like</h1><h2 id="select-when-（name，age）-has-index"><a href="#select-when-（name，age）-has-index" class="headerlink" title="select * when （name，age） has index"></a>select * when （name，age） has index</h2><ul><li>%在左边，即使有索引，也会失效</li><li>只有当%在右边时，才会生效 并且是range模式，而不是覆盖索引</li></ul><h2 id="select-id-name，age-salary-when-（name，-age）t-has-not-index"><a href="#select-id-name，age-salary-when-（name，-age）t-has-not-index" class="headerlink" title="select id.name，age,salary  when （name， age）t has not index"></a>select id.name，age,salary  when （name， age）t has not index</h2><p>在没有索引的情况下，两边都使用 % 来查询，不管想查询哪个字段（包括查询Id），全部都是全表扫描</p><h2 id="select-id-name，age，salary-when-（name，-age）-has-index"><a href="#select-id-name，age，salary-when-（name，-age）-has-index" class="headerlink" title="select id,name，age，salary when （name， age） has index"></a>select id,name，age，salary when （name， age） has index</h2><ul><li>select id where name LIKE ‘%test%’<ul><li>index 覆盖索引, id自带索引</li></ul></li><li>select id,name，age  where name LIKE ‘%test%’<ul><li>index 覆盖索引, 当数据列有索引 就可以</li></ul></li><li>select count(name)  where name LIKE ‘%test%’<ul><li>index 覆盖索引, 函数不影响索引</li></ul></li><li>select id,name，age，salary  where name LIKE ‘%test%’ <ul><li>全表查询 由于salary不再索引上</li></ul></li></ul><h2 id="discuss"><a href="#discuss" class="headerlink" title="discuss"></a>discuss</h2><p>执行计划不会选择覆盖查询<br>1.select选择的字段中含有不在索引中的字段 ，即索引没有覆盖全部的列。<br>2.where条件中不能含有对索引进行like的操作。</p><p>除去全局查询，其他查询分为了range和index，其他index为覆盖索引</p><p>覆盖索引，即select 数据列只能从索引中取得，查询列要被所建的索引覆盖</p><p>当一条查询语句符合覆盖索引条件时，sql只需要通过索引就可以返回查询所需要的数据，这样避免了查到索引后再返回表操作，减少I/O提高效率</p><p>使用覆盖索引Innodb比MyISAM效果更好—-InnoDB使用聚集索引组织数据，如果二级索引中包含查询所需的数据，就不再需要在聚集索引中查找了</p><h1 id="summary"><a href="#summary" class="headerlink" title="summary"></a>summary</h1><p>使用 覆盖索引 来解决 like ‘%test%’</p><ul><li>为like的条件列创建索引<ul><li>ALTER TABLE test_table add INDEX test_index(name)</li><li>CREATE INDEX test_index ON test_table(name)</li></ul></li><li>select id from test_table where name like ‘%test%’</li><li>通过覆盖索引来找到id等在来查询需要的数据<ul><li>select id, name, salary from test_table inner join( select id from test_table where name like ‘%test%’ ) as id_index USING(id)</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;avoid-to-global-query-when-use-to-like&quot;&gt;&lt;a href=&quot;#avoid-to-global-query-when-use-to-like&quot; class=&quot;headerlink&quot; title=&quot;avoid to global 
      
    
    </summary>
    
      <category term="sql" scheme="https://moonclearner.cn/categories/sql/"/>
    
    
      <category term="sql" scheme="https://moonclearner.cn/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu notes</title>
    <link href="https://moonclearner.cn/ubuntu/ubuntu_notes.html"/>
    <id>https://moonclearner.cn/ubuntu/ubuntu_notes.html</id>
    <published>2020-11-03T07:01:21.773Z</published>
    <updated>2020-11-03T07:01:21.773Z</updated>
    
    <content type="html"><![CDATA[<h1 id="How-to-delete-dash-app-label"><a href="#How-to-delete-dash-app-label" class="headerlink" title="How to delete dash app label"></a>How to delete dash app label</h1><ul><li>/usr/share/applications（全局模式下）</li><li>~/.local/share/applications（用户独立配置）</li></ul><h1 id="compare-expired"><a href="#compare-expired" class="headerlink" title="compare expired"></a>compare expired</h1><p><code>rm /home/agu/.config/bcompare/registry.dat</code></p><h1 id="zip-解压文件里面有中文乱码"><a href="#zip-解压文件里面有中文乱码" class="headerlink" title="zip 解压文件里面有中文乱码"></a>zip 解压文件里面有中文乱码</h1><p><code>unzip -O CP936 xxxx.zip</code></p><h1 id="update-cmd"><a href="#update-cmd" class="headerlink" title="update cmd"></a>update cmd</h1><ul><li>sudo apt update</li><li>sudo apt upgrade</li><li>sudo apt install -f</li><li>sudo apt-get -u dist-upgrade</li><li>sudo apt autoremove</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;How-to-delete-dash-app-label&quot;&gt;&lt;a href=&quot;#How-to-delete-dash-app-label&quot; class=&quot;headerlink&quot; title=&quot;How to delete dash app label&quot;&gt;&lt;/a&gt;Ho
      
    
    </summary>
    
      <category term="zsh" scheme="https://moonclearner.cn/categories/zsh/"/>
    
    
      <category term="ubuntu" scheme="https://moonclearner.cn/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>postgresql tablespace</title>
    <link href="https://moonclearner.cn/databases/postgresql/tablespace.html"/>
    <id>https://moonclearner.cn/databases/postgresql/tablespace.html</id>
    <published>2020-10-15T06:11:49.577Z</published>
    <updated>2020-10-15T06:11:49.577Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Table-Space"><a href="#Table-Space" class="headerlink" title="Table Space"></a>Table Space</h1><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>设备上有两块存储单元A（ROM）和B（RAM）都有一个表空间存放在AB上</p><p>由于B随着设备重启会重置，数据库的初始化应该放在A上</p><p>然后在A和B上创建对应的表空间</p><p>创建表放在A和B上的表空间上，但是注意，如果只是在表创建时，指定表空间，其约束也要指定表空间，或者设置一个默认表空间设置，然后在执行创建表，这样整个表的所有信息都指定到这个表空间上,这些约束包括，分表、id自增、外键等等</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Table-Space&quot;&gt;&lt;a href=&quot;#Table-Space&quot; class=&quot;headerlink&quot; title=&quot;Table Space&quot;&gt;&lt;/a&gt;Table Space&lt;/h1&gt;&lt;h2 id=&quot;应用场景&quot;&gt;&lt;a href=&quot;#应用场景&quot; class=&quot;
      
    
    </summary>
    
      <category term="postgresql" scheme="https://moonclearner.cn/categories/postgresql/"/>
    
    
      <category term="postgresql" scheme="https://moonclearner.cn/tags/postgresql/"/>
    
  </entry>
  
  <entry>
    <title>postgresql Learning Note</title>
    <link href="https://moonclearner.cn/databases/postgresql/postgresqlLearningNote.html"/>
    <id>https://moonclearner.cn/databases/postgresql/postgresqlLearningNote.html</id>
    <published>2020-10-15T06:02:19.687Z</published>
    <updated>2020-10-15T06:02:19.687Z</updated>
    
    <content type="html"><![CDATA[<h1 id="postgresql-LearningNote"><a href="#postgresql-LearningNote" class="headerlink" title="postgresql LearningNote"></a>postgresql LearningNote</h1><h2 id="时间相关"><a href="#时间相关" class="headerlink" title="时间相关"></a>时间相关</h2><h3 id="查询昨天的数据"><a href="#查询昨天的数据" class="headerlink" title="查询昨天的数据"></a>查询昨天的数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">audit</span> <span class="keyword">where</span> <span class="keyword">current_date</span>- <span class="built_in">DATE</span>(to_char(to_timestamp(<span class="built_in">time</span>), <span class="string">'YYYY-MM-DD 00:00:00'</span>))=<span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="查询当天的数据"><a href="#查询当天的数据" class="headerlink" title="查询当天的数据"></a>查询当天的数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">audit</span> <span class="keyword">where</span> age(<span class="keyword">current_date</span>, <span class="built_in">DATE</span>(to_char(to_timestamp(<span class="built_in">time</span>), <span class="string">'YYYY-MM-DD 00:00:00'</span>)))=<span class="string">'00:00:00'</span>;</span><br></pre></td></tr></table></figure><h3 id="查询当月的数据"><a href="#查询当月的数据" class="headerlink" title="查询当月的数据"></a>查询当月的数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">audit</span> <span class="keyword">where</span> age(<span class="keyword">current_date</span>, <span class="built_in">DATE</span>(to_char(to_timestamp(<span class="built_in">time</span>), <span class="string">'YYYY-MM-DD 00:00:00'</span>)))=<span class="string">'1 mons'</span>;</span><br></pre></td></tr></table></figure><h3 id="查询当年的数据"><a href="#查询当年的数据" class="headerlink" title="查询当年的数据"></a>查询当年的数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">audit</span> <span class="keyword">where</span> age(<span class="keyword">current_date</span>, <span class="built_in">DATE</span>(to_char(to_timestamp(<span class="built_in">time</span>), <span class="string">'YYYY-MM-DD 00:00:00'</span>)))=<span class="string">'1 years'</span>;</span><br></pre></td></tr></table></figure><h2 id="timestamp-转化为时间戳"><a href="#timestamp-转化为时间戳" class="headerlink" title="timestamp 转化为时间戳"></a>timestamp 转化为时间戳</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">postgresql=<span class="comment"># select time, EXTRACT(epoch FROM time), to_timestamp(EXTRACT(epoch FROM time)) from table； alert_type='ip';</span></span><br><span class="line">     time      | date_part  |      to_timestamp      </span><br><span class="line"><span class="comment">---------------------+------------+------------------------</span></span><br><span class="line"> 2020-08-24 14:30:44 | 1598279444 | 2020-08-24 22:30:44+08</span><br><span class="line"> 2020-08-24 14:30:44 | 1598279444 | 2020-08-24 22:30:44+08</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">postgresql=<span class="comment"># \d table;</span></span><br><span class="line">+<span class="comment">----------------------------------------------------</span></span><br><span class="line"> id            | integer                     |           | not null | nextval('tac_callback_id_seq'::regclass)</span><br><span class="line"> time    | timestamp without time zone |           | not null | '1970-01-01 08:00:00'::timestamp without time zone</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">postgresql=<span class="comment"># select time, EXTRACT(epoch FROM time), to_timestamp(EXTRACT(epoch FROM time)), to_timestamp(to_char(time , 'YYYY-MM-DD HH24:MI:SS'), 'YYYY-MM-DD HH24:MI:SS'), EXTRACT(epoch FROM to_timestamp(to_char(time , 'YYYY-MM-DD HH24:MI:SS'), 'YYYY-MM-DD HH24:MI:SS')) from tac_callback where alert_type='ip';</span></span><br><span class="line">     time      | date_part  |      to_timestamp      |      to_timestamp      | date_part  </span><br><span class="line"><span class="comment">---------------------+------------+------------------------+------------------------+------------</span></span><br><span class="line"> 2020-08-24 14:30:44 | 1598279444 | 2020-08-24 22:30:44+08 | 2020-08-24 14:30:44+08 | 1598250644</span><br><span class="line"> 2020-08-24 14:30:44 | 1598279444 | 2020-08-24 22:30:44+08 | 2020-08-24 14:30:44+08 | 1598250644</span><br><span class="line"> 2020-08-24 14:30:44 | 1598279444 | 2020-08-24 22:30:44+08 | 2020-08-24 14:30:44+08 | 1598250644</span><br><span class="line"> 2020-08-24 14:30:44 | 1598279444 | 2020-08-24 22:30:44+08 | 2020-08-24 14:30:44+08 | 1598250644</span><br><span class="line"> 2020-08-24 14:30:44 | 1598279444 | 2020-08-24 22:30:44+08 | 2020-08-24 14:30:44+08 | 1598250644</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">postgresql=<span class="comment"># select time, time::TIMESTAMP WITH TIME ZONE, EXTRACT(epoch FROM time), EXTRACT(epoch FROM time::TIMESTAMP WITH TIME ZONE) from tac_callback where alert_type='ip';</span></span><br><span class="line">     time      |       time       | date_part  | date_part  </span><br><span class="line"><span class="comment">---------------------+------------------------+------------+------------</span></span><br><span class="line"> 2020-08-24 14:30:44 | 2020-08-24 14:30:44+08 | 1598279444 | 1598250644</span><br><span class="line"> 2020-08-24 14:30:44 | 2020-08-24 14:30:44+08 | 1598279444 | 1598250644</span><br><span class="line"> 2020-08-24 14:30:44 | 2020-08-24 14:30:44+08 | 1598279444 | 1598250644</span><br><span class="line"> 2020-08-24 14:30:44 | 2020-08-24 14:30:44+08 | 1598279444 | 1598250644</span><br><span class="line"> 2020-08-24 14:30:44 | 2020-08-24 14:30:44+08 | 1598279444 | 1598250644</span><br></pre></td></tr></table></figure><p><strong>注意</strong>  EXTRACT(epoch FROM time) 返回的时间戳是double型</p><h2 id="数据类型转化"><a href="#数据类型转化" class="headerlink" title="数据类型转化"></a>数据类型转化</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CAST( 字段 AS 你要转换为的数据类型 )</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="keyword">cast</span>(<span class="number">1003</span> <span class="keyword">as</span> <span class="built_in">VARCHAR</span>);</span><br><span class="line"></span><br><span class="line">字段 :: 你要转换为的数据类型</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">1002</span> :: <span class="built_in">VARCHAR</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> sip::inet &lt;&lt;= $<span class="number">1</span>::inet;</span><br></pre></td></tr></table></figure><h2 id="数据某表备份和恢复"><a href="#数据某表备份和恢复" class="headerlink" title="数据某表备份和恢复"></a>数据某表备份和恢复</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dump</span></span><br><span class="line">pg_dump -U postgresql -t web -Fp -f web.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># restore</span></span><br><span class="line">psql -U postgresql -f web.sql</span><br></pre></td></tr></table></figure><h2 id="字符串转时间戳"><a href="#字符串转时间戳" class="headerlink" title="字符串转时间戳"></a>字符串转时间戳</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXTRACT(epoch from to_timestamp(time_string, 'yyyy-MM-dd hh24:mi:ss'))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;postgresql-LearningNote&quot;&gt;&lt;a href=&quot;#postgresql-LearningNote&quot; class=&quot;headerlink&quot; title=&quot;postgresql LearningNote&quot;&gt;&lt;/a&gt;postgresql Learni
      
    
    </summary>
    
      <category term="postgresql" scheme="https://moonclearner.cn/categories/postgresql/"/>
    
    
      <category term="postgresql" scheme="https://moonclearner.cn/tags/postgresql/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu best software</title>
    <link href="https://moonclearner.cn/ubuntu/best_software.html"/>
    <id>https://moonclearner.cn/ubuntu/best_software.html</id>
    <published>2020-09-09T03:15:34.606Z</published>
    <updated>2020-09-09T03:15:34.606Z</updated>
    
    <content type="html"><![CDATA[<h2 id="cpu-内存-网速显示"><a href="#cpu-内存-网速显示" class="headerlink" title="cpu 内存 网速显示"></a>cpu 内存 网速显示</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sudo add-apt-repository ppa:fossfreedom/indicator-sysmonitor</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install indicator-sysmonitor</span><br><span class="line"></span><br><span class="line">indicator-sysmonitor</span><br></pre></td></tr></table></figure><h2 id="远程连接windos"><a href="#远程连接windos" class="headerlink" title="远程连接windos"></a>远程连接windos</h2><h3 id="rdesktop"><a href="#rdesktop" class="headerlink" title="rdesktop"></a>rdesktop</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rdesktop -g 1800x1000 10.66.1.1 -r disk:linuxShare=/home/user/share -x 0x80 -r clipboard:PRIMARYCLIPBOARD -r sound:local</span><br></pre></td></tr></table></figure><p><code>-r disk:linuxShare=/home/user/share</code> 用于共享文件</p><p><code>-r clipboard:PRIMARYCLIPBOARD</code>  粘贴板共享</p><p><strong>当出现粘贴板失灵</strong> 需要关闭远程win的rdpclip.exe进程，然后再远程即可完成进行重启</p><p><code>-r sound:local</code> 开启远程的声音</p><h3 id="teamview"><a href="#teamview" class="headerlink" title="teamview"></a>teamview</h3><h3 id="向日葵"><a href="#向日葵" class="headerlink" title="向日葵"></a>向日葵</h3><h2 id="百度云有linux版本"><a href="#百度云有linux版本" class="headerlink" title="百度云有linux版本"></a>百度云有linux版本</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;cpu-内存-网速显示&quot;&gt;&lt;a href=&quot;#cpu-内存-网速显示&quot; class=&quot;headerlink&quot; title=&quot;cpu 内存 网速显示&quot;&gt;&lt;/a&gt;cpu 内存 网速显示&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;tabl
      
    
    </summary>
    
      <category term="tool" scheme="https://moonclearner.cn/categories/tool/"/>
    
    
      <category term="ubuntu" scheme="https://moonclearner.cn/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>PHP PHPSessionID not change on login</title>
    <link href="https://moonclearner.cn/php/secure/php_SessionID_on_login.html"/>
    <id>https://moonclearner.cn/php/secure/php_SessionID_on_login.html</id>
    <published>2020-08-25T09:18:22.214Z</published>
    <updated>2020-08-25T09:18:22.214Z</updated>
    
    <content type="html"><![CDATA[<h1 id="登录的时候phpsessionid没有变化"><a href="#登录的时候phpsessionid没有变化" class="headerlink" title="登录的时候phpsessionid没有变化"></a>登录的时候phpsessionid没有变化</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">check_login();</span><br><span class="line">session_regenerate_id();</span><br><span class="line">write_session_info()</span><br></pre></td></tr></table></figure><p>在检查密码之后，准备写入session登录信息之前 调用            session_regenerate_id()就可以改变用户的sessionid</p><h2 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h2><p>存在session克隆的危险</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;登录的时候phpsessionid没有变化&quot;&gt;&lt;a href=&quot;#登录的时候phpsessionid没有变化&quot; class=&quot;headerlink&quot; title=&quot;登录的时候phpsessionid没有变化&quot;&gt;&lt;/a&gt;登录的时候phpsessionid没有变化&lt;/
      
    
    </summary>
    
      <category term="php" scheme="https://moonclearner.cn/categories/php/"/>
    
    
      <category term="php" scheme="https://moonclearner.cn/tags/php/"/>
    
      <category term="web attack" scheme="https://moonclearner.cn/tags/web-attack/"/>
    
  </entry>
  
  <entry>
    <title>PHP ipv6</title>
    <link href="https://moonclearner.cn/php/php_ipv6.html"/>
    <id>https://moonclearner.cn/php/php_ipv6.html</id>
    <published>2020-08-21T10:35:49.200Z</published>
    <updated>2020-08-21T10:35:49.200Z</updated>
    
    <content type="html"><![CDATA[<h1 id="php-ipv6"><a href="#php-ipv6" class="headerlink" title="php ipv6"></a>php ipv6</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ip2long6</span><span class="params">($ipv6)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $ip_n = inet_pton($ipv6);</span><br><span class="line">    $bits = <span class="number">15</span>; <span class="comment">// 16 x 8 bit = 128bit</span></span><br><span class="line">    <span class="keyword">while</span> ($bits &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        $bin      = sprintf(<span class="string">"%08b"</span>, (ord($ip_n[$bits])));</span><br><span class="line">        $ipv6long = $bin . $ipv6long;</span><br><span class="line">        $bits--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> gmp_strval(gmp_init($ipv6long, <span class="number">2</span>), <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">long2ip6</span><span class="params">($ipv6long)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $bin = gmp_strval(gmp_init($ipv6long, <span class="number">10</span>), <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span> (strlen($bin) &lt; <span class="number">128</span>) &#123;</span><br><span class="line">        $pad = <span class="number">128</span> - strlen($bin);</span><br><span class="line">        <span class="keyword">for</span> ($i = <span class="number">1</span>; $i &lt;= $pad; $i++) &#123;</span><br><span class="line">            $bin = <span class="string">"0"</span> . $bin;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    $bits = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ($bits &lt;= <span class="number">7</span>) &#123;</span><br><span class="line">        $bin_part = substr($bin, ($bits * <span class="number">16</span>), <span class="number">16</span>);</span><br><span class="line">        $ipv6 .= dechex(bindec($bin_part)) . <span class="string">":"</span>;</span><br><span class="line">        $bits++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> inet_ntop(inet_pton(substr($ipv6, <span class="number">0</span>, <span class="number">-1</span>)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ip6mask</span><span class="params">($ipv6, $mask_len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $allowed_ip_mask = gmp_div_q(ip2long6(<span class="string">"FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF"</span>), gmp_pow(<span class="string">"2"</span>, <span class="number">128</span> - $mask_len));</span><br><span class="line">    $begin = gmp_and(ip2long6($ipv6) , $allowed_ip_mask) + <span class="number">1</span>;</span><br><span class="line">    $end   = gmp_or(ip2long6($ipv6), ( gmp_xor($allowed_ip_mask, gmp_init(<span class="string">"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"</span>, <span class="number">16</span>)))) - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">array</span>($begin, $end);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;php-ipv6&quot;&gt;&lt;a href=&quot;#php-ipv6&quot; class=&quot;headerlink&quot; title=&quot;php ipv6&quot;&gt;&lt;/a&gt;php ipv6&lt;/h1&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas
      
    
    </summary>
    
      <category term="php" scheme="https://moonclearner.cn/categories/php/"/>
    
    
      <category term="php" scheme="https://moonclearner.cn/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>PHP download</title>
    <link href="https://moonclearner.cn/php/php_download.html"/>
    <id>https://moonclearner.cn/php/php_download.html</id>
    <published>2020-08-21T10:33:47.662Z</published>
    <updated>2020-08-21T10:33:47.666Z</updated>
    
    <content type="html"><![CDATA[<h1 id="php-download"><a href="#php-download" class="headerlink" title="php download"></a>php download</h1><h2 id="php-download-big-file"><a href="#php-download-big-file" class="headerlink" title="php download big file"></a>php download big file</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">if (file_exists($path)) &#123;</span><br><span class="line">$file_size = filesize($path);</span><br><span class="line">if (FALSE!== ($handler = fopen($path, &apos;r&apos;)))&#123;</span><br><span class="line">header(&apos;Content-Description: File Transfer&apos;);</span><br><span class="line">header(&apos;Content-Type: application/octet-stream&apos;);</span><br><span class="line">header(&apos;Accept-Ranges: bytes&apos;);</span><br><span class="line">header(&apos;Content-Disposition: attachment; filename=&apos;.basename($path));</span><br><span class="line">header(&apos;Accept-Length:&apos;. $file_size);</span><br><span class="line">header(&apos;Content-Transfer-Encoding: chunked&apos;);</span><br><span class="line">header(&apos;Expires: 0&apos;);</span><br><span class="line">header(&apos;Cache-Control: must-revalidate, post-check=0, pre-check=0&apos;);</span><br><span class="line">header(&apos;Pragma: public&apos;);</span><br><span class="line">$buffer_size = 4096*20;</span><br><span class="line">while(!feof($handler))&#123;</span><br><span class="line">$chunk = fread($handler,$buffer_size);</span><br><span class="line">echo $chunk;</span><br><span class="line">&#125;</span><br><span class="line">fclose($handler);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="php-upload-big-file"><a href="#php-upload-big-file" class="headerlink" title="php upload big file"></a>php upload big file</h2><p>第一步： Apache环境中的档案上传大小控制<br>修改httpd.conf<br>添加下面内容<br>LimitRequestBody 10485760<br>即10M=1010241024，有的文章中提到应改为 600000000<br>重新启动apache，就可以在设置里看到你要的大小</p><p>第二步：修改在php5下POST文件大小的限制<br>修改php.ini<br>找到 File Uploadsh区域修改以下几个参数： file_uploads = on ;是否允许通过HTTP上传文件的开关。<br>默认为ON即是开 upload_tmp_dir ;文件上传至服务器上存储临时文件的地方，如果没指定就会用系统默认的临时文件夹(moodle可以不改)<br>upload_max_filesize = 8m ;允许上传文件大小的最大值.<br>找到 Data Handling区域，修改 post_max_size = 8m ;指通过表单POST给PHP的所能接收的最大值，包括表单里的所有值。<br>默认为8M<br>设上述四个参数后，上传小于8M的文件一般不成问题。但如果上传大于8M的文件，只还得设置以下参数：<br>在Resource Limits 区域: max_execution_time = 600 ;<br>每个PHP页面运行的最大时间值(秒)，默认30秒 max_input_time = 600 ;<br>每个PHP页面接收数据所需的最大时间，默认60秒 memory_limit = 8m ;<br>每个PHP页面所吃掉的最大内存，默认8M</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;php-download&quot;&gt;&lt;a href=&quot;#php-download&quot; class=&quot;headerlink&quot; title=&quot;php download&quot;&gt;&lt;/a&gt;php download&lt;/h1&gt;&lt;h2 id=&quot;php-download-big-file&quot;&gt;&lt;a
      
    
    </summary>
    
      <category term="php" scheme="https://moonclearner.cn/categories/php/"/>
    
    
      <category term="php" scheme="https://moonclearner.cn/tags/php/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://moonclearner.cn/leetcode/tree/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91.html"/>
    <id>https://moonclearner.cn/leetcode/tree/平衡二叉树.html</id>
    <published>2020-08-19T12:44:45.843Z</published>
    <updated>2020-08-19T12:44:45.843Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>PHP View File</title>
    <link href="https://moonclearner.cn/php/php_view_file.html"/>
    <id>https://moonclearner.cn/php/php_view_file.html</id>
    <published>2020-07-23T03:09:08.823Z</published>
    <updated>2020-07-23T03:09:08.823Z</updated>
    
    <content type="html"><![CDATA[<h1 id="php-读取文件返回给浏览器直接预览而不是下载"><a href="#php-读取文件返回给浏览器直接预览而不是下载" class="headerlink" title="php 读取文件返回给浏览器直接预览而不是下载"></a>php 读取文件返回给浏览器直接预览而不是下载</h1><h2 id="预览PDF"><a href="#预览PDF" class="headerlink" title="预览PDF"></a>预览PDF</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">header(&quot;Content-Type: application/pdf&quot;);</span><br><span class="line">header(&apos;Content-Disposition: inline; filename=&quot;test.pdf&quot;&apos;);</span><br><span class="line">header(&apos;Content-Transfer-Encoding: binary&apos;);</span><br><span class="line">header(&apos;Accept-Ranges: bytes&apos;);</span><br><span class="line">@readfile($filePath);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;php-读取文件返回给浏览器直接预览而不是下载&quot;&gt;&lt;a href=&quot;#php-读取文件返回给浏览器直接预览而不是下载&quot; class=&quot;headerlink&quot; title=&quot;php 读取文件返回给浏览器直接预览而不是下载&quot;&gt;&lt;/a&gt;php 读取文件返回给浏览器直接预
      
    
    </summary>
    
      <category term="php" scheme="https://moonclearner.cn/categories/php/"/>
    
    
      <category term="php" scheme="https://moonclearner.cn/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>common cmd</title>
    <link href="https://moonclearner.cn/shell/common_cmd.html"/>
    <id>https://moonclearner.cn/shell/common_cmd.html</id>
    <published>2020-05-25T06:16:36.896Z</published>
    <updated>2020-05-25T06:16:36.864Z</updated>
    
    <content type="html"><![CDATA[<h1 id="common-cmd"><a href="#common-cmd" class="headerlink" title="common cmd"></a>common cmd</h1><h2 id="delete-all-files-in-the-current-path-except-file-A"><a href="#delete-all-files-in-the-current-path-except-file-A" class="headerlink" title="delete all files in the current path except file A"></a>delete all files in the current path except file A</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">find ./* |grep -v A |xargs rm -r</span><br><span class="line"></span><br><span class="line"># second method</span><br><span class="line">rm -rf !(keep1 | keep2)</span><br></pre></td></tr></table></figure><h2 id="delete-all-file-except-py-file"><a href="#delete-all-file-except-py-file" class="headerlink" title="delete all file except py file"></a>delete all file except py file</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -name &quot;*&quot; -type f |grep -v &quot;.py&quot; |grep  &quot;\.&quot; |xargs rm -rf</span><br></pre></td></tr></table></figure><h2 id="kill-all-python-process"><a href="#kill-all-python-process" class="headerlink" title="kill all python process"></a>kill all python process</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef|grep python |grep -v grep|awk  &apos;&#123;print $2&#125;&apos;|xargs kill -9</span><br></pre></td></tr></table></figure><h2 id="bash-shortkey"><a href="#bash-shortkey" class="headerlink" title="bash shortkey"></a>bash shortkey</h2><ul><li><p>history 显示命令历史列表</p></li><li><p>↑(Ctrl+p) 显示上一条命令</p></li><li><p>↓(Ctrl+n) 显示下一条命令</p></li><li><p>!num 执行命令历史列表的第num条命令</p></li><li><p>!! 执行上一条命令</p></li><li><p>!?string? 执行含有string字符串的最新命令</p></li><li><p>Ctrl+r 然后输入若干字符，开始向上搜索包含该字符的命令，继续按Ctrl+r，搜索上一条匹配的命令</p></li><li><p>Ctrl+s 与Ctrl+r类似,只是正向检索</p></li><li><p>Alt+&lt; 历史列表第一项</p></li><li><p>Alt+&gt; 历史列表最后一项</p></li><li><p>Ctrl+f 光标向前移动一个字符,相当与-&gt;</p></li><li><p>Ctrl+b 光标向后移动一个字符,相当与&lt;-</p></li><li><p>Alt+f 光标向前移动一个单词</p></li><li><p>Alt+b 光标向后移动一个单词</p></li><li><p>ls !$ 执行命令ls，并以上一条命令的参数为其参数</p></li><li><p>Ctrl+a 移动到当前行的开头</p></li><li><p>Ctrl+e 移动到当前行的结尾</p></li><li><p>Esc+b 移动到当前单词的开头</p></li><li><p>Esc+f 移动到当前单词的结尾</p></li><li><p>Ctrl+l 清屏</p></li><li><p>Ctrl+u 剪切命令行中光标所在处之前的所有字符（不包括自身）</p></li><li><p>Ctrl+k 剪切命令行中光标所在处之后的所有字符（包括自身）</p></li><li><p>Ctrl+d 删除光标所在处字符</p></li><li><p>Ctrl+h 删除光标所在处前一个字符</p></li><li><p>Ctrl+y 粘贴刚才所删除的字符</p></li><li><p>Ctrl+w 剪切光标所在处之前的一个词（以空格、标点等为分隔符）</p></li><li><p>Alt+d 剪切光标之后的词</p></li><li><p>Esc+w 删除光标所在处之前的字符至其单词尾（以空格、标点等为分隔符）</p></li><li><p>Ctrl+t 颠倒光标所在处及其之前的字符位置，并将光标移动到下一个字符</p></li><li><p>Alt+t 交换当前与以前单词的位置</p></li><li><p>Alt+u 把当前词转化为大写</p></li><li><p>Alt+l 把当前词转化为小写</p></li><li><p>Alt+c 把当前词汇变成首字符大写</p></li><li><p>Ctrl+v 插入特殊字符,如Ctrl+v+Tab加入Tab字符键</p></li><li><p>Esc+t 颠倒光标所在处及其相邻单词的位置</p></li><li><p>Ctrl+c 删除整行</p></li><li><p>Ctrl+(x u) 按住Ctrl的同时再先后按x和u，撤销刚才的操作</p></li><li><p>Ctrl+s 挂起当前shell</p></li><li><p>Ctrl+q 重新启用挂起的shell</p></li><li><p>[Ctrl] + [Alt] + [Backspace] = 杀死你当前的 X 会话。杀死图形化桌面会话，把你返回到登录屏幕。如果正常退出步骤不起作用，你可以使用这种方法。</p></li><li><p>[Ctrl] + [Alt] + [Delete] = 关机和重新引导 Red Hat Linux。关闭你当前的会话然后重新引导 OS。只有在正常关机步骤不起作用时才使用这种方法。</p></li><li><p>[Ctrl] + [Alt] + [Fn] = 切换屏幕。 [Ctrl] + [Alt] + 功能键之一会显示一个新屏幕。根据默认设置，从 [F1] 到 [F6] 是 shell 提示屏幕， [F7] 是图形化屏幕。</p></li><li><p>[Alt] + [Tab] = 在图形化桌面环境中切换任务。如果你同时打开了不止一个应用程序，你可以使用 [Alt] + [Tab] 来在打开的任务和应用程序间切换。</p></li><li><p>[Ctrl] + [a] = 把光标移到行首。它在多数文本编辑器和 Mozilla 的 URL 字段内可以使用。</p></li><li><p>[Ctrl] + [d] = 从 shell 提示中注销（并关闭）。使用该快捷键，你就不必键入 exit 或 logout 。</p></li><li><p>[Ctrl] + [e] = 把光标移到行尾。它在多数文本编辑器和 Mozilla 的 URL 字段内都可使用。</p></li><li><p>[Ctrl] + [l] = 清除终端。该快捷操作与在命令行键入 clear 作用相同。</p></li><li><p>[Ctrl] + = 清除当前行。如果你在终端下工作，使用这一快捷操作可以清除从光标处到行首的字符。</p></li><li><p>[鼠标中间键] = 粘贴突出显示的文本。使用鼠标左键来突出显示文本。把光标指向你想粘贴文本的地方。点击鼠标中间键来粘贴它。在两键鼠标系统中，如果你把鼠标配置成模拟第三键，你可以同时点击鼠标的左右两键来执行粘贴。</p></li><li><p>[Tab] =命令行自动补全。使用 shell 提示时可使用这一命令。键入命令或文件名的前几个字符，然后按 [Tab] 键，它会自动补全命令或显示匹配你键入字符的所有命令。</p></li><li><p>[向上] 和 [向下] 箭头 = 显示命令历史。当你使用 shell 提示时，按 [向上] 或 [向下] 箭头来前后查看你在当前目录下键入的命令历史。当你看到你想使用的命令时，按 [Enter] 键。</p></li><li><p>clear = 清除 shell 提示屏幕。在命令行下键入它会清除所有这个 shell 提示屏幕中显示的数据。</p></li><li><p>exit = 注销。在 shell 提示中键入它会注销当前的用户或根用户帐号。</p></li><li><p>history = 显示命令历史。在 shell 提示中键入它来显示你所键入的被编号的前 1000 个命令。要显示较短的命令历史，键入 history f之后，空一格，在键入一个数字。例如： history 20 。</p></li><li><p>reset = 刷新 shell 提示屏幕。如果字符不清晰或乱码的话，在 shell 提示下键入这个命令会刷新屏幕。</p></li><li><h1 id="Ctrl-U-擦除一行光标前面的部分。"><a href="#Ctrl-U-擦除一行光标前面的部分。" class="headerlink" title="Ctrl-U: 擦除一行光标前面的部分。"></a>Ctrl-U: 擦除一行光标前面的部分。</h1></li><li><h1 id="Ctrl-H-擦除光标前面的一个字符。"><a href="#Ctrl-H-擦除光标前面的一个字符。" class="headerlink" title="Ctrl-H: 擦除光标前面的一个字符。"></a>Ctrl-H: 擦除光标前面的一个字符。</h1></li><li><h1 id="Ctrl-D-终止输入。-退出-shell，如果您正在使用-shell-的话-。"><a href="#Ctrl-D-终止输入。-退出-shell，如果您正在使用-shell-的话-。" class="headerlink" title="Ctrl-D: 终止输入。(退出 shell，如果您正在使用 shell 的话)。"></a>Ctrl-D: 终止输入。(退出 shell，如果您正在使用 shell 的话)。</h1></li><li><h1 id="Ctrl-C-终止当前正在运行的程序。"><a href="#Ctrl-C-终止当前正在运行的程序。" class="headerlink" title="Ctrl-C: 终止当前正在运行的程序。"></a>Ctrl-C: 终止当前正在运行的程序。</h1></li><li><h1 id="Ctrl-Z-暂停程序。"><a href="#Ctrl-Z-暂停程序。" class="headerlink" title="Ctrl-Z: 暂停程序。"></a>Ctrl-Z: 暂停程序。</h1></li><li><h1 id="Ctrl-S-停止向屏幕输出。"><a href="#Ctrl-S-停止向屏幕输出。" class="headerlink" title="Ctrl-S: 停止向屏幕输出。"></a>Ctrl-S: 停止向屏幕输出。</h1></li><li><h1 id="Ctrl-Q-重新激活向屏幕输出。"><a href="#Ctrl-Q-重新激活向屏幕输出。" class="headerlink" title="Ctrl-Q: 重新激活向屏幕输出。"></a>Ctrl-Q: 重新激活向屏幕输出。</h1></li><li><h1 id="up-arrow-开始历史命令搜索。"><a href="#up-arrow-开始历史命令搜索。" class="headerlink" title="up-arrow: 开始历史命令搜索。"></a>up-arrow: 开始历史命令搜索。</h1></li><li><h1 id="Ctrl-R-开始增量历史命令搜索，可以按照关键字查查自己用过哪些命令。"><a href="#Ctrl-R-开始增量历史命令搜索，可以按照关键字查查自己用过哪些命令。" class="headerlink" title="Ctrl-R: 开始增量历史命令搜索，可以按照关键字查查自己用过哪些命令。"></a>Ctrl-R: 开始增量历史命令搜索，可以按照关键字查查自己用过哪些命令。</h1></li><li><h1 id="TAB-完整的把文件名输入到命令行。"><a href="#TAB-完整的把文件名输入到命令行。" class="headerlink" title="TAB: 完整的把文件名输入到命令行。"></a>TAB: 完整的把文件名输入到命令行。</h1></li><li><h1 id="Ctrl-V-TAB-输入-TAB-而不是扩展命令行。"><a href="#Ctrl-V-TAB-输入-TAB-而不是扩展命令行。" class="headerlink" title="Ctrl-V TAB: 输入 TAB 而不是扩展命令行。"></a>Ctrl-V TAB: 输入 TAB 而不是扩展命令行。</h1></li><li><h1 id="Ctrl-P-上一条命令"><a href="#Ctrl-P-上一条命令" class="headerlink" title="Ctrl + P - 上一条命令"></a>Ctrl + P - 上一条命令</h1></li><li><h1 id="Ctrl-N-下一条命令"><a href="#Ctrl-N-下一条命令" class="headerlink" title="Ctrl + N - 下一条命令"></a>Ctrl + N - 下一条命令</h1></li><li><h1 id="Ctrl-U-擦除一行光标前面的部分。-1"><a href="#Ctrl-U-擦除一行光标前面的部分。-1" class="headerlink" title="Ctrl-U: 擦除一行光标前面的部分。"></a>Ctrl-U: 擦除一行光标前面的部分。</h1></li><li><h1 id="Ctrl-Y-粘贴前一Ctrl-U类命令删除的字符-，是粘贴不是撤销啊！"><a href="#Ctrl-Y-粘贴前一Ctrl-U类命令删除的字符-，是粘贴不是撤销啊！" class="headerlink" title="Ctrl + Y - 粘贴前一Ctrl+U类命令删除的字符 ，是粘贴不是撤销啊！"></a>Ctrl + Y - 粘贴前一Ctrl+U类命令删除的字符 ，是粘贴不是撤销啊！</h1></li><li><h1 id="上一条命令"><a href="#上一条命令" class="headerlink" title="!! - 上一条命令"></a>!! - 上一条命令</h1></li><li><h1 id="n-倒数第N条历史命令"><a href="#n-倒数第N条历史命令" class="headerlink" title="!-n - 倒数第N条历史命令"></a>!-n - 倒数第N条历史命令</h1></li><li><h1 id="n-p-打印上一条命令（不执行）"><a href="#n-p-打印上一条命令（不执行）" class="headerlink" title="!-n:p - 打印上一条命令（不执行）"></a>!-n:p - 打印上一条命令（不执行）</h1></li><li><h1 id="string？-最新一条含有“string”的命令"><a href="#string？-最新一条含有“string”的命令" class="headerlink" title="!?string？- 最新一条含有“string”的命令"></a>!?string？- 最新一条含有“string”的命令</h1></li><li><h1 id="n-gs-str1-str2-将倒数第N条命令的str1替换为str2，并执行（若不加g-则仅替换第一个）"><a href="#n-gs-str1-str2-将倒数第N条命令的str1替换为str2，并执行（若不加g-则仅替换第一个）" class="headerlink" title="!-n:gs/str1/str2/ - 将倒数第N条命令的str1替换为str2，并执行（若不加g,则仅替换第一个）"></a>!-n:gs/str1/str2/ - 将倒数第N条命令的str1替换为str2，并执行（若不加g,则仅替换第一个）</h1></li><li><h1 id="Ctrl-l-清屏"><a href="#Ctrl-l-清屏" class="headerlink" title="Ctrl + l - 清屏"></a>Ctrl + l - 清屏</h1></li><li><h1 id="Ctrl-A-光标移到行首"><a href="#Ctrl-A-光标移到行首" class="headerlink" title="Ctrl + A - 光标移到行首"></a>Ctrl + A - 光标移到行首</h1></li><li><h1 id="Ctrl-E-光标移到行尾"><a href="#Ctrl-E-光标移到行尾" class="headerlink" title="Ctrl + E - 光标移到行尾"></a>Ctrl + E - 光标移到行尾</h1></li><li><h1 id="Ctrl-W-清除光标之前一个单词"><a href="#Ctrl-W-清除光标之前一个单词" class="headerlink" title="Ctrl + W - 清除光标之前一个单词"></a>Ctrl + W - 清除光标之前一个单词</h1></li><li><h1 id="Ctrl-K-清除光标到行尾的字符"><a href="#Ctrl-K-清除光标到行尾的字符" class="headerlink" title="Ctrl + K - 清除光标到行尾的字符"></a>Ctrl + K - 清除光标到行尾的字符</h1></li><li><h1 id="Ctrl-T-交换光标前两个字符"><a href="#Ctrl-T-交换光标前两个字符" class="headerlink" title="Ctrl + T - 交换光标前两个字符"></a>Ctrl + T - 交换光标前两个字符</h1></li><li><h1 id="Ctrl-V-输入控制字符-如Ctrl-v-会输入-M"><a href="#Ctrl-V-输入控制字符-如Ctrl-v-会输入-M" class="headerlink" title="Ctrl + V - 输入控制字符 如Ctrl+v ,会输入^M"></a>Ctrl + V - 输入控制字符 如Ctrl+v ,会输入^M</h1></li><li><h1 id="Ctrl-F-光标后移一个字符"><a href="#Ctrl-F-光标后移一个字符" class="headerlink" title="Ctrl + F - 光标后移一个字符"></a>Ctrl + F - 光标后移一个字符</h1></li><li><h1 id="Ctrl-B-光标前移一个字符"><a href="#Ctrl-B-光标前移一个字符" class="headerlink" title="Ctrl + B - 光标前移一个字符"></a>Ctrl + B - 光标前移一个字符</h1></li><li><h1 id="Ctrl-H-删除光标前一个字符"><a href="#Ctrl-H-删除光标前一个字符" class="headerlink" title="Ctrl + H - 删除光标前一个字符"></a>Ctrl + H - 删除光标前一个字符</h1></li><li><h1 id="N-F-光标后移N个单词，N为1时可省略"><a href="#N-F-光标后移N个单词，N为1时可省略" class="headerlink" title="N++F - 光标后移N个单词，N为1时可省略"></a>N++F - 光标后移N个单词，N为1时可省略</h1></li><li><h1 id="N-B-光标前移N个单词，N为1时可省略"><a href="#N-B-光标前移N个单词，N为1时可省略" class="headerlink" title="N++B - 光标前移N个单词，N为1时可省略"></a>N++B - 光标前移N个单词，N为1时可省略</h1></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;common-cmd&quot;&gt;&lt;a href=&quot;#common-cmd&quot; class=&quot;headerlink&quot; title=&quot;common cmd&quot;&gt;&lt;/a&gt;common cmd&lt;/h1&gt;&lt;h2 id=&quot;delete-all-files-in-the-current-p
      
    
    </summary>
    
      <category term="shell" scheme="https://moonclearner.cn/categories/shell/"/>
    
    
      <category term="linux" scheme="https://moonclearner.cn/tags/linux/"/>
    
      <category term="shell" scheme="https://moonclearner.cn/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>build php extension fail phpizse</title>
    <link href="https://moonclearner.cn/php/configure/php_extension_compile_fail.html"/>
    <id>https://moonclearner.cn/php/configure/php_extension_compile_fail.html</id>
    <published>2020-04-30T07:29:54.868Z</published>
    <updated>2020-04-30T07:29:54.868Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CDPATH-command-not-found"><a href="#CDPATH-command-not-found" class="headerlink" title="CDPATH command not found"></a>CDPATH command not found</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">$</span> make </span><br><span class="line">/home/user/libtool: line 482: CDPATH: command not found</span><br><span class="line">libtool: Version mismatch error.  This is libtool 2.4.2, but the</span><br><span class="line">libtool: definition of this LT_INIT comes from an older release.</span><br><span class="line">libtool: You should recreate aclocal.m4 with macros from libtool 2.4.2</span><br><span class="line">libtool: and run autoconf again.</span><br><span class="line">make: *** [xdebug.lo] Error 63</span><br></pre></td></tr></table></figure><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><ul><li>aclocal</li><li>libtoolize –force</li><li>autoheader</li><li>autoconf</li></ul><h2 id="solution2"><a href="#solution2" class="headerlink" title="solution2"></a>solution2</h2><ul><li>rm –rf aclocal.m4</li><li>autoreconf</li></ul><h2 id="solution3"><a href="#solution3" class="headerlink" title="solution3"></a>solution3</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">If you have error with libtool version after make - way to install:</span><br><span class="line">phpize --clean &amp;&amp; phpize</span><br><span class="line">rm aclocal.m4</span><br><span class="line">aclocal</span><br><span class="line">autoconf</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h1 id="undefined-reference-to-symbol-‘ber-strdup’"><a href="#undefined-reference-to-symbol-‘ber-strdup’" class="headerlink" title="undefined reference to symbol ‘ber_strdup’"></a>undefined reference to symbol ‘ber_strdup’</h1><p>./configure 」沒抓好一些环境变数值</p><h2 id="solution-1"><a href="#solution-1" class="headerlink" title="solution"></a>solution</h2><p>在PHP源码目录下 vi Makefile 找到 EXTRA_LIBS 行，在行末添加 ‘ -llber ‘ 保存退出再次make即可。</p>]]></content>
    
    <summary type="html">
    
      CDPATH command not found
    
    </summary>
    
      <category term="php" scheme="https://moonclearner.cn/categories/php/"/>
    
    
      <category term="configure" scheme="https://moonclearner.cn/tags/configure/"/>
    
      <category term="php" scheme="https://moonclearner.cn/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>Package **** was not found in the pkg-config search path.</title>
    <link href="https://moonclearner.cn/ubuntu/pkg-config.html"/>
    <id>https://moonclearner.cn/ubuntu/pkg-config.html</id>
    <published>2020-04-13T09:19:50.357Z</published>
    <updated>2020-04-13T09:19:50.357Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Package-was-not-found-in-the-pkg-config-search-path"><a href="#Package-was-not-found-in-the-pkg-config-search-path" class="headerlink" title="Package ** was not found in the pkg-config search path."></a>Package <em>**</em> was not found in the pkg-config search path.</h1><p>configure: error: Unable to find libzmq installation</p><p><code>#pkg-config libzmq --libs</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Package libzmq was not found in the pkg-config search path.</span><br><span class="line">Perhaps you should add the directory containing `libzmq.pc&apos;</span><br><span class="line">to the PKG_CONFIG_PATH environment variable</span><br><span class="line">No package &apos;libzmq&apos; found</span><br></pre></td></tr></table></figure></p><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><ul><li><code>locate libzmq.pc</code> or <code>find / -name &quot;libzmq.pc&quot;</code><ul><li>找.pc文件路径</li></ul></li><li><code>find / -name pkgconfig</code><ul><li>找到pkgconfig的路径</li></ul></li><li><p>将libzmq.pc复制到没有这个文件的pkgconfig路径下</p></li><li><p>sudo ldconfig</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Package-was-not-found-in-the-pkg-config-search-path&quot;&gt;&lt;a href=&quot;#Package-was-not-found-in-the-pkg-config-search-path&quot; class=&quot;headerlin
      
    
    </summary>
    
      <category term="compile" scheme="https://moonclearner.cn/categories/compile/"/>
    
    
      <category term="ubuntu" scheme="https://moonclearner.cn/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>cmd return var</title>
    <link href="https://moonclearner.cn/shell/cmd_return.html"/>
    <id>https://moonclearner.cn/shell/cmd_return.html</id>
    <published>2020-03-11T06:28:03.803Z</published>
    <updated>2020-03-11T06:28:03.775Z</updated>
    
    <content type="html"><![CDATA[<h1 id="cmd-retutn-var"><a href="#cmd-retutn-var" class="headerlink" title="cmd retutn var"></a>cmd retutn var</h1><p> 如果为 0，则表示命令执行成功，其它值则表示错误，具体的错误码含义如下：<br> “OS error code   1:  Operation not permitted”<br> “OS error code   2:  No such file or directory”<br> “OS error code   3:  No such process”<br> “OS error code   4:  Interrupted system call”<br> “OS error code   5:  Input/output error”<br> “OS error code   6:  No such device or address”<br> “OS error code   7:  Argument list too long”<br> “OS error code   8:  Exec format error”<br> “OS error code   9:  Bad file descriptor”<br> “OS error code  10:  No child processes”<br> “OS error code  11:  Resource temporarily unavailable”<br> “OS error code  12:  Cannot allocate memory”<br> “OS error code  13:  Permission denied”<br> “OS error code  14:  Bad address”<br> “OS error code  15:  Block device required”<br> “OS error code  16:  Device or resource busy”<br> “OS error code  17:  File exists”<br> “OS error code  18:  Invalid cross-device link”<br> “OS error code  19:  No such device”<br> “OS error code  20:  Not a directory”<br> “OS error code  21:  Is a directory”<br> “OS error code  22:  Invalid argument”<br> “OS error code  23:  Too many open files in system”<br> “OS error code  24:  Too many open files”<br> “OS error code  25:  Inappropriate ioctl for device”<br> “OS error code  26:  Text file busy”<br> “OS error code  27:  File too large”<br> “OS error code  28:  No space left on device”<br> “OS error code  29:  Illegal seek”<br> “OS error code  30:  Read-only file system”<br> “OS error code  31:  Too many links”<br> “OS error code  32:  Broken pipe”<br> “OS error code  33:  Numerical argument out of domain”<br> “OS error code  34:  Numerical result out of range”<br> “OS error code  35:  Resource deadlock avoided”<br> “OS error code  36:  File name too long”<br> “OS error code  37:  No locks available”<br> “OS error code  38:  Function not implemented”<br> “OS error code  39:  Directory not empty”<br> “OS error code  40:  Too many levels of symbolic links”<br> “OS error code  42:  No message of desired type”<br> “OS error code  43:  Identifier removed”<br> “OS error code  44:  Channel number out of range”<br> “OS error code  45:  Level 2 not synchronized”<br> “OS error code  46:  Level 3 halted”<br> “OS error code  47:  Level 3 reset”<br> “OS error code  48:  Link number out of range”<br> “OS error code  49:  Protocol driver not attached”<br> “OS error code  50:  No CSI structure available”<br> “OS error code  51:  Level 2 halted”<br> “OS error code  52:  Invalid exchange”<br> “OS error code  53:  Invalid request descriptor”<br> “OS error code  54:  Exchange full”<br> “OS error code  55:  No anode”<br> “OS error code  56:  Invalid request code”<br> “OS error code  57:  Invalid slot”<br> “OS error code  59:  Bad font file format”<br> “OS error code  60:  Device not a stream”<br> “OS error code  61:  No data available”<br> “OS error code  62:  Timer expired”<br> “OS error code  63:  Out of streams resources”<br> “OS error code  64:  Machine is not on the network”<br> “OS error code  65:  Package not installed”<br> “OS error code  66:  Object is remote”<br> “OS error code  67:  Link has been severed”<br> “OS error code  68:  Advertise error”<br> “OS error code  69:  Srmount error”<br> “OS error code  70:  Communication error on send”<br> “OS error code  71:  Protocol error”<br> “OS error code  72:  Multihop attempted”<br> “OS error code  73:  RFS specific error”<br> “OS error code  74:  Bad message”<br> “OS error code  75:  Value too large for defined data type”<br> “OS error code  76:  Name not unique on network”<br> “OS error code  77:  File descriptor in bad state”<br> “OS error code  78:  Remote address changed”<br> “OS error code  79:  Can not access a needed shared library”<br> “OS error code  80:  Accessing a corrupted shared library”<br> “OS error code  81:  .lib section in a.out corrupted”<br> “OS error code  82:  Attempting to link in too many shared libraries”<br> “OS error code  83:  Cannot exec a shared library directly”<br> “OS error code  84:  Invalid or incomplete multibyte or wide character”<br> “OS error code  85:  Interrupted system call should be restarted”<br> “OS error code  86:  Streams pipe error”<br> “OS error code  87:  Too many users”<br> “OS error code  88:  Socket operation on non-socket”<br> “OS error code  89:  Destination address required”<br> “OS error code  90:  Message too long”<br> “OS error code  91:  Protocol wrong type for socket”<br> “OS error code  92:  Protocol not available”<br> “OS error code  93:  Protocol not supported”<br> “OS error code  94:  Socket type not supported”<br> “OS error code  95:  Operation not supported”<br> “OS error code  96:  Protocol family not supported”<br> “OS error code  97:  Address family not supported by protocol”<br> “OS error code  98:  Address already in use”<br> “OS error code  99:  Cannot assign requested address”<br> “OS error code 100:  Network is down”<br> “OS error code 101:  Network is unreachable”<br> “OS error code 102:  Network dropped connection on reset”<br> “OS error code 103:  Software caused connection abort”<br> “OS error code 104:  Connection reset by peer”<br> “OS error code 105:  No buffer space available”<br> “OS error code 106:  Transport endpoint is already connected”<br> “OS error code 107:  Transport endpoint is not connected”<br> “OS error code 108:  Cannot send after transport endpoint shutdown”<br> “OS error code 109:  Too many references: cannot splice”<br> “OS error code 110:  Connection timed out”<br> “OS error code 111:  Connection refused”<br> “OS error code 112:  Host is down”<br> “OS error code 113:  No route to host”<br> “OS error code 114:  Operation already in progress”<br> “OS error code 115:  Operation now in progress”<br> “OS error code 116:  Stale NFS file handle”<br> “OS error code 117:  Structure needs cleaning”<br> “OS error code 118:  Not a XENIX named type file”<br> “OS error code 119:  No XENIX semaphores available”<br> “OS error code 120:  Is a named type file”<br> “OS error code 121:  Remote I/O error”<br> “OS error code 122:  Disk quota exceeded”<br> “OS error code 123:  No medium found”<br> “OS error code 124:  Wrong medium type”<br> “OS error code 125:  Operation canceled”<br> “OS error code 126:  Required key not available”<br> “OS error code 127:  Key has expired”<br> “OS error code 128:  Key has been revoked”<br> “OS error code 129:  Key was rejected by service”<br> “OS error code 130:  Owner died”<br> “OS error code 131:  State not recoverable” </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;cmd-retutn-var&quot;&gt;&lt;a href=&quot;#cmd-retutn-var&quot; class=&quot;headerlink&quot; title=&quot;cmd retutn var&quot;&gt;&lt;/a&gt;cmd retutn var&lt;/h1&gt;&lt;p&gt; 如果为 0，则表示命令执行成功，其它值则表
      
    
    </summary>
    
      <category term="shell" scheme="https://moonclearner.cn/categories/shell/"/>
    
    
      <category term="linux" scheme="https://moonclearner.cn/tags/linux/"/>
    
      <category term="shell" scheme="https://moonclearner.cn/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Jq ajax</title>
    <link href="https://moonclearner.cn/js/jquery/jq_ajax.html"/>
    <id>https://moonclearner.cn/js/jquery/jq_ajax.html</id>
    <published>2020-02-14T01:29:17.803Z</published>
    <updated>2020-02-14T01:29:17.771Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jquery-Ajax"><a href="#jquery-Ajax" class="headerlink" title="jquery Ajax"></a>jquery Ajax</h1><h2 id="ajax-请求"><a href="#ajax-请求" class="headerlink" title="ajax 请求"></a>ajax 请求</h2><h3 id="question-1"><a href="#question-1" class="headerlink" title="question 1"></a>question 1</h3><p>ajax请求成功后，success返回看不到data</p><p>A：可能是因为服务器返回的数据不是json格式数据</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;jquery-Ajax&quot;&gt;&lt;a href=&quot;#jquery-Ajax&quot; class=&quot;headerlink&quot; title=&quot;jquery Ajax&quot;&gt;&lt;/a&gt;jquery Ajax&lt;/h1&gt;&lt;h2 id=&quot;ajax-请求&quot;&gt;&lt;a href=&quot;#ajax-请求&quot; c
      
    
    </summary>
    
      <category term="js" scheme="https://moonclearner.cn/categories/js/"/>
    
    
      <category term="js" scheme="https://moonclearner.cn/tags/js/"/>
    
      <category term="jquery" scheme="https://moonclearner.cn/tags/jquery/"/>
    
  </entry>
  
  <entry>
    <title>The notes of Reading Modern PHP book</title>
    <link href="https://moonclearner.cn/php/modernPHPNote.html"/>
    <id>https://moonclearner.cn/php/modernPHPNote.html</id>
    <published>2020-02-03T03:45:22.377Z</published>
    <updated>2020-02-03T03:45:22.377Z</updated>
    
    <content type="html"><![CDATA[<h1 id="The-notes-of-Reading-Modern-PHP-book"><a href="#The-notes-of-Reading-Modern-PHP-book" class="headerlink" title="The notes of Reading Modern PHP book"></a>The notes of Reading Modern PHP book</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>author’s project: <code>http://www.phptherightway.com</code>, 目的是为了让php程序员轻易找到php社区中权威成员最新编写的高质量文档</p><h3 id="目前开发流程"><a href="#目前开发流程" class="headerlink" title="目前开发流程"></a>目前开发流程</h3><ul><li>使用git来维护一个可以审查的代码历史</li><li>使用虚拟化工具varangt以及配置工具例如ansible、chef、puppet来搭建与生产服务器一样的开发环境</li><li>使用composer来管理php组件</li><li>php代码遵循PSR代码标准</li><li>phpUnit进行单元测试</li><li>php 引擎 Zend Engine (php4)</li><li>PHP引擎是解析、解释和执行php代码的程序</li><li>Hack是建立在PHP之上的变成语言，引入了静态类型、新的数据结构、额外的接口，同时向后兼容所有的动态类型php代码</li><li>hiphop virtual machine(facebook)， HHVM，是php和hack的解释器，使用即时(just in time, JIT)编译器提高应用的性能，减少内存用量</li></ul><h3 id="新的特性"><a href="#新的特性" class="headerlink" title="新的特性"></a>新的特性</h3><h4 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h4><ul><li>引入5.3</li><li>其作用是按照一种虚拟的层次结构组织php代码，避免类名以及变量冲突</li></ul><h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Documentable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getId</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StreamDocument</span> <span class="keyword">implements</span> <span class="title">Documentable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;id = $id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getId</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DocumentStore</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $data = [];</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">addDocument</span><span class="params">(Documentable $document)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $id = $document-&gt;getId();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;data[] = $id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$documentObject = <span class="keyword">new</span> DocumentStore();</span><br><span class="line">$stream = <span class="keyword">new</span> StreamDocument();</span><br><span class="line">$documentObject-&gt;addDocument($stream);</span><br></pre></td></tr></table></figure><h4 id="性状-trait"><a href="#性状-trait" class="headerlink" title="性状-trait"></a>性状-trait</h4><p>php5.4引入</p><ul><li>性状是类的部分实现（即常量、属性和方法）, 可以混入一个或者多个现有的PHP类中</li><li>作用： 表明类可以做什么（像接口）；提供模板化实现（像类）</li><li>将两个没有共同父类的类具有类似行为，比如商店和猫，在地图上应该都有地标，如果将其都继承父类地理，这样就没有继承层次结构。使用接口的话，虽然可以保留自然的继承层次结构，但是我们需要实现相同的地理代码，不符合DRY原则，即Dont Repeat yourself</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">trait</span> MyGeo&#123;</span><br><span class="line">    <span class="comment">//性状实现</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getGeo</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">MyGeo</span>;</span><br><span class="line">    <span class="comment">//类的实现</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$xiaobai = <span class="keyword">new</span> Cat();</span><br><span class="line">$xiaobai-&gt;getGeo();</span><br></pre></td></tr></table></figure><p>php解释器在编译的时候，会把性状复制粘贴到类的定义体里面，但是不会处理引入的不兼容问题，所以要确保类里面有性状使用的特定属性或者方法。</p><h4 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h4><p>php5.5</p><p>省内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function getRow($file)&#123;</span><br><span class="line">    $handle = fopen($file, &quot;rb&quot;);</span><br><span class="line">    if($handle === false)&#123;</span><br><span class="line">        throw new Exception();</span><br><span class="line">    &#125;</span><br><span class="line">    while(feof($handle) === false)&#123;</span><br><span class="line">        yield fgetcsv($handle);</span><br><span class="line">    &#125;</span><br><span class="line">    fclose($handle);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foreach(getRow(&quot;test.csv&quot;) as $row)&#123;</span><br><span class="line">    print_r($row);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="匿名函数-和-闭包"><a href="#匿名函数-和-闭包" class="headerlink" title="匿名函数 和 闭包"></a>匿名函数 和 闭包</h4><p>php5.3</p><p>php将匿名函数和闭包作为相同的概念，其实是伪装成函数的对象，都是Closure类的实例</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$closure = <span class="function"><span class="keyword">function</span><span class="params">($name)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sprintf(<span class="string">'Hello %s'</span>, $name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> $closure(<span class="string">"josh"</span>);</span><br></pre></td></tr></table></figure><p>闭包是指创建时封装周围状态的函数，即便闭包所在的环境不存在了，闭包中封装的状态依旧存在</p><p>我们之所以可以调用$closure变量，因为这个变量的值是一个闭包，而且闭包对象实现了一个<code>_invoke()</code>魔术方法，只要变量后面有()，php就会调用<code>_invoke()</code>方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array_map(function($number)&#123;return $number + 1;&#125;, [1,2,3]);</span><br></pre></td></tr></table></figure><h5 id="附加状态"><a href="#附加状态" class="headerlink" title="附加状态"></a>附加状态</h5><p>在php中需要手动调用bindTo()方法或者使用use将状态附加到php闭包中<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">enclosePerson</span><span class="params">($name)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">($doCommand)</span> <span class="title">use</span> <span class="params">($name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sprintf(<span class="string">'$s, $s'</span>, $name, $doCommand);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$clay = enclosePerson(<span class="string">'Clay'</span>);</span><br><span class="line"><span class="keyword">echo</span> $clay(<span class="string">"hello"</span>); <span class="comment">// Clay, hello</span></span><br></pre></td></tr></table></figure></p><p>enclosePerson()有个name参数，函数返回一个闭包对象，这个闭包封装了name参数，即便返回的对象跳出了enclosePerson()函数的作用域，它仍然会记住name的值，因为name仍在闭包里面。</p><p>可以用use将做个参数传入闭包里面</p><p>php闭包是对象，因此闭包实例都可以使用$this关键字来获取闭包内部的状态<br>bindTo()方法，第二个参数为绑定闭包的那个对象所属的php类，因此绑定this，可以访问绑定闭包的对象中受保护和私有成员变量</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $routes = <span class="keyword">array</span>();</span><br><span class="line">    <span class="keyword">protected</span> $responseStatus = <span class="string">'200 ok'</span>;</span><br><span class="line">    <span class="keyword">protected</span> $responseContentType = <span class="string">'text/html'</span>;</span><br><span class="line">    <span class="keyword">protected</span> $responseBody = <span class="string">'Hello word'</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">addRoute</span><span class="params">($routePath, $routeCallback)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;routes[$routePath] = $routeCallback-&gt;bindTo(<span class="keyword">$this</span>, <span class="keyword">__CLASS__</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span><span class="params">($currentPath)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;routes <span class="keyword">as</span> $routePath =&gt; $callback) &#123;</span><br><span class="line">            <span class="keyword">if</span>($routePath === $currentPath)</span><br><span class="line">            &#123;</span><br><span class="line">                $callback();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        header(<span class="string">'HTTP/1.1 '</span>.<span class="keyword">$this</span>-&gt;responseStatus);</span><br><span class="line">        header(<span class="string">'Content-type '</span>.<span class="keyword">$this</span>-&gt;responseContentType);</span><br><span class="line">        header(<span class="string">'Content-length '</span>.mb_strlen(<span class="keyword">$this</span>-&gt;responseBody));</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;responseBody;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$app = <span class="keyword">new</span> App();</span><br><span class="line">$app-&gt;addRoute(<span class="string">'/users/josh'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;responseContentType = <span class="string">'application/json;charset=utf-8'</span>;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;responseBody = <span class="string">'&#123;"name":"josh"&#125;'</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$app-&gt;dispatch(<span class="string">'/users/josh'</span>);</span><br></pre></td></tr></table></figure><h4 id="Zend-Opcache"><a href="#Zend-Opcache" class="headerlink" title="Zend Opcache"></a>Zend Opcache</h4><p>字节码缓存，php5.5</p><p>php是解释性语言，php解释器执行php脚本时，会解析php代码，将php代码编译成一系列Zend操作码，然后执行操作码。缓存预先编译好的字节码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">opcache.validate_timestamps = 1 //在生产环境中设为“0”</span><br></pre></td></tr></table></figure><h4 id="内置web服务器"><a href="#内置web服务器" class="headerlink" title="内置web服务器"></a>内置web服务器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -S 0.0.0.0:4000 -c php.ini</span><br></pre></td></tr></table></figure><h3 id="良好实践"><a href="#良好实践" class="headerlink" title="良好实践"></a>良好实践</h3><p>PHP-FIG 实现框架的互操作性，通过接口，自动加载机制和标准的风格，让框架互相合作。</p><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><p>查找组件网站<code>https://packagist.org</code></p><p>最好的组件 awesome php <code>https://github.com/ziadoz/awesome-php</code></p><h4 id="使用组件"><a href="#使用组件" class="headerlink" title="使用组件"></a>使用组件</h4><p>使用composer来管理php组件</p><p>安装：curl -sS <a href="https://getcomposer.org/installer" target="_blank" rel="noopener">https://getcomposer.org/installer</a> | php</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;The-notes-of-Reading-Modern-PHP-book&quot;&gt;&lt;a href=&quot;#The-notes-of-Reading-Modern-PHP-book&quot; class=&quot;headerlink&quot; title=&quot;The notes of Reading
      
    
    </summary>
    
      <category term="php" scheme="https://moonclearner.cn/categories/php/"/>
    
    
      <category term="php" scheme="https://moonclearner.cn/tags/php/"/>
    
  </entry>
  
</feed>
